[
  {
    "Start": 3293,
    "Length": 36,
    "SourcePath": "..\\..\\TestProjects\\Projects\\Portable11\\Portable\\Diagnostic\\DiagnosticFormatter.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Globalization;\nusing Microsoft.CodeAnalysis.Text;\nusing Roslyn.Utilities;\n\nnamespace Microsoft.CodeAnalysis\n{\n    /// <summary>\n    /// Formats <see cref=\"Diagnostic\"/> messages.\n    /// </summary>\n    public class DiagnosticFormatter\n    {\n        /// <summary>\n        /// Formats the <see cref=\"Diagnostic\"/> message using the optional <see cref=\"IFormatProvider\"/>.\n        /// </summary>\n        /// <param name=\"diagnostic\">The diagnostic.</param>\n        /// <param name=\"formatter\">The formatter; or null to use the default formatter.</param>\n        /// <returns>The formatted message.</returns>\n        public virtual string Format(Diagnostic diagnostic, IFormatProvider formatter = null)\n        {\n            if (diagnostic == null)\n            {\n                throw new ArgumentNullException(\"diagnostic\");\n            }\n\n            var culture = formatter as CultureInfo;\n\n            switch (diagnostic.Location.Kind)\n            {\n                case LocationKind.SourceFile:\n                case LocationKind.XmlFile:\n                case LocationKind.ExternalFile: \n                    var span = diagnostic.Location.GetLineSpan();\n                    var mappedSpan = diagnostic.Location.GetMappedLineSpan();\n                    if (!span.IsValid || !mappedSpan.IsValid)\n                    {\n                        goto default;\n                    }\n\n                    string path, basePath;\n                    if (mappedSpan.HasMappedPath)\n                    {\n                        path = mappedSpan.Path;\n                        basePath = span.Path;\n                    }\n                    else\n                    {\n                        path = span.Path;\n                        basePath = null;\n                    }\n\n                    return string.Format(formatter, \"{0}{1}: {2}: {3}\",\n                                         FormatSourcePath(path, basePath, formatter),\n                                         FormatSourceSpan(mappedSpan.Span, formatter),\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n\n                default:\n                    return string.Format(formatter, \"{0}: {1}\",\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n            }\n        }\n\n        internal virtual string FormatSourcePath(string path, string basePath, IFormatProvider formatter)\n        {\n            // ignore base path\n            return path;\n        }\n\n        internal virtual string FormatSourceSpan(LinePositionSpan span, IFormatProvider formatter)\n        {\n            return string.Format(\"({0},{1})\", span.Start.Line + 1, span.Start.Character + 1);\n        }\n\n        internal string GetMessagePrefix(Diagnostic diagnostic, CultureInfo culture)\n        {\n            string prefix;\n            switch (diagnostic.Severity)\n            {\n                case DiagnosticSeverity.Hidden:\n                    prefix = CodeAnalysisResources.SeverityHidden;\n                    break;\n                case DiagnosticSeverity.Info:\n                    prefix = CodeAnalysisResources.SeverityInfo;\n                    break;\n                case DiagnosticSeverity.Warning:\n                    prefix = CodeAnalysisResources.SeverityWarning;\n                    break;\n                case DiagnosticSeverity.Error:\n                    prefix = CodeAnalysisResources.SeverityError;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(diagnostic.Severity);\n            }\n\n            return string.Format(culture, \"{0} {1}\",\n                prefix,\n                diagnostic.Id);\n        }\n\n        internal static readonly DiagnosticFormatter Instance = new DiagnosticFormatter();\n    }\n}"
  },
  {
    "Start": 3433,
    "Length": 34,
    "SourcePath": "..\\..\\TestProjects\\Projects\\Portable11\\Portable\\Diagnostic\\DiagnosticFormatter.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Globalization;\nusing Microsoft.CodeAnalysis.Text;\nusing Roslyn.Utilities;\n\nnamespace Microsoft.CodeAnalysis\n{\n    /// <summary>\n    /// Formats <see cref=\"Diagnostic\"/> messages.\n    /// </summary>\n    public class DiagnosticFormatter\n    {\n        /// <summary>\n        /// Formats the <see cref=\"Diagnostic\"/> message using the optional <see cref=\"IFormatProvider\"/>.\n        /// </summary>\n        /// <param name=\"diagnostic\">The diagnostic.</param>\n        /// <param name=\"formatter\">The formatter; or null to use the default formatter.</param>\n        /// <returns>The formatted message.</returns>\n        public virtual string Format(Diagnostic diagnostic, IFormatProvider formatter = null)\n        {\n            if (diagnostic == null)\n            {\n                throw new ArgumentNullException(\"diagnostic\");\n            }\n\n            var culture = formatter as CultureInfo;\n\n            switch (diagnostic.Location.Kind)\n            {\n                case LocationKind.SourceFile:\n                case LocationKind.XmlFile:\n                case LocationKind.ExternalFile: \n                    var span = diagnostic.Location.GetLineSpan();\n                    var mappedSpan = diagnostic.Location.GetMappedLineSpan();\n                    if (!span.IsValid || !mappedSpan.IsValid)\n                    {\n                        goto default;\n                    }\n\n                    string path, basePath;\n                    if (mappedSpan.HasMappedPath)\n                    {\n                        path = mappedSpan.Path;\n                        basePath = span.Path;\n                    }\n                    else\n                    {\n                        path = span.Path;\n                        basePath = null;\n                    }\n\n                    return string.Format(formatter, \"{0}{1}: {2}: {3}\",\n                                         FormatSourcePath(path, basePath, formatter),\n                                         FormatSourceSpan(mappedSpan.Span, formatter),\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n\n                default:\n                    return string.Format(formatter, \"{0}: {1}\",\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n            }\n        }\n\n        internal virtual string FormatSourcePath(string path, string basePath, IFormatProvider formatter)\n        {\n            // ignore base path\n            return path;\n        }\n\n        internal virtual string FormatSourceSpan(LinePositionSpan span, IFormatProvider formatter)\n        {\n            return string.Format(\"({0},{1})\", span.Start.Line + 1, span.Start.Character + 1);\n        }\n\n        internal string GetMessagePrefix(Diagnostic diagnostic, CultureInfo culture)\n        {\n            string prefix;\n            switch (diagnostic.Severity)\n            {\n                case DiagnosticSeverity.Hidden:\n                    prefix = CodeAnalysisResources.SeverityHidden;\n                    break;\n                case DiagnosticSeverity.Info:\n                    prefix = CodeAnalysisResources.SeverityInfo;\n                    break;\n                case DiagnosticSeverity.Warning:\n                    prefix = CodeAnalysisResources.SeverityWarning;\n                    break;\n                case DiagnosticSeverity.Error:\n                    prefix = CodeAnalysisResources.SeverityError;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(diagnostic.Severity);\n            }\n\n            return string.Format(culture, \"{0} {1}\",\n                prefix,\n                diagnostic.Id);\n        }\n\n        internal static readonly DiagnosticFormatter Instance = new DiagnosticFormatter();\n    }\n}"
  },
  {
    "Start": 3574,
    "Length": 37,
    "SourcePath": "..\\..\\TestProjects\\Projects\\Portable11\\Portable\\Diagnostic\\DiagnosticFormatter.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Globalization;\nusing Microsoft.CodeAnalysis.Text;\nusing Roslyn.Utilities;\n\nnamespace Microsoft.CodeAnalysis\n{\n    /// <summary>\n    /// Formats <see cref=\"Diagnostic\"/> messages.\n    /// </summary>\n    public class DiagnosticFormatter\n    {\n        /// <summary>\n        /// Formats the <see cref=\"Diagnostic\"/> message using the optional <see cref=\"IFormatProvider\"/>.\n        /// </summary>\n        /// <param name=\"diagnostic\">The diagnostic.</param>\n        /// <param name=\"formatter\">The formatter; or null to use the default formatter.</param>\n        /// <returns>The formatted message.</returns>\n        public virtual string Format(Diagnostic diagnostic, IFormatProvider formatter = null)\n        {\n            if (diagnostic == null)\n            {\n                throw new ArgumentNullException(\"diagnostic\");\n            }\n\n            var culture = formatter as CultureInfo;\n\n            switch (diagnostic.Location.Kind)\n            {\n                case LocationKind.SourceFile:\n                case LocationKind.XmlFile:\n                case LocationKind.ExternalFile: \n                    var span = diagnostic.Location.GetLineSpan();\n                    var mappedSpan = diagnostic.Location.GetMappedLineSpan();\n                    if (!span.IsValid || !mappedSpan.IsValid)\n                    {\n                        goto default;\n                    }\n\n                    string path, basePath;\n                    if (mappedSpan.HasMappedPath)\n                    {\n                        path = mappedSpan.Path;\n                        basePath = span.Path;\n                    }\n                    else\n                    {\n                        path = span.Path;\n                        basePath = null;\n                    }\n\n                    return string.Format(formatter, \"{0}{1}: {2}: {3}\",\n                                         FormatSourcePath(path, basePath, formatter),\n                                         FormatSourceSpan(mappedSpan.Span, formatter),\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n\n                default:\n                    return string.Format(formatter, \"{0}: {1}\",\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n            }\n        }\n\n        internal virtual string FormatSourcePath(string path, string basePath, IFormatProvider formatter)\n        {\n            // ignore base path\n            return path;\n        }\n\n        internal virtual string FormatSourceSpan(LinePositionSpan span, IFormatProvider formatter)\n        {\n            return string.Format(\"({0},{1})\", span.Start.Line + 1, span.Start.Character + 1);\n        }\n\n        internal string GetMessagePrefix(Diagnostic diagnostic, CultureInfo culture)\n        {\n            string prefix;\n            switch (diagnostic.Severity)\n            {\n                case DiagnosticSeverity.Hidden:\n                    prefix = CodeAnalysisResources.SeverityHidden;\n                    break;\n                case DiagnosticSeverity.Info:\n                    prefix = CodeAnalysisResources.SeverityInfo;\n                    break;\n                case DiagnosticSeverity.Warning:\n                    prefix = CodeAnalysisResources.SeverityWarning;\n                    break;\n                case DiagnosticSeverity.Error:\n                    prefix = CodeAnalysisResources.SeverityError;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(diagnostic.Severity);\n            }\n\n            return string.Format(culture, \"{0} {1}\",\n                prefix,\n                diagnostic.Id);\n        }\n\n        internal static readonly DiagnosticFormatter Instance = new DiagnosticFormatter();\n    }\n}"
  },
  {
    "Start": 3716,
    "Length": 35,
    "SourcePath": "..\\..\\TestProjects\\Projects\\Portable11\\Portable\\Diagnostic\\DiagnosticFormatter.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Globalization;\nusing Microsoft.CodeAnalysis.Text;\nusing Roslyn.Utilities;\n\nnamespace Microsoft.CodeAnalysis\n{\n    /// <summary>\n    /// Formats <see cref=\"Diagnostic\"/> messages.\n    /// </summary>\n    public class DiagnosticFormatter\n    {\n        /// <summary>\n        /// Formats the <see cref=\"Diagnostic\"/> message using the optional <see cref=\"IFormatProvider\"/>.\n        /// </summary>\n        /// <param name=\"diagnostic\">The diagnostic.</param>\n        /// <param name=\"formatter\">The formatter; or null to use the default formatter.</param>\n        /// <returns>The formatted message.</returns>\n        public virtual string Format(Diagnostic diagnostic, IFormatProvider formatter = null)\n        {\n            if (diagnostic == null)\n            {\n                throw new ArgumentNullException(\"diagnostic\");\n            }\n\n            var culture = formatter as CultureInfo;\n\n            switch (diagnostic.Location.Kind)\n            {\n                case LocationKind.SourceFile:\n                case LocationKind.XmlFile:\n                case LocationKind.ExternalFile: \n                    var span = diagnostic.Location.GetLineSpan();\n                    var mappedSpan = diagnostic.Location.GetMappedLineSpan();\n                    if (!span.IsValid || !mappedSpan.IsValid)\n                    {\n                        goto default;\n                    }\n\n                    string path, basePath;\n                    if (mappedSpan.HasMappedPath)\n                    {\n                        path = mappedSpan.Path;\n                        basePath = span.Path;\n                    }\n                    else\n                    {\n                        path = span.Path;\n                        basePath = null;\n                    }\n\n                    return string.Format(formatter, \"{0}{1}: {2}: {3}\",\n                                         FormatSourcePath(path, basePath, formatter),\n                                         FormatSourceSpan(mappedSpan.Span, formatter),\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n\n                default:\n                    return string.Format(formatter, \"{0}: {1}\",\n                                         GetMessagePrefix(diagnostic, culture),\n                                         diagnostic.GetMessage(culture));\n            }\n        }\n\n        internal virtual string FormatSourcePath(string path, string basePath, IFormatProvider formatter)\n        {\n            // ignore base path\n            return path;\n        }\n\n        internal virtual string FormatSourceSpan(LinePositionSpan span, IFormatProvider formatter)\n        {\n            return string.Format(\"({0},{1})\", span.Start.Line + 1, span.Start.Character + 1);\n        }\n\n        internal string GetMessagePrefix(Diagnostic diagnostic, CultureInfo culture)\n        {\n            string prefix;\n            switch (diagnostic.Severity)\n            {\n                case DiagnosticSeverity.Hidden:\n                    prefix = CodeAnalysisResources.SeverityHidden;\n                    break;\n                case DiagnosticSeverity.Info:\n                    prefix = CodeAnalysisResources.SeverityInfo;\n                    break;\n                case DiagnosticSeverity.Warning:\n                    prefix = CodeAnalysisResources.SeverityWarning;\n                    break;\n                case DiagnosticSeverity.Error:\n                    prefix = CodeAnalysisResources.SeverityError;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(diagnostic.Severity);\n            }\n\n            return string.Format(culture, \"{0} {1}\",\n                prefix,\n                diagnostic.Id);\n        }\n\n        internal static readonly DiagnosticFormatter Instance = new DiagnosticFormatter();\n    }\n}"
  }
]