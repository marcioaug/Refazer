[
  {
    "Text": "new CommitFailureHandler()",
    "Start": 914,
    "Length": 26,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Infrastructure\n{\n    using System.Data.Common;\n    using System.Data.Entity.Core.EntityClient;\n    using System.Data.Entity.Infrastructure.Interception;\n    using System.Data.Entity.Resources;\n    using System.Data.Entity.TestDoubles;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Moq;\n    using Moq.Protected;\n    using Xunit;\n    using MockHelper = System.Data.Entity.Core.Objects.MockHelper;\n\n    public class CommitFailureHandlerTests\n    {\n        public class Initialize : TestBase\n        {\n            [Fact]\n            public void Initializes_with_ObjectContext()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.Same(context, handler.ObjectContext);\n                    Assert.Same(context.InterceptionContext.DbContexts.FirstOrDefault(), handler.DbContext);\n                    Assert.Same(((EntityConnection)context.Connection).StoreConnection, handler.Connection);\n                    Assert.Same(((EntityConnection)context.Connection).StoreConnection, handler.Connection);\n                    Assert.IsType<TransactionContext>(handler.TransactionContext);\n                }\n            }\n\n            [Fact]\n            public void Initializes_with_DbContext()\n            {\n                var context = new DbContext(\"c\");\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context, context.Database.Connection);\n\n                    Assert.Null(handler.ObjectContext);\n                    Assert.Same(context, handler.DbContext);\n                    Assert.Same(context.Database.Connection, handler.Connection);\n                    Assert.IsType<TransactionContext>(handler.TransactionContext);\n                }\n            }\n\n            [Fact]\n            public void Throws_for_null_parameters()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    Assert.Equal(\n                        \"connection\",\n                        Assert.Throws<ArgumentNullException>(() => handler.Initialize(new DbContext(\"c\"), null)).ParamName);\n                    Assert.Equal(\n                        \"context\",\n                        Assert.Throws<ArgumentNullException>(() => handler.Initialize(null, new Mock<DbConnection>().Object)).ParamName);\n                    Assert.Equal(\n                        \"context\",\n                        Assert.Throws<ArgumentNullException>(() => handler.Initialize(null)).ParamName);\n                }\n            }\n\n            [Fact]\n            public void Throws_if_already_initialized_with_ObjectContext()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(context)).Message);\n\n                    var dbContext = new DbContext(\"c\");\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(dbContext, dbContext.Database.Connection)).Message);\n                }\n            }\n\n            [Fact]\n            public void Throws_if_already_initialized_with_DbContext()\n            {\n                var dbContext = new DbContext(\"c\");\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(dbContext, dbContext.Database.Connection);\n\n                    var context = MockHelper.CreateMockObjectContext<object>();\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(context)).Message);\n\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(dbContext, dbContext.Database.Connection)).Message);\n                }\n            }\n        }\n\n        public class Dispose : TestBase\n        {\n            [Fact]\n            public void Removes_interceptor()\n            {\n                var mockConnection = new Mock<DbConnection>().Object;\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                using (handlerMock.Object)\n                {\n                    DbInterception.Dispatch.Connection.Close(mockConnection, new DbInterceptionContext());\n                    handlerMock.Verify(m => m.Closed(It.IsAny<DbConnection>(), It.IsAny<DbConnectionInterceptionContext>()), Times.Once());\n\n                    handlerMock.Object.Dispose();\n\n                    DbInterception.Dispatch.Connection.Close(mockConnection, new DbInterceptionContext());\n                    handlerMock.Verify(m => m.Closed(It.IsAny<DbConnection>(), It.IsAny<DbConnectionInterceptionContext>()), Times.Once());\n                }\n            }\n\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    handler.Dispose();\n                    commitFailureHandlerMock.Protected().Verify(\"Dispose\", Times.Once(), true);\n                }\n            }\n\n            [Fact]\n            public void Can_be_invoked_twice_without_throwing()\n            {\n                var handler = new CommitFailureHandler();\n\n                handler.Dispose();\n                handler.Dispose();\n            }\n        }\n\n        public class MatchesParentContext : TestBase\n        {\n            [Fact]\n            public void Throws_for_null_parameters()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    Assert.Equal(\n                        \"connection\",\n                        Assert.Throws<ArgumentNullException>(() => handler.MatchesParentContext(null, new DbInterceptionContext()))\n                            .ParamName);\n                    Assert.Equal(\n                        \"interceptionContext\",\n                        Assert.Throws<ArgumentNullException>(() => handler.MatchesParentContext(new Mock<DbConnection>().Object, null))\n                            .ParamName);\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_DbContext_if_nothing_matches()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(new DbContext(\"c\"), CreateMockConnection());\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_DbContext_if_different_context_same_connection()\n            {\n                var connection = CreateMockConnection();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(new DbContext(\"c\"), connection);\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            connection,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_DbContext_if_same_context()\n            {\n                var context = new DbContext(\"c\");\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context, CreateMockConnection());\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(context)));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_DbContext_if_no_context_same_connection()\n            {\n                var connection = CreateMockConnection();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(new DbContext(\"c\"), connection);\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            connection,\n                            new DbInterceptionContext()));\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_ObjectContext_if_nothing_matches()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(MockHelper.CreateMockObjectContext<object>());\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_ObjectContext_if_different_context_same_connection()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            ((EntityConnection)context.Connection).StoreConnection,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_ObjectContext_if_same_ObjectContext()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(context)\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_ObjectContext_if_no_context_same_connection()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            ((EntityConnection)context.Connection).StoreConnection,\n                            new DbInterceptionContext()));\n                }\n            }\n        }\n\n        public class PruneTransactionHistory : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                handlerMock.Protected().Setup(\"PruneTransactionHistory\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>()).Callback(() => { });\n                using (var handler = handlerMock.Object)\n                {\n                    handler.PruneTransactionHistory();\n                    handlerMock.Protected().Verify(\"PruneTransactionHistory\", Times.Once(), true, true);\n                }\n            }\n        }\n\n#if !NET40\n        public class PruneTransactionHistoryAsync : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                handlerMock.Protected().Setup<Task>(\"PruneTransactionHistoryAsync\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>(), ItExpr.IsAny<CancellationToken>())\n                    .Returns(() => Task.FromResult(true));\n                using (var handler = handlerMock.Object)\n                {\n                    handler.PruneTransactionHistoryAsync().Wait();\n                    handlerMock.Protected().Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, CancellationToken.None);\n                }\n            }\n\n            [Fact]\n            public void Delegates_to_protected_method_with_CancelationToken()\n            {\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                handlerMock.Protected().Setup<Task>(\"PruneTransactionHistoryAsync\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>(), ItExpr.IsAny<CancellationToken>())\n                    .Returns(() => Task.FromResult(true));\n                using (var handler = handlerMock.Object)\n                {\n                    var token = new CancellationToken();\n                    handler.PruneTransactionHistoryAsync(token).Wait();\n                    handlerMock.Protected().Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, token);\n                }\n            }\n        }\n#endif\n\n        public class ClearTransactionHistory : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    handler.ClearTransactionHistory();\n                    commitFailureHandlerMock.Protected().Verify(\"PruneTransactionHistory\", Times.Once(), true, true);\n                }\n            }\n        }\n\n#if !NET40\n        public class ClearTransactionHistoryAsync : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    handler.ClearTransactionHistoryAsync().Wait();\n                    commitFailureHandlerMock.Protected()\n                        .Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, CancellationToken.None);\n                }\n            }\n\n            [Fact]\n            public void Delegates_to_protected_method_with_CancelationToken()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    var token = new CancellationToken();\n                    handler.ClearTransactionHistoryAsync(token).Wait();\n                    commitFailureHandlerMock.Protected().Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, token);\n                }\n            }\n        }\n#endif\n\n        public class BeganTransaction\n        {\n            [Fact]\n            public void BeganTransaction_does_not_fail_if_exception_thrown_such_that_there_is_no_transaction()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                var handler = new CommitFailureHandler();\n                handler.Initialize(context);\n\n                var interceptionContext = new BeginTransactionInterceptionContext().WithObjectContext(context);\n\n                Assert.DoesNotThrow(() => handler.BeganTransaction(new Mock<DbConnection>().Object, interceptionContext));\n            }\n        }\n\n        private static DbConnection CreateMockConnection()\n        {\n            var connectionMock = new Mock<DbConnection>();\n            connectionMock.Protected()\n                .Setup<DbProviderFactory>(\"DbProviderFactory\")\n                .Returns(GenericProviderFactory<DbProviderFactory>.Instance);\n\n            return connectionMock.Object;\n        }\n\n        private static Mock<CommitFailureHandler> CreateCommitFailureHandlerMock()\n        {\n            Func<DbConnection, TransactionContext> transactionContextFactory =\n                c =>\n                {\n                    var transactionContextMock = new Mock<TransactionContext>(c) { CallBase = true };\n                    var transactionRowSet = new InMemoryDbSet<TransactionRow>();\n                    transactionContextMock.Setup(m => m.Transactions).Returns(transactionRowSet);\n                    return transactionContextMock.Object;\n                };\n            var handlerMock = new Mock<CommitFailureHandler>(transactionContextFactory) { CallBase = true };\n            handlerMock.Protected().Setup(\"PruneTransactionHistory\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>()).Callback(() => { });\n#if !NET40\n            handlerMock.Protected()\n                .Setup<Task>(\"PruneTransactionHistoryAsync\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>(), ItExpr.IsAny<CancellationToken>())\n                .Returns(() => Task.FromResult(true));\n#endif\n            return handlerMock;\n        }\n    }\n}",
      "Start": 0,
      "Length": 18936,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\UnitTests\\UnitTests\\Infrastructure\\Transactions\\CommitFailureHandlerTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\UnitTests\\UnitTests\\Infrastructure\\Transactions\\CommitFailureHandlerTests.cs"
  },
  {
    "Text": "new CommitFailureHandler()",
    "Start": 1692,
    "Length": 26,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Infrastructure\n{\n    using System.Data.Common;\n    using System.Data.Entity.Core.EntityClient;\n    using System.Data.Entity.Infrastructure.Interception;\n    using System.Data.Entity.Resources;\n    using System.Data.Entity.TestDoubles;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Moq;\n    using Moq.Protected;\n    using Xunit;\n    using MockHelper = System.Data.Entity.Core.Objects.MockHelper;\n\n    public class CommitFailureHandlerTests\n    {\n        public class Initialize : TestBase\n        {\n            [Fact]\n            public void Initializes_with_ObjectContext()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.Same(context, handler.ObjectContext);\n                    Assert.Same(context.InterceptionContext.DbContexts.FirstOrDefault(), handler.DbContext);\n                    Assert.Same(((EntityConnection)context.Connection).StoreConnection, handler.Connection);\n                    Assert.Same(((EntityConnection)context.Connection).StoreConnection, handler.Connection);\n                    Assert.IsType<TransactionContext>(handler.TransactionContext);\n                }\n            }\n\n            [Fact]\n            public void Initializes_with_DbContext()\n            {\n                var context = new DbContext(\"c\");\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context, context.Database.Connection);\n\n                    Assert.Null(handler.ObjectContext);\n                    Assert.Same(context, handler.DbContext);\n                    Assert.Same(context.Database.Connection, handler.Connection);\n                    Assert.IsType<TransactionContext>(handler.TransactionContext);\n                }\n            }\n\n            [Fact]\n            public void Throws_for_null_parameters()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    Assert.Equal(\n                        \"connection\",\n                        Assert.Throws<ArgumentNullException>(() => handler.Initialize(new DbContext(\"c\"), null)).ParamName);\n                    Assert.Equal(\n                        \"context\",\n                        Assert.Throws<ArgumentNullException>(() => handler.Initialize(null, new Mock<DbConnection>().Object)).ParamName);\n                    Assert.Equal(\n                        \"context\",\n                        Assert.Throws<ArgumentNullException>(() => handler.Initialize(null)).ParamName);\n                }\n            }\n\n            [Fact]\n            public void Throws_if_already_initialized_with_ObjectContext()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(context)).Message);\n\n                    var dbContext = new DbContext(\"c\");\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(dbContext, dbContext.Database.Connection)).Message);\n                }\n            }\n\n            [Fact]\n            public void Throws_if_already_initialized_with_DbContext()\n            {\n                var dbContext = new DbContext(\"c\");\n\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(dbContext, dbContext.Database.Connection);\n\n                    var context = MockHelper.CreateMockObjectContext<object>();\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(context)).Message);\n\n                    Assert.Equal(\n                        Strings.TransactionHandler_AlreadyInitialized,\n                        Assert.Throws<InvalidOperationException>(() => handler.Initialize(dbContext, dbContext.Database.Connection)).Message);\n                }\n            }\n        }\n\n        public class Dispose : TestBase\n        {\n            [Fact]\n            public void Removes_interceptor()\n            {\n                var mockConnection = new Mock<DbConnection>().Object;\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                using (handlerMock.Object)\n                {\n                    DbInterception.Dispatch.Connection.Close(mockConnection, new DbInterceptionContext());\n                    handlerMock.Verify(m => m.Closed(It.IsAny<DbConnection>(), It.IsAny<DbConnectionInterceptionContext>()), Times.Once());\n\n                    handlerMock.Object.Dispose();\n\n                    DbInterception.Dispatch.Connection.Close(mockConnection, new DbInterceptionContext());\n                    handlerMock.Verify(m => m.Closed(It.IsAny<DbConnection>(), It.IsAny<DbConnectionInterceptionContext>()), Times.Once());\n                }\n            }\n\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    handler.Dispose();\n                    commitFailureHandlerMock.Protected().Verify(\"Dispose\", Times.Once(), true);\n                }\n            }\n\n            [Fact]\n            public void Can_be_invoked_twice_without_throwing()\n            {\n                var handler = new CommitFailureHandler();\n\n                handler.Dispose();\n                handler.Dispose();\n            }\n        }\n\n        public class MatchesParentContext : TestBase\n        {\n            [Fact]\n            public void Throws_for_null_parameters()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    Assert.Equal(\n                        \"connection\",\n                        Assert.Throws<ArgumentNullException>(() => handler.MatchesParentContext(null, new DbInterceptionContext()))\n                            .ParamName);\n                    Assert.Equal(\n                        \"interceptionContext\",\n                        Assert.Throws<ArgumentNullException>(() => handler.MatchesParentContext(new Mock<DbConnection>().Object, null))\n                            .ParamName);\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_DbContext_if_nothing_matches()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(new DbContext(\"c\"), CreateMockConnection());\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_DbContext_if_different_context_same_connection()\n            {\n                var connection = CreateMockConnection();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(new DbContext(\"c\"), connection);\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            connection,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_DbContext_if_same_context()\n            {\n                var context = new DbContext(\"c\");\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context, CreateMockConnection());\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(context)));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_DbContext_if_no_context_same_connection()\n            {\n                var connection = CreateMockConnection();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(new DbContext(\"c\"), connection);\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            connection,\n                            new DbInterceptionContext()));\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_ObjectContext_if_nothing_matches()\n            {\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(MockHelper.CreateMockObjectContext<object>());\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_false_with_ObjectContext_if_different_context_same_connection()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.False(\n                        handler.MatchesParentContext(\n                            ((EntityConnection)context.Connection).StoreConnection,\n                            new DbInterceptionContext().WithObjectContext(MockHelper.CreateMockObjectContext<object>())\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_ObjectContext_if_same_ObjectContext()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            new Mock<DbConnection>().Object,\n                            new DbInterceptionContext().WithObjectContext(context)\n                                .WithDbContext(new DbContext(\"c\"))));\n                }\n            }\n\n            [Fact]\n            public void Returns_true_with_ObjectContext_if_no_context_same_connection()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                using (var handler = new CommitFailureHandler())\n                {\n                    handler.Initialize(context);\n\n                    Assert.True(\n                        handler.MatchesParentContext(\n                            ((EntityConnection)context.Connection).StoreConnection,\n                            new DbInterceptionContext()));\n                }\n            }\n        }\n\n        public class PruneTransactionHistory : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                handlerMock.Protected().Setup(\"PruneTransactionHistory\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>()).Callback(() => { });\n                using (var handler = handlerMock.Object)\n                {\n                    handler.PruneTransactionHistory();\n                    handlerMock.Protected().Verify(\"PruneTransactionHistory\", Times.Once(), true, true);\n                }\n            }\n        }\n\n#if !NET40\n        public class PruneTransactionHistoryAsync : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                handlerMock.Protected().Setup<Task>(\"PruneTransactionHistoryAsync\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>(), ItExpr.IsAny<CancellationToken>())\n                    .Returns(() => Task.FromResult(true));\n                using (var handler = handlerMock.Object)\n                {\n                    handler.PruneTransactionHistoryAsync().Wait();\n                    handlerMock.Protected().Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, CancellationToken.None);\n                }\n            }\n\n            [Fact]\n            public void Delegates_to_protected_method_with_CancelationToken()\n            {\n                var handlerMock = new Mock<CommitFailureHandler> { CallBase = true };\n                handlerMock.Protected().Setup<Task>(\"PruneTransactionHistoryAsync\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>(), ItExpr.IsAny<CancellationToken>())\n                    .Returns(() => Task.FromResult(true));\n                using (var handler = handlerMock.Object)\n                {\n                    var token = new CancellationToken();\n                    handler.PruneTransactionHistoryAsync(token).Wait();\n                    handlerMock.Protected().Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, token);\n                }\n            }\n        }\n#endif\n\n        public class ClearTransactionHistory : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    handler.ClearTransactionHistory();\n                    commitFailureHandlerMock.Protected().Verify(\"PruneTransactionHistory\", Times.Once(), true, true);\n                }\n            }\n        }\n\n#if !NET40\n        public class ClearTransactionHistoryAsync : TestBase\n        {\n            [Fact]\n            public void Delegates_to_protected_method()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    handler.ClearTransactionHistoryAsync().Wait();\n                    commitFailureHandlerMock.Protected()\n                        .Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, CancellationToken.None);\n                }\n            }\n\n            [Fact]\n            public void Delegates_to_protected_method_with_CancelationToken()\n            {\n                var context = MockHelper.CreateMockObjectContext<int>();\n                var commitFailureHandlerMock = CreateCommitFailureHandlerMock();\n                commitFailureHandlerMock.Object.Initialize(context);\n                using (var handler = commitFailureHandlerMock.Object)\n                {\n                    var token = new CancellationToken();\n                    handler.ClearTransactionHistoryAsync(token).Wait();\n                    commitFailureHandlerMock.Protected().Verify<Task>(\"PruneTransactionHistoryAsync\", Times.Once(), true, true, token);\n                }\n            }\n        }\n#endif\n\n        public class BeganTransaction\n        {\n            [Fact]\n            public void BeganTransaction_does_not_fail_if_exception_thrown_such_that_there_is_no_transaction()\n            {\n                var context = MockHelper.CreateMockObjectContext<object>();\n                var handler = new CommitFailureHandler();\n                handler.Initialize(context);\n\n                var interceptionContext = new BeginTransactionInterceptionContext().WithObjectContext(context);\n\n                Assert.DoesNotThrow(() => handler.BeganTransaction(new Mock<DbConnection>().Object, interceptionContext));\n            }\n        }\n\n        private static DbConnection CreateMockConnection()\n        {\n            var connectionMock = new Mock<DbConnection>();\n            connectionMock.Protected()\n                .Setup<DbProviderFactory>(\"DbProviderFactory\")\n                .Returns(GenericProviderFactory<DbProviderFactory>.Instance);\n\n            return connectionMock.Object;\n        }\n\n        private static Mock<CommitFailureHandler> CreateCommitFailureHandlerMock()\n        {\n            Func<DbConnection, TransactionContext> transactionContextFactory =\n                c =>\n                {\n                    var transactionContextMock = new Mock<TransactionContext>(c) { CallBase = true };\n                    var transactionRowSet = new InMemoryDbSet<TransactionRow>();\n                    transactionContextMock.Setup(m => m.Transactions).Returns(transactionRowSet);\n                    return transactionContextMock.Object;\n                };\n            var handlerMock = new Mock<CommitFailureHandler>(transactionContextFactory) { CallBase = true };\n            handlerMock.Protected().Setup(\"PruneTransactionHistory\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>()).Callback(() => { });\n#if !NET40\n            handlerMock.Protected()\n                .Setup<Task>(\"PruneTransactionHistoryAsync\", ItExpr.IsAny<bool>(), ItExpr.IsAny<bool>(), ItExpr.IsAny<CancellationToken>())\n                .Returns(() => Task.FromResult(true));\n#endif\n            return handlerMock;\n        }\n    }\n}",
      "Start": 0,
      "Length": 18936,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\UnitTests\\UnitTests\\Infrastructure\\Transactions\\CommitFailureHandlerTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\UnitTests\\UnitTests\\Infrastructure\\Transactions\\CommitFailureHandlerTests.cs"
  }
]