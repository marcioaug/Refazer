[
  {
    "Start": 3499,
    "Length": 44,
    "SourcePath": "..\\..\\TestProjects\\Projects\\Portable2\\Portable\\Utilities\\Contract.cs",
    "SourceCode": "// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Diagnostics;\nusing System.Reflection;\n\nnamespace Roslyn.Utilities\n{\n    internal static class Contract\n    {\n        // internal for testing\n        internal class ContractFailureException : Exception\n        {\n            public ContractFailureException() { }\n            public ContractFailureException(string message) : base(message) { }\n            public ContractFailureException(string message, Exception inner) : base(message, inner) { }\n        }\n\n        /// <summary>\n        /// Equivalent to Debug.Assert.  \n        ///\n        /// DevDiv 867813 covers removing this completely at a future date\n        /// </summary>\n        [Conditional(\"DEBUG\")]\n        [DebuggerHidden]\n        public static void Requires(bool condition, string message = null)\n        {\n            Assert(condition, message);\n        }\n\n        /// <summary>\n        /// Equivalent to Debug.Assert.  \n        ///\n        /// DevDiv 867813 covers removing this completely at a future date\n        /// </summary>\n        [Conditional(\"DEBUG\")]\n        [DebuggerHidden]\n        public static void Assert(bool condition, string message = null)\n        {\n            if (condition)\n            {\n                return;\n            }\n\n            if (string.IsNullOrEmpty(message))\n            {\n                Debug.Assert(condition);\n            }\n            else\n            {\n                Debug.Assert(condition, message);\n            }\n        }\n\n        /// <summary>\n        /// Equivalent to Debug.Assert.  \n        ///\n        /// DevDiv 867813 covers removing this completely at a future date\n        /// </summary>\n        [Conditional(\"DEBUG\")]\n        public static void Assume(bool condition, string message = null)\n        {\n            if (string.IsNullOrEmpty(message))\n            {\n                Debug.Assert(condition);\n            }\n            else\n            {\n                Debug.Assert(condition, message);\n            }\n        }\n\n        /// <summary>\n        /// Throws a non-accessible exception if the provided value is null.  This method executes in\n        /// all builds\n        /// </summary>\n        public static void ThrowIfNull<T>(T value, string message = null) where T : class\n        {\n            if (value == null)\n            {\n                message = message ?? \"Unexpected Null\";\n                Fail(message);\n            }\n        }\n\n        /// <summary>\n        /// Throws a non-accessible exception if the provided value is false.  This method executes\n        /// in all builds\n        /// </summary>\n        public static void ThrowIfFalse(bool condition, string message = null)\n        {\n            if (!condition)\n            {\n                message = message ?? \"Unexpected false\";\n                Fail(message);\n            }\n        }\n\n        /// <summary>\n        /// Throws a non-accessible exception if the provided value is true. This method executes in\n        /// all builds.\n        /// </summary>\n        public static void ThrowIfTrue(bool condition, string message = null)\n        {\n            if (condition)\n            {\n                message = message ?? \"Unexpected true\";\n                Fail(message);\n            }\n        }\n\n        [DebuggerHidden]\n        public static void Fail(string message = \"Unexpected\")\n        {\n            throw new ContractFailureException(message);\n        }\n\n        [DebuggerHidden]\n        public static T FailWithReturn<T>(string message = \"Unexpected\")\n        {\n            throw new ContractFailureException(message);\n        }\n\n        public static void InvalidEnumValue<T>(T value)\n        {\n            Fail(string.Format(\"Invalid Enumeration value {0}\", value));\n        }\n    }\n}\n"
  },
  {
    "Start": 3675,
    "Length": 44,
    "SourcePath": "..\\..\\TestProjects\\Projects\\Portable2\\Portable\\Utilities\\Contract.cs",
    "SourceCode": "// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Diagnostics;\nusing System.Reflection;\n\nnamespace Roslyn.Utilities\n{\n    internal static class Contract\n    {\n        // internal for testing\n        internal class ContractFailureException : Exception\n        {\n            public ContractFailureException() { }\n            public ContractFailureException(string message) : base(message) { }\n            public ContractFailureException(string message, Exception inner) : base(message, inner) { }\n        }\n\n        /// <summary>\n        /// Equivalent to Debug.Assert.  \n        ///\n        /// DevDiv 867813 covers removing this completely at a future date\n        /// </summary>\n        [Conditional(\"DEBUG\")]\n        [DebuggerHidden]\n        public static void Requires(bool condition, string message = null)\n        {\n            Assert(condition, message);\n        }\n\n        /// <summary>\n        /// Equivalent to Debug.Assert.  \n        ///\n        /// DevDiv 867813 covers removing this completely at a future date\n        /// </summary>\n        [Conditional(\"DEBUG\")]\n        [DebuggerHidden]\n        public static void Assert(bool condition, string message = null)\n        {\n            if (condition)\n            {\n                return;\n            }\n\n            if (string.IsNullOrEmpty(message))\n            {\n                Debug.Assert(condition);\n            }\n            else\n            {\n                Debug.Assert(condition, message);\n            }\n        }\n\n        /// <summary>\n        /// Equivalent to Debug.Assert.  \n        ///\n        /// DevDiv 867813 covers removing this completely at a future date\n        /// </summary>\n        [Conditional(\"DEBUG\")]\n        public static void Assume(bool condition, string message = null)\n        {\n            if (string.IsNullOrEmpty(message))\n            {\n                Debug.Assert(condition);\n            }\n            else\n            {\n                Debug.Assert(condition, message);\n            }\n        }\n\n        /// <summary>\n        /// Throws a non-accessible exception if the provided value is null.  This method executes in\n        /// all builds\n        /// </summary>\n        public static void ThrowIfNull<T>(T value, string message = null) where T : class\n        {\n            if (value == null)\n            {\n                message = message ?? \"Unexpected Null\";\n                Fail(message);\n            }\n        }\n\n        /// <summary>\n        /// Throws a non-accessible exception if the provided value is false.  This method executes\n        /// in all builds\n        /// </summary>\n        public static void ThrowIfFalse(bool condition, string message = null)\n        {\n            if (!condition)\n            {\n                message = message ?? \"Unexpected false\";\n                Fail(message);\n            }\n        }\n\n        /// <summary>\n        /// Throws a non-accessible exception if the provided value is true. This method executes in\n        /// all builds.\n        /// </summary>\n        public static void ThrowIfTrue(bool condition, string message = null)\n        {\n            if (condition)\n            {\n                message = message ?? \"Unexpected true\";\n                Fail(message);\n            }\n        }\n\n        [DebuggerHidden]\n        public static void Fail(string message = \"Unexpected\")\n        {\n            throw new ContractFailureException(message);\n        }\n\n        [DebuggerHidden]\n        public static T FailWithReturn<T>(string message = \"Unexpected\")\n        {\n            throw new ContractFailureException(message);\n        }\n\n        public static void InvalidEnumValue<T>(T value)\n        {\n            Fail(string.Format(\"Invalid Enumeration value {0}\", value));\n        }\n    }\n}\n"
  }
]