[
  {
    "Text": "public sealed override ImmutableArray<string> GetFixableDiagnosticIds()\n        {\n            return ImmutableArray.Create(DiagnosticIds.MissingDiagnosticAnalyzerAttributeRuleId);\n        }",
    "Start": 509,
    "Length": 189,
    "Parent": {
      "Text": "// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Collections.Immutable;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.CodeAnalysis.CodeFixes;\nusing Microsoft.CodeAnalysis.Editting;\n\nnamespace Microsoft.CodeAnalysis.Analyzers.MetaAnalyzers.CodeFixes\n{\n    public abstract class ApplyDiagnosticAnalyzerAttributeFix : CodeFixProvider\n    {\n        public sealed override ImmutableArray<string> GetFixableDiagnosticIds()\n        {\n            return ImmutableArray.Create(DiagnosticIds.MissingDiagnosticAnalyzerAttributeRuleId);\n        }\n\n        public sealed override async Task ComputeFixesAsync(CodeFixContext context)\n        {\n            var root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);\n            var token = root.FindToken(context.Span.Start);\n            if (!token.Span.IntersectsWith(context.Span))\n            {\n                return;\n            }\n\n            var generator = SyntaxGenerator.GetGenerator(context.Document);\n            var classDecl = generator.GetDeclaration(token.Parent);\n            if (classDecl == null)\n            {\n                return;\n            }\n\n            // Register fixes.\n\n            // 1) Apply C# DiagnosticAnalyzerAttribute.\n            var title = string.Format(CodeAnalysisDiagnosticsResources.ApplyDiagnosticAnalyzerAttribute_1, LanguageNames.CSharp);\n            AddFix(title, context, root, classDecl, generator, LanguageNames.CSharp);\n\n            // 2) Apply VB DiagnosticAnalyzerAttribute.\n            title = string.Format(CodeAnalysisDiagnosticsResources.ApplyDiagnosticAnalyzerAttribute_1, LanguageNames.VisualBasic);\n            AddFix(title, context, root, classDecl, generator, LanguageNames.VisualBasic);\n\n            // 3) Apply both C# and VB DiagnosticAnalyzerAttributes.\n            title = string.Format(CodeAnalysisDiagnosticsResources.ApplyDiagnosticAnalyzerAttribute_2, LanguageNames.CSharp, LanguageNames.VisualBasic);\n            AddFix(title, context, root, classDecl, generator, LanguageNames.CSharp, LanguageNames.VisualBasic);\n        }\n\n        protected abstract SyntaxNode ParseExpression(string expression);\n\n        private void AddFix(string codeFixTitle, CodeFixContext context, SyntaxNode root, SyntaxNode classDecl, SyntaxGenerator generator, params string[] languages)\n        {\n            var fix = new MyCodeAction(\n                codeFixTitle,\n                c => GetFix(context.Document, root, classDecl, generator, languages));\n            context.RegisterFix(fix, context.Diagnostics);\n        }\n\n        private Task<Document> GetFix(Document document, SyntaxNode root, SyntaxNode classDecl, SyntaxGenerator generator, params string[] languages)\n        {\n            SyntaxNode attribute;\n            switch (languages.Length)\n            {\n                case 0:\n                    attribute = generator.Attribute(DiagnosticAnalyzerCorrectnessAnalyzer.DiagnosticAnalyzerAttributeFullName);\n                    break;\n\n                default:\n                    var languageNamesFullName = typeof(LanguageNames).FullName;\n                    var arguments = new SyntaxNode[languages.Length];\n\n                    for (int i = 0; i < languages.Length; i++)\n                    {\n                        var language = languages[i] == LanguageNames.CSharp ? nameof(LanguageNames.CSharp) : nameof(LanguageNames.VisualBasic);\n                        var expressionToParse = languageNamesFullName + \".\" + language;\n                        var parsedExpression = ParseExpression(expressionToParse);\n                        arguments[i] = generator.AttributeArgument(parsedExpression);\n                    }\n\n                    attribute = generator.Attribute(DiagnosticAnalyzerCorrectnessAnalyzer.DiagnosticAnalyzerAttributeFullName, arguments);\n                    break;\n            }\n\n            var newClassDecl = generator.AddAttributes(classDecl, attribute);\n            var newRoot = root.ReplaceNode(classDecl, newClassDecl);\n            return Task.FromResult(document.WithSyntaxRoot(newRoot));\n        }\n\n        public sealed override FixAllProvider GetFixAllProvider()\n        {\n            return WellKnownFixAllProviders.BatchFixer;\n        }\n\n        private class MyCodeAction : DocumentChangeAction\n        {\n            public MyCodeAction(string title, Func<CancellationToken, Task<Document>> createChangedDocument)\n                : base(title, createChangedDocument)\n            {\n            }\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 4659,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\Diagnostics2\\Diagnostics\\CodeAnalysis\\Core\\MetaAnalyzers\\Fixers\\ApplyDiagnosticAnalyzerAttributeFix.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\Diagnostics2\\Diagnostics\\CodeAnalysis\\Core\\MetaAnalyzers\\Fixers\\ApplyDiagnosticAnalyzerAttributeFix.cs"
  },
  {
    "Text": "public sealed override ImmutableArray<string> GetFixableDiagnosticIds()\n        {\n            return ImmutableArray.Create(StaticTypeRulesDiagnosticAnalyzer.CA1052RuleId);\n        }",
    "Start": 835,
    "Length": 181,
    "Parent": {
      "Text": "// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System.Collections.Immutable;\nusing System.Composition;\nusing System.Threading.Tasks;\nusing Microsoft.CodeAnalysis.CodeActions;\nusing Microsoft.CodeAnalysis.CodeFixes;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Formatting;\nusing Microsoft.CodeAnalysis.FxCopAnalyzers;\nusing Microsoft.CodeAnalysis.FxCopAnalyzers.Design;\nusing Microsoft.CodeAnalysis.Shared.Extensions;\n\nnamespace Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Design\n{\n    [ExportCodeFixProvider(LanguageNames.CSharp, Name = StaticTypeRulesDiagnosticAnalyzer.RuleNameForExportAttribute), Shared]\n    public class CA1052CSharpCodeFixProvider : CodeFixProvider\n    {\n        public sealed override ImmutableArray<string> GetFixableDiagnosticIds()\n        {\n            return ImmutableArray.Create(StaticTypeRulesDiagnosticAnalyzer.CA1052RuleId);\n        }\n\n        public sealed override FixAllProvider GetFixAllProvider()\n        {\n            return WellKnownFixAllProviders.BatchFixer;\n        }\n\n        public sealed override async Task ComputeFixesAsync(CodeFixContext context)\n        {\n            var document = context.Document;\n            var span = context.Span;\n            var cancellationToken = context.CancellationToken;\n\n            cancellationToken.ThrowIfCancellationRequested();\n            var root = await document.GetSyntaxRootAsync(cancellationToken);\n            var classDeclaration = root.FindToken(span.Start).GetAncestor<ClassDeclarationSyntax>();\n            if (classDeclaration != null)\n            {\n                var staticKeyword = SyntaxFactory.Token(SyntaxKind.StaticKeyword).WithAdditionalAnnotations(Formatter.Annotation);\n                var newDeclaration = classDeclaration.AddModifiers(staticKeyword);\n                var newRoot = root.ReplaceNode(classDeclaration, newDeclaration);\n                context.RegisterFix(\n                    new MyCodeAction(string.Format(FxCopRulesResources.StaticHolderTypeIsNotStatic, classDeclaration.Identifier.Text), document.WithSyntaxRoot(newRoot)),\n                    context.Diagnostics);\n            }\n        }\n\n        private class MyCodeAction : CodeAction.DocumentChangeAction\n        {\n            public MyCodeAction(string title, Document newDocument) :\n                base(title, c => Task.FromResult(newDocument))\n            {\n            }\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 2525,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\Diagnostics2\\Diagnostics\\FxCop\\CSharp\\Design\\CodeFixes\\CA1052CSharpCodeFixProvider.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\Diagnostics2\\Diagnostics\\FxCop\\CSharp\\Design\\CodeFixes\\CA1052CSharpCodeFixProvider.cs"
  }
]