[
  {
    "Start": 4084,
    "Length": 46,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\NuGet.Client\\NuGet.Client\\AutoDetectSourceRepository.cs",
    "SourceCode": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace NuGet.Client\n{\n    /// <summary>\n    /// A SourceRepository class that will detect if the url points to a V3 or V2 \n    /// repository.\n    /// </summary>\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable\")]\n    public class AutoDetectSourceRepository : SourceRepository\n    {\n        PackageSource _source;\n\n        string _host;\n\n        // factory used to create V2 repo\n        IPackageRepositoryFactory _v2RepoFactory;\n\n        // Once the version of the repo is detected, this variable will \n        // be the real repo used.\n        SourceRepository _repo;\n\n        SemaphoreSlim _lock;\n\n        public AutoDetectSourceRepository(\n            PackageSource source, \n            string host,\n            IPackageRepositoryFactory repoFactory)\n        {\n            _source = source;\n            _host = host;\n            _v2RepoFactory = repoFactory;\n            _lock = new SemaphoreSlim(1);\n        }\n\n        private async Task DetectVersionWhenNeccessary(CancellationToken cancellationToken)\n        {\n            await _lock.WaitAsync();\n            try\n            {\n                if (_repo != null)\n                {\n                    return;\n                }\n\n                bool r = await IsV3Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new V3SourceRepository(_source, _host);\n                    return;\n                }\n\n                r = await IsV2Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new NuGet.Client.Interop.V2SourceRepository(\n                        _source, _v2RepoFactory.CreateRepository(_source.Url), _host);\n                    return;\n                }\n\n                throw new InvalidOperationException(\n                    String.Format(\"source {0} is not available\", _source.Url));\n            }\n            finally\n            {\n                _lock.Release();\n            }\n        }\n\n        private async Task<bool> IsV2Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return true;\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var result = await client.GetFile(url);\n                if (result == null)\n                {\n                    return false;\n                }\n\n                var raw = result.Value<string>(\"raw\");\n                if (raw != null && raw.IndexOf(\"Packages\", StringComparison.OrdinalIgnoreCase) != -1) \n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        private async Task<bool> IsV3Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return File.Exists(url.LocalPath);\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var v3index = await client.GetFile(url);\n                if (v3index == null)\n                {\n                    return false;\n                }\n\n                var status = v3index.Value<string>(\"version\");\n                if (status != null && status.StartsWith(\"3.0\"))\n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        public override PackageSource Source\n        {\n            get { return _source; }\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> Search(string searchTerm, SearchFilter filters, int skip, int take, CancellationToken cancellationToken)\n        {\n            await DetectVersionWhenNeccessary(cancellationToken);\n            return await _repo.Search(searchTerm, filters, skip, take, cancellationToken);\n        }\n\n        public override async Task<Newtonsoft.Json.Linq.JObject> GetPackageMetadata(string id, Versioning.NuGetVersion version)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadata(id, version);\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> GetPackageMetadataById(string packageId)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadataById(packageId);\n        }\n\n        public override async void RecordMetric(Resolution.PackageActionType actionType, PackageIdentity packageIdentity, PackageIdentity dependentPackage, bool isUpdate, Installation.InstallationTarget target)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            _repo.RecordMetric(actionType, packageIdentity, dependentPackage, isUpdate, target);\n        }\n    }\n}\n"
  },
  {
    "Start": 4390,
    "Length": 51,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\NuGet.Client\\NuGet.Client\\AutoDetectSourceRepository.cs",
    "SourceCode": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace NuGet.Client\n{\n    /// <summary>\n    /// A SourceRepository class that will detect if the url points to a V3 or V2 \n    /// repository.\n    /// </summary>\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable\")]\n    public class AutoDetectSourceRepository : SourceRepository\n    {\n        PackageSource _source;\n\n        string _host;\n\n        // factory used to create V2 repo\n        IPackageRepositoryFactory _v2RepoFactory;\n\n        // Once the version of the repo is detected, this variable will \n        // be the real repo used.\n        SourceRepository _repo;\n\n        SemaphoreSlim _lock;\n\n        public AutoDetectSourceRepository(\n            PackageSource source, \n            string host,\n            IPackageRepositoryFactory repoFactory)\n        {\n            _source = source;\n            _host = host;\n            _v2RepoFactory = repoFactory;\n            _lock = new SemaphoreSlim(1);\n        }\n\n        private async Task DetectVersionWhenNeccessary(CancellationToken cancellationToken)\n        {\n            await _lock.WaitAsync();\n            try\n            {\n                if (_repo != null)\n                {\n                    return;\n                }\n\n                bool r = await IsV3Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new V3SourceRepository(_source, _host);\n                    return;\n                }\n\n                r = await IsV2Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new NuGet.Client.Interop.V2SourceRepository(\n                        _source, _v2RepoFactory.CreateRepository(_source.Url), _host);\n                    return;\n                }\n\n                throw new InvalidOperationException(\n                    String.Format(\"source {0} is not available\", _source.Url));\n            }\n            finally\n            {\n                _lock.Release();\n            }\n        }\n\n        private async Task<bool> IsV2Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return true;\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var result = await client.GetFile(url);\n                if (result == null)\n                {\n                    return false;\n                }\n\n                var raw = result.Value<string>(\"raw\");\n                if (raw != null && raw.IndexOf(\"Packages\", StringComparison.OrdinalIgnoreCase) != -1) \n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        private async Task<bool> IsV3Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return File.Exists(url.LocalPath);\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var v3index = await client.GetFile(url);\n                if (v3index == null)\n                {\n                    return false;\n                }\n\n                var status = v3index.Value<string>(\"version\");\n                if (status != null && status.StartsWith(\"3.0\"))\n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        public override PackageSource Source\n        {\n            get { return _source; }\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> Search(string searchTerm, SearchFilter filters, int skip, int take, CancellationToken cancellationToken)\n        {\n            await DetectVersionWhenNeccessary(cancellationToken);\n            return await _repo.Search(searchTerm, filters, skip, take, cancellationToken);\n        }\n\n        public override async Task<Newtonsoft.Json.Linq.JObject> GetPackageMetadata(string id, Versioning.NuGetVersion version)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadata(id, version);\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> GetPackageMetadataById(string packageId)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadataById(packageId);\n        }\n\n        public override async void RecordMetric(Resolution.PackageActionType actionType, PackageIdentity packageIdentity, PackageIdentity dependentPackage, bool isUpdate, Installation.InstallationTarget target)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            _repo.RecordMetric(actionType, packageIdentity, dependentPackage, isUpdate, target);\n        }\n    }\n}\n"
  },
  {
    "Start": 4665,
    "Length": 51,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\NuGet.Client\\NuGet.Client\\AutoDetectSourceRepository.cs",
    "SourceCode": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace NuGet.Client\n{\n    /// <summary>\n    /// A SourceRepository class that will detect if the url points to a V3 or V2 \n    /// repository.\n    /// </summary>\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable\")]\n    public class AutoDetectSourceRepository : SourceRepository\n    {\n        PackageSource _source;\n\n        string _host;\n\n        // factory used to create V2 repo\n        IPackageRepositoryFactory _v2RepoFactory;\n\n        // Once the version of the repo is detected, this variable will \n        // be the real repo used.\n        SourceRepository _repo;\n\n        SemaphoreSlim _lock;\n\n        public AutoDetectSourceRepository(\n            PackageSource source, \n            string host,\n            IPackageRepositoryFactory repoFactory)\n        {\n            _source = source;\n            _host = host;\n            _v2RepoFactory = repoFactory;\n            _lock = new SemaphoreSlim(1);\n        }\n\n        private async Task DetectVersionWhenNeccessary(CancellationToken cancellationToken)\n        {\n            await _lock.WaitAsync();\n            try\n            {\n                if (_repo != null)\n                {\n                    return;\n                }\n\n                bool r = await IsV3Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new V3SourceRepository(_source, _host);\n                    return;\n                }\n\n                r = await IsV2Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new NuGet.Client.Interop.V2SourceRepository(\n                        _source, _v2RepoFactory.CreateRepository(_source.Url), _host);\n                    return;\n                }\n\n                throw new InvalidOperationException(\n                    String.Format(\"source {0} is not available\", _source.Url));\n            }\n            finally\n            {\n                _lock.Release();\n            }\n        }\n\n        private async Task<bool> IsV2Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return true;\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var result = await client.GetFile(url);\n                if (result == null)\n                {\n                    return false;\n                }\n\n                var raw = result.Value<string>(\"raw\");\n                if (raw != null && raw.IndexOf(\"Packages\", StringComparison.OrdinalIgnoreCase) != -1) \n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        private async Task<bool> IsV3Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return File.Exists(url.LocalPath);\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var v3index = await client.GetFile(url);\n                if (v3index == null)\n                {\n                    return false;\n                }\n\n                var status = v3index.Value<string>(\"version\");\n                if (status != null && status.StartsWith(\"3.0\"))\n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        public override PackageSource Source\n        {\n            get { return _source; }\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> Search(string searchTerm, SearchFilter filters, int skip, int take, CancellationToken cancellationToken)\n        {\n            await DetectVersionWhenNeccessary(cancellationToken);\n            return await _repo.Search(searchTerm, filters, skip, take, cancellationToken);\n        }\n\n        public override async Task<Newtonsoft.Json.Linq.JObject> GetPackageMetadata(string id, Versioning.NuGetVersion version)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadata(id, version);\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> GetPackageMetadataById(string packageId)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadataById(packageId);\n        }\n\n        public override async void RecordMetric(Resolution.PackageActionType actionType, PackageIdentity packageIdentity, PackageIdentity dependentPackage, bool isUpdate, Installation.InstallationTarget target)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            _repo.RecordMetric(actionType, packageIdentity, dependentPackage, isUpdate, target);\n        }\n    }\n}\n"
  },
  {
    "Start": 5034,
    "Length": 51,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\NuGet.Client\\NuGet.Client\\AutoDetectSourceRepository.cs",
    "SourceCode": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace NuGet.Client\n{\n    /// <summary>\n    /// A SourceRepository class that will detect if the url points to a V3 or V2 \n    /// repository.\n    /// </summary>\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable\")]\n    public class AutoDetectSourceRepository : SourceRepository\n    {\n        PackageSource _source;\n\n        string _host;\n\n        // factory used to create V2 repo\n        IPackageRepositoryFactory _v2RepoFactory;\n\n        // Once the version of the repo is detected, this variable will \n        // be the real repo used.\n        SourceRepository _repo;\n\n        SemaphoreSlim _lock;\n\n        public AutoDetectSourceRepository(\n            PackageSource source, \n            string host,\n            IPackageRepositoryFactory repoFactory)\n        {\n            _source = source;\n            _host = host;\n            _v2RepoFactory = repoFactory;\n            _lock = new SemaphoreSlim(1);\n        }\n\n        private async Task DetectVersionWhenNeccessary(CancellationToken cancellationToken)\n        {\n            await _lock.WaitAsync();\n            try\n            {\n                if (_repo != null)\n                {\n                    return;\n                }\n\n                bool r = await IsV3Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new V3SourceRepository(_source, _host);\n                    return;\n                }\n\n                r = await IsV2Async(_source, cancellationToken);\n                if (r)\n                {\n                    _repo = new NuGet.Client.Interop.V2SourceRepository(\n                        _source, _v2RepoFactory.CreateRepository(_source.Url), _host);\n                    return;\n                }\n\n                throw new InvalidOperationException(\n                    String.Format(\"source {0} is not available\", _source.Url));\n            }\n            finally\n            {\n                _lock.Release();\n            }\n        }\n\n        private async Task<bool> IsV2Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return true;\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var result = await client.GetFile(url);\n                if (result == null)\n                {\n                    return false;\n                }\n\n                var raw = result.Value<string>(\"raw\");\n                if (raw != null && raw.IndexOf(\"Packages\", StringComparison.OrdinalIgnoreCase) != -1) \n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        private async Task<bool> IsV3Async(PackageSource source, CancellationToken cancellationToken)\n        {\n            var url = new Uri(source.Url);\n            if (url.IsFile || url.IsUnc)\n            {\n                return File.Exists(url.LocalPath);\n            }\n\n            using (var client = new Data.DataClient())\n            {\n                var v3index = await client.GetFile(url);\n                if (v3index == null)\n                {\n                    return false;\n                }\n\n                var status = v3index.Value<string>(\"version\");\n                if (status != null && status.StartsWith(\"3.0\"))\n                {\n                    return true;\n                }\n\n                return false;\n            }\n        }\n\n        public override PackageSource Source\n        {\n            get { return _source; }\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> Search(string searchTerm, SearchFilter filters, int skip, int take, CancellationToken cancellationToken)\n        {\n            await DetectVersionWhenNeccessary(cancellationToken);\n            return await _repo.Search(searchTerm, filters, skip, take, cancellationToken);\n        }\n\n        public override async Task<Newtonsoft.Json.Linq.JObject> GetPackageMetadata(string id, Versioning.NuGetVersion version)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadata(id, version);\n        }\n\n        public override async Task<IEnumerable<Newtonsoft.Json.Linq.JObject>> GetPackageMetadataById(string packageId)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            return await _repo.GetPackageMetadataById(packageId);\n        }\n\n        public override async void RecordMetric(Resolution.PackageActionType actionType, PackageIdentity packageIdentity, PackageIdentity dependentPackage, bool isUpdate, Installation.InstallationTarget target)\n        {\n            await DetectVersionWhenNeccessary(CancellationToken.None);\n            _repo.RecordMetric(actionType, packageIdentity, dependentPackage, isUpdate, target);\n        }\n    }\n}\n"
  }
]