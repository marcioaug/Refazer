[
  {
    "Text": "[Fact]\n        [UseDefaultExecutionStrategy]",
    "Start": 7451,
    "Length": 44,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace ProductivityApiTests\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Data;\n    using System.Data.Entity;\n    using System.Data.Entity.Core;\n    using System.Data.Entity.Core.Objects;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.TestHelpers;\n    using System.Data.SqlClient;\n    using System.Linq;\n    using AdvancedPatternsModel;\n    using Moq;\n    using SimpleModel;\n    using Xunit;\n    using Xunit.Extensions;\n\n    /// <summary>\n    ///     Functional tests for DbSqlQuery and other raw SQL functionality.\n    ///     Unit tests also exist in the unit tests project.\n    /// </summary>\n    public class DbSqlQueryTests : FunctionalTestBase\n    {\n        #region Infrastructure/setup\n\n        static DbSqlQueryTests()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                context.Database.Initialize(force: false);\n            }\n        }\n\n        #endregion\n\n        #region SQL queries for entities\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var productsQuery = context.Products.SqlQuery(\"select * from Products\");\n\n                // Quick check that creating the query object does not execute the query.\n                Assert.Equal(0, context.Products.Local.Count);\n\n                var products = productsQuery.ToList();\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                CadillacIsNotFeaturedProduct(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var productsQuery = context.Set(typeof(Product)).SqlQuery(\"select * from Products\");\n\n                // Quick check that creating the query object does not execute the query.\n                Assert.Equal(0, context.Products.Local.Count);\n\n                var products = productsQuery.ToList<Product>();\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                CadillacIsNotFeaturedProduct(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_uses_identity_resolution()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var trackedProducts = context.Products.Where(p => !(p is FeaturedProduct)).OrderBy(p => p.Id).ToList();\n                var products = context.Set<Product>().SqlQuery(\"select * from Products\").OrderBy(p => p.Id).ToList();\n\n                Assert.Equal(6, trackedProducts.Count);\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                products.Remove(products.Single(d => d.Name == \"Cadillac\"));\n                Assert.True(products.SequenceEqual(trackedProducts));\n            }\n        }\n\n        [Fact]\n        public void\n            SQL_query_identity_resolution_fails_when_type_returned_from_query_is_different_from_type_in_state_manager()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                context.Products.Load();\n\n                var query = context.Set<Product>().SqlQuery(\"select * from Products\");\n                Assert.Throws<NotSupportedException>(() => query.ToList()).ValidateMessage(\n                    \"Materializer_RecyclingEntity\",\n                    \"SimpleModelContext.Products\",\n                    \"SimpleModel.Product\",\n                    \"SimpleModel.FeaturedProduct\",\n                    \"EntitySet=Products;Id=7\");\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Products.SqlQuery(\n                        \"select * from Products where Id < {0} and CategoryId = {1}\", 4,\n                        \"Beverages\").ToList();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Set(typeof(Product)).SqlQuery(\n                        \"select * from Products where Id < {0} and CategoryId = {1}\",\n                        4, \"Beverages\").ToList<Product>();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_SqlParameter_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = context.Products.SqlQuery(\n                    \"select * from Products where Id < @p0 and CategoryId = @p1\",\n                    new SqlParameter\n                    {\n                        ParameterName = \"p0\",\n                        Value = 4\n                    },\n                    new SqlParameter\n                    {\n                        ParameterName = \"p1\",\n                        Value = \"Beverages\"\n                    })\n                    .ToList();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_SqlParameter_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Set(typeof(Product)).SqlQuery(\n                        \"select * from Products where Id < @p0 and CategoryId = @p1\",\n                        new SqlParameter\n                        {\n                            ParameterName = \"p0\",\n                            Value = 4\n                        },\n                        new SqlParameter\n                        {\n                            ParameterName = \"p1\",\n                            Value = \"Beverages\"\n                        })\n                        .ToList<Product>();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Products.SqlQuery(s).AsNoTracking().ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Products.SqlQuery(s).AsStreaming().AsNoTracking().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery<Product>(s).ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery<Product>(s).AsStreaming().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Set(typeof(Product)).SqlQuery(s).AsNoTracking().ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Set(typeof(Product)).SqlQuery(s).AsStreaming().AsNoTracking().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void\n            Non_generic_SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery(typeof(Product), s).ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void\n            Non_generic_SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery(typeof(Product), s).AsStreaming().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        private void SQL_query_can_be_used_to_materialize_entities_without_tracking(\n            Func<SimpleModelContext, string, List<Product>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(context, \"select * from Products\");\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                CadillacIsNotFeaturedProduct(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Products.SqlQuery(s, p).AsNoTracking().ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Products.SqlQuery(s, p).AsStreaming().AsNoTracking().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery<Product>(s, p).ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery<Product>(s, p).AsStreaming().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Set(typeof(Product)).SqlQuery(s, p).AsNoTracking().ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Set(typeof(Product)).SqlQuery(s, p).AsStreaming().AsNoTracking().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery(typeof(Product), s, p).ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery(typeof(Product), s, p).AsStreaming().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        private void SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n            Func<SimpleModelContext, string, object[], List<Product>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(\n                    context, \"select * from Products where Id < {0} and CategoryId = {1}\",\n                    new object[] { 4, \"Beverages\" });\n\n                Assert.Equal(0, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_derived_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Set<FeaturedProduct>().SqlQuery(\n                        \"select * from Products where Discriminator = 'FeaturedProduct'\").ToList();\n\n                Assert.Equal(1, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateCadillac(products.Single());\n            }\n        }\n\n        [Fact]\n        public void\n            SQL_query_can_be_used_to_materialize_derived_entities_into_a_set_even_when_base_entities_are_returned()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = context.Set<FeaturedProduct>().SqlQuery(\"select * from Products\").ToList();\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                ValidateCadillac(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_where_columns_dont_map_throws()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Products.SqlQuery(\"select * from Categories\");\n\n                Assert.Throws<EntityCommandExecutionException>(() => query.ToList()).ValidateMessage(\n                    \"ADP_InvalidDataReaderMissingColumnForType\",\n                    \"SimpleModel.Product\", \"CategoryId\");\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Products.SqlQuery(\"select * from Products\");\n\n                Assert.True(query.ToList().SequenceEqual(query.ToList()));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_for_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Set(typeof(Product)).SqlQuery(\"select * from Products\");\n\n                Assert.True(query.ToList<Product>().SequenceEqual(query.ToList<Product>()));\n            }\n        }\n\n        private static void ValidateBovril(List<Product> products)\n        {\n            Assert.Equal(1, products.Count);\n            ValidateBovril(products.Single());\n        }\n\n        private static void ValidateBovril(dynamic bovril)\n        {\n            Assert.Equal(2, bovril.Id);\n            Assert.Equal(\"Bovril\", bovril.Name);\n            Assert.Equal(\"Beverages\", bovril.CategoryId);\n        }\n\n        private static void ValidateCadillac(Product cadillac)\n        {\n            Assert.IsType<FeaturedProduct>(cadillac);\n            var asFeaturedProduct = (FeaturedProduct)cadillac;\n\n            Assert.Equal(7, asFeaturedProduct.Id);\n            Assert.Equal(\"Cadillac\", asFeaturedProduct.Name);\n            Assert.Equal(\"Cars\", asFeaturedProduct.CategoryId);\n            Assert.Equal(\"Ed Wood\", asFeaturedProduct.PromotionalCode);\n        }\n\n        private static void CadillacIsNotFeaturedProduct(Product cadillac)\n        {\n            Assert.IsNotType<FeaturedProduct>(cadillac);\n\n            Assert.Equal(7, cadillac.Id);\n            Assert.Equal(\"Cadillac\", cadillac.Name);\n            Assert.Equal(\"Cars\", cadillac.CategoryId);\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_is_streaming_by_default()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var expectedState = DatabaseTestHelpers.IsSqlAzure(context.Database.Connection.ConnectionString)\n                    ? ConnectionState.Closed\n                    : ConnectionState.Open;\n                var products = context.Products.SqlQuery(\"select * from Products\");\n                using (var enumerator = products.GetEnumerator())\n                {\n                    enumerator.MoveNext();\n\n                    Assert.Equal(expectedState, context.Database.Connection.State);\n                }\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_is_buffered_if_execution_strategy_is_used()\n        {\n            var executionStrategyMock = new Mock<IDbExecutionStrategy>();\n            executionStrategyMock.Setup(m => m.RetriesOnFailure).Returns(true);\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Func<ObjectResult<Product>>>()))\n                 .Returns<Func<ObjectResult<Product>>>(f => f());\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Action>())).Callback<Action>(f => f());\n\n            MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(key => (Func<IDbExecutionStrategy>)(() => executionStrategyMock.Object));\n            try\n            {\n                using (var context = new SimpleModelContext())\n                {\n                    var products = context.Products.SqlQuery(\"select * from Products\");\n                    using (var enumerator = products.GetEnumerator())\n                    {\n                        enumerator.MoveNext();\n\n                        Assert.Equal(ConnectionState.Closed, context.Database.Connection.State);\n                    }\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        #endregion\n\n        #region SQL queries for non-entities\n\n        public class UnMappedProduct\n        {\n            public int Id { get; set; }\n            public string Name { get; set; }\n            public string CategoryId { get; set; }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery<UnMappedProduct>(s).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(UnMappedProduct), s).ToList<UnMappedProduct>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery<UnMappedProduct>(s).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(UnMappedProduct), s).ToListAsync().Result.ToList<UnMappedProduct>());\n        }\n\n#endif\n\n        private void SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n            Func<SimpleModelContext, string, List<UnMappedProduct>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(context, \"select * from Products\");\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery<UnMappedProduct>(s, p).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery(typeof(UnMappedProduct), s, p).ToList<UnMappedProduct>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery<UnMappedProduct>(s, p).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery(typeof(UnMappedProduct), s, p).ToListAsync().Result.ToList<UnMappedProduct>());\n        }\n\n#endif\n\n        private void SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n            Func<SimpleModelContext, string, object[], List<UnMappedProduct>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(\n                    context, \"select * from Products where Id < {0} and CategoryId = {1}\",\n                    new object[] { 4, \"Beverages\" });\n\n                Assert.Equal(1, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                ValidateBovril(products.Single());\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\");\n\n                Assert.Throws<InvalidOperationException>(() => query.ToList()).ValidateMessage(\n                    \"Materializer_InvalidCastReference\", \"System.String\",\n                    \"System.Int32\");\n            }\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws_when_streaming()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\").AsStreaming();\n\n                Assert.Throws<InvalidOperationException>(() => query.ToList()).ValidateMessage(\n                    \"Materializer_InvalidCastReference\", \"System.String\",\n                    \"System.Int32\");\n            }\n        }\n#pragma warning restore 612, 618\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\");\n\n                Assert.Throws<InvalidOperationException>(\n                    () => ExceptionHelpers.UnwrapAggregateExceptions(\n                        () =>\n                            query.ToListAsync().Result)).ValidateMessage(\n                                \"Materializer_InvalidCastReference\", \"System.String\",\n                                \"System.Int32\");\n            }\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws_when_streaming_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\").AsStreaming();\n\n                Assert.Throws<InvalidOperationException>(\n                    () => ExceptionHelpers.UnwrapAggregateExceptions(\n                        () =>\n                            query.ToListAsync().Result)).ValidateMessage(\n                                \"Materializer_InvalidCastReference\", \"System.String\",\n                                \"System.Int32\");\n            }\n        }\n#pragma warning restore 612, 618\n\n#endif\n\n        [Fact]\n        public void SQL_query_cannot_be_used_to_materialize_anonymous_types()\n        {\n            SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation(\n                new\n                {\n                    Id = 2,\n                    Name = \"Bovril\",\n                    CategoryId = \"Foods\"\n                }, q => q.ToList());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_cannot_be_used_to_materialize_anonymous_types_async()\n        {\n            SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation(\n                new\n                {\n                    Id = 2,\n                    Name = \"Bovril\",\n                    CategoryId = \"Foods\"\n                }, q => ExceptionHelpers.UnwrapAggregateExceptions(() => q.ToListAsync().Result));\n        }\n\n#endif\n\n        private void SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation<TElement>(\n            TElement _,\n            Func<DbRawSqlQuery<TElement>, List<TElement>> execute)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<TElement>(\"select * from Products\");\n                Assert.Throws<InvalidOperationException>(() => execute(query)).ValidateMessage(\n                    \"ObjectContext_InvalidTypeForStoreQuery\",\n                    typeof(TElement).ToString());\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_value_types()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery<int>(s).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_value_types()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(int), s).ToList<int>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_value_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery<int>(s).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_value_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(int), s).ToListAsync().Result.ToList<int>());\n        }\n\n#endif\n\n        private void SQL_query_can_be_used_to_materialize_value_types_implementation(\n            Func<SimpleModelContext, string, List<int>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(context, \"select Id from Products\");\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                Assert.True(products.Contains(2));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_complex_types()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery<SiteInfo>(s).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_complex_types()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(SiteInfo), s).ToList<SiteInfo>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_complex_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery<SiteInfo>(s).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_complex_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(SiteInfo), s).ToListAsync().Result.ToList<SiteInfo>());\n        }\n\n#endif\n\n        private void SQL_query_can_be_used_to_materialize_complex_types_implementation(\n            Func<AdvancedPatternsMasterContext, string, List<SiteInfo>> query)\n        {\n            using (var context = new AdvancedPatternsMasterContext())\n            {\n                var siteInfos = query(\n                    context,\n                    \"select Address_SiteInfo_Zone as Zone, Address_SiteInfo_Environment as Environment from Buildings\");\n\n                Assert.Equal(2, siteInfos.Count);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_non_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<int>(\"select Id from Products\");\n\n                Assert.True(query.ToList().SequenceEqual(query.ToList()));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_for_non_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n\n                Assert.True(query.ToList<int>().SequenceEqual(query.ToList<int>()));\n            }\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_for_non_entity_can_be_executed_multiple_times_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<int>(\"select Id from Products\");\n\n                Assert.True(query.ToListAsync().Result.SequenceEqual(query.ToListAsync().Result));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_for_non_entity_can_be_executed_multiple_times_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n\n                Assert.True(query.ToListAsync().Result.SequenceEqual(query.ToListAsync().Result));\n            }\n        }\n\n#endif\n\n        [Fact]\n        public void SQL_query_is_streaming_by_default()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var expectedState = DatabaseTestHelpers.IsSqlAzure(context.Database.Connection.ConnectionString)\n                    ? ConnectionState.Closed\n                    : ConnectionState.Open;\n                var products = context.Database.SqlQuery<int>(\"select Id from Products\");\n                using (var enumerator = products.GetEnumerator())\n                {\n                    enumerator.MoveNext();\n\n                    Assert.Equal(expectedState, context.Database.Connection.State);\n                }\n            }\n        }\n\n        [Fact]\n        public void SQL_query_is_buffered_if_execution_strategy_is_used()\n        {\n            var executionStrategyMock = new Mock<IDbExecutionStrategy>();\n            executionStrategyMock.Setup(m => m.RetriesOnFailure).Returns(true);\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Func<ObjectResult<int>>>()))\n                 .Returns<Func<ObjectResult<int>>>(f => f());\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Action>())).Callback<Action>(f => f());\n\n            MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(key => (Func<IDbExecutionStrategy>)(() => executionStrategyMock.Object));\n            try\n            {\n                using (var context = new SimpleModelContext())\n                {\n                    var products = context.Database.SqlQuery<int>(\"select Id from Products\");\n                    using (var enumerator = products.GetEnumerator())\n                    {\n                        enumerator.MoveNext();\n\n                        Assert.Equal(ConnectionState.Closed, context.Database.Connection.State);\n                    }\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        [Fact]\n        public void Nongeneric_SQL_query_is_streaming_by_default()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var expectedState = DatabaseTestHelpers.IsSqlAzure(context.Database.Connection.ConnectionString)\n                    ? ConnectionState.Closed\n                    : ConnectionState.Open;\n                var products = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n                var enumerator = products.GetEnumerator();\n                enumerator.MoveNext();\n\n                Assert.Equal(expectedState, context.Database.Connection.State);\n            }\n        }\n\n        [Fact]\n        public void Nongeneric_SQL_query_is_buffered_if_execution_strategy_is_used()\n        {\n            var executionStrategyMock = new Mock<IDbExecutionStrategy>();\n            executionStrategyMock.Setup(m => m.RetriesOnFailure).Returns(true);\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Func<ObjectResult<int>>>()))\n                 .Returns<Func<ObjectResult<int>>>(f => f());\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Action>())).Callback<Action>(f => f());\n\n            MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(key => (Func<IDbExecutionStrategy>)(() => executionStrategyMock.Object));\n            try\n            {\n                using (var context = new SimpleModelContext())\n                {\n                    var products = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n                    var enumerator = products.GetEnumerator();\n                    enumerator.MoveNext();\n\n                    Assert.Equal(ConnectionState.Closed, context.Database.Connection.State);\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        #endregion\n\n        #region SQL command tests\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_can_be_executed_against_the_database()\n        {\n            SQL_commands_can_be_executed_against_the_database_implementation((d, q) => d.ExecuteSqlCommand(q));\n        }\n\n#if !NET40\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_can_be_executed_against_the_database_async()\n        {\n            SQL_commands_can_be_executed_against_the_database_implementation((d, q) => d.ExecuteSqlCommandAsync(q).Result);\n        }\n\n#endif\n\n        private void SQL_commands_can_be_executed_against_the_database_implementation(Func<Database, string, int> execute)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var result = execute(\n                    context.Database,\n                    \"update Products set Name = 'Vegemite' where Name = 'Marmite'\");\n\n                Assert.Equal(1, result);\n\n                Assert.NotNull(context.Products.SingleOrDefault(p => p.Name == \"Vegemite\"));\n            }\n        }\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_with_parameters_can_be_executed_against_the_database()\n        {\n            SQL_commands_with_parameters_can_be_executed_against_the_database_implementation((d, q, p) => d.ExecuteSqlCommand(q, p));\n        }\n\n#if !NET40\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_with_parameters_can_be_executed_against_the_database_async()\n        {\n            SQL_commands_with_parameters_can_be_executed_against_the_database_implementation(\n                (d, q, p) => d.ExecuteSqlCommandAsync(q, p).Result);\n        }\n\n#endif\n\n        private void SQL_commands_with_parameters_can_be_executed_against_the_database_implementation(\n            Func<Database, string, object[], int> execute)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var result = execute(\n                    context.Database,\n                    \"update Products set Name = {0} where Name = {1}\",\n                    new object[] { \"Vegemite\", \"Marmite\" });\n\n                Assert.Equal(1, result);\n\n                Assert.NotNull(context.Products.SingleOrDefault(p => p.Name == \"Vegemite\"));\n            }\n        }\n\n        #endregion\n    }\n}\n",
      "Start": 0,
      "Length": 39495,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests2\\FunctionalTests\\ProductivityApi\\DbSqlQueryTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests2\\FunctionalTests\\ProductivityApi\\DbSqlQueryTests.cs"
  },
  {
    "Text": "[Fact]\n        [UseDefaultExecutionStrategy]",
    "Start": 8151,
    "Length": 44,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace ProductivityApiTests\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Data;\n    using System.Data.Entity;\n    using System.Data.Entity.Core;\n    using System.Data.Entity.Core.Objects;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.TestHelpers;\n    using System.Data.SqlClient;\n    using System.Linq;\n    using AdvancedPatternsModel;\n    using Moq;\n    using SimpleModel;\n    using Xunit;\n    using Xunit.Extensions;\n\n    /// <summary>\n    ///     Functional tests for DbSqlQuery and other raw SQL functionality.\n    ///     Unit tests also exist in the unit tests project.\n    /// </summary>\n    public class DbSqlQueryTests : FunctionalTestBase\n    {\n        #region Infrastructure/setup\n\n        static DbSqlQueryTests()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                context.Database.Initialize(force: false);\n            }\n        }\n\n        #endregion\n\n        #region SQL queries for entities\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var productsQuery = context.Products.SqlQuery(\"select * from Products\");\n\n                // Quick check that creating the query object does not execute the query.\n                Assert.Equal(0, context.Products.Local.Count);\n\n                var products = productsQuery.ToList();\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                CadillacIsNotFeaturedProduct(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var productsQuery = context.Set(typeof(Product)).SqlQuery(\"select * from Products\");\n\n                // Quick check that creating the query object does not execute the query.\n                Assert.Equal(0, context.Products.Local.Count);\n\n                var products = productsQuery.ToList<Product>();\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                CadillacIsNotFeaturedProduct(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_uses_identity_resolution()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var trackedProducts = context.Products.Where(p => !(p is FeaturedProduct)).OrderBy(p => p.Id).ToList();\n                var products = context.Set<Product>().SqlQuery(\"select * from Products\").OrderBy(p => p.Id).ToList();\n\n                Assert.Equal(6, trackedProducts.Count);\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                products.Remove(products.Single(d => d.Name == \"Cadillac\"));\n                Assert.True(products.SequenceEqual(trackedProducts));\n            }\n        }\n\n        [Fact]\n        public void\n            SQL_query_identity_resolution_fails_when_type_returned_from_query_is_different_from_type_in_state_manager()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                context.Products.Load();\n\n                var query = context.Set<Product>().SqlQuery(\"select * from Products\");\n                Assert.Throws<NotSupportedException>(() => query.ToList()).ValidateMessage(\n                    \"Materializer_RecyclingEntity\",\n                    \"SimpleModelContext.Products\",\n                    \"SimpleModel.Product\",\n                    \"SimpleModel.FeaturedProduct\",\n                    \"EntitySet=Products;Id=7\");\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Products.SqlQuery(\n                        \"select * from Products where Id < {0} and CategoryId = {1}\", 4,\n                        \"Beverages\").ToList();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Set(typeof(Product)).SqlQuery(\n                        \"select * from Products where Id < {0} and CategoryId = {1}\",\n                        4, \"Beverages\").ToList<Product>();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_SqlParameter_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = context.Products.SqlQuery(\n                    \"select * from Products where Id < @p0 and CategoryId = @p1\",\n                    new SqlParameter\n                    {\n                        ParameterName = \"p0\",\n                        Value = 4\n                    },\n                    new SqlParameter\n                    {\n                        ParameterName = \"p1\",\n                        Value = \"Beverages\"\n                    })\n                    .ToList();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_SqlParameter_parameters_can_be_used_to_materialize_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Set(typeof(Product)).SqlQuery(\n                        \"select * from Products where Id < @p0 and CategoryId = @p1\",\n                        new SqlParameter\n                        {\n                            ParameterName = \"p0\",\n                            Value = 4\n                        },\n                        new SqlParameter\n                        {\n                            ParameterName = \"p1\",\n                            Value = \"Beverages\"\n                        })\n                        .ToList<Product>();\n\n                Assert.Equal(1, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Products.SqlQuery(s).AsNoTracking().ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Products.SqlQuery(s).AsStreaming().AsNoTracking().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery<Product>(s).ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery<Product>(s).AsStreaming().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Set(typeof(Product)).SqlQuery(s).AsNoTracking().ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Set(typeof(Product)).SqlQuery(s).AsStreaming().AsNoTracking().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void\n            Non_generic_SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery(typeof(Product), s).ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void\n            Non_generic_SQL_query_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_can_be_used_to_materialize_entities_without_tracking(\n                (c, s) => c.Database.SqlQuery(typeof(Product), s).AsStreaming().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        private void SQL_query_can_be_used_to_materialize_entities_without_tracking(\n            Func<SimpleModelContext, string, List<Product>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(context, \"select * from Products\");\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                CadillacIsNotFeaturedProduct(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Products.SqlQuery(s, p).AsNoTracking().ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Products.SqlQuery(s, p).AsStreaming().AsNoTracking().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery<Product>(s, p).ToList());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery<Product>(s, p).AsStreaming().ToList());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Set(typeof(Product)).SqlQuery(s, p).AsNoTracking().ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_with_AsNoTracking_and_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Set(typeof(Product)).SqlQuery(s, p).AsStreaming().AsNoTracking().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery(typeof(Product), s, p).ToList<Product>());\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking_by_using_Database_SqlQuery_with_AsStreaming()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n                (c, s, p) => c.Database.SqlQuery(typeof(Product), s, p).AsStreaming().ToList<Product>());\n        }\n#pragma warning restore 612, 618\n\n        private void SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking(\n            Func<SimpleModelContext, string, object[], List<Product>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(\n                    context, \"select * from Products where Id < {0} and CategoryId = {1}\",\n                    new object[] { 4, \"Beverages\" });\n\n                Assert.Equal(0, context.Products.Local.Count);\n                ValidateBovril(products);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_derived_entities_into_a_set()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products =\n                    context.Set<FeaturedProduct>().SqlQuery(\n                        \"select * from Products where Discriminator = 'FeaturedProduct'\").ToList();\n\n                Assert.Equal(1, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateCadillac(products.Single());\n            }\n        }\n\n        [Fact]\n        public void\n            SQL_query_can_be_used_to_materialize_derived_entities_into_a_set_even_when_base_entities_are_returned()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = context.Set<FeaturedProduct>().SqlQuery(\"select * from Products\").ToList();\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(products.Count, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n                ValidateCadillac(products.Single(d => d.Name == \"Cadillac\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_where_columns_dont_map_throws()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Products.SqlQuery(\"select * from Categories\");\n\n                Assert.Throws<EntityCommandExecutionException>(() => query.ToList()).ValidateMessage(\n                    \"ADP_InvalidDataReaderMissingColumnForType\",\n                    \"SimpleModel.Product\", \"CategoryId\");\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Products.SqlQuery(\"select * from Products\");\n\n                Assert.True(query.ToList().SequenceEqual(query.ToList()));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_for_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Set(typeof(Product)).SqlQuery(\"select * from Products\");\n\n                Assert.True(query.ToList<Product>().SequenceEqual(query.ToList<Product>()));\n            }\n        }\n\n        private static void ValidateBovril(List<Product> products)\n        {\n            Assert.Equal(1, products.Count);\n            ValidateBovril(products.Single());\n        }\n\n        private static void ValidateBovril(dynamic bovril)\n        {\n            Assert.Equal(2, bovril.Id);\n            Assert.Equal(\"Bovril\", bovril.Name);\n            Assert.Equal(\"Beverages\", bovril.CategoryId);\n        }\n\n        private static void ValidateCadillac(Product cadillac)\n        {\n            Assert.IsType<FeaturedProduct>(cadillac);\n            var asFeaturedProduct = (FeaturedProduct)cadillac;\n\n            Assert.Equal(7, asFeaturedProduct.Id);\n            Assert.Equal(\"Cadillac\", asFeaturedProduct.Name);\n            Assert.Equal(\"Cars\", asFeaturedProduct.CategoryId);\n            Assert.Equal(\"Ed Wood\", asFeaturedProduct.PromotionalCode);\n        }\n\n        private static void CadillacIsNotFeaturedProduct(Product cadillac)\n        {\n            Assert.IsNotType<FeaturedProduct>(cadillac);\n\n            Assert.Equal(7, cadillac.Id);\n            Assert.Equal(\"Cadillac\", cadillac.Name);\n            Assert.Equal(\"Cars\", cadillac.CategoryId);\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_is_streaming_by_default()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var expectedState = DatabaseTestHelpers.IsSqlAzure(context.Database.Connection.ConnectionString)\n                    ? ConnectionState.Closed\n                    : ConnectionState.Open;\n                var products = context.Products.SqlQuery(\"select * from Products\");\n                using (var enumerator = products.GetEnumerator())\n                {\n                    enumerator.MoveNext();\n\n                    Assert.Equal(expectedState, context.Database.Connection.State);\n                }\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_entity_is_buffered_if_execution_strategy_is_used()\n        {\n            var executionStrategyMock = new Mock<IDbExecutionStrategy>();\n            executionStrategyMock.Setup(m => m.RetriesOnFailure).Returns(true);\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Func<ObjectResult<Product>>>()))\n                 .Returns<Func<ObjectResult<Product>>>(f => f());\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Action>())).Callback<Action>(f => f());\n\n            MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(key => (Func<IDbExecutionStrategy>)(() => executionStrategyMock.Object));\n            try\n            {\n                using (var context = new SimpleModelContext())\n                {\n                    var products = context.Products.SqlQuery(\"select * from Products\");\n                    using (var enumerator = products.GetEnumerator())\n                    {\n                        enumerator.MoveNext();\n\n                        Assert.Equal(ConnectionState.Closed, context.Database.Connection.State);\n                    }\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        #endregion\n\n        #region SQL queries for non-entities\n\n        public class UnMappedProduct\n        {\n            public int Id { get; set; }\n            public string Name { get; set; }\n            public string CategoryId { get; set; }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery<UnMappedProduct>(s).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(UnMappedProduct), s).ToList<UnMappedProduct>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery<UnMappedProduct>(s).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(UnMappedProduct), s).ToListAsync().Result.ToList<UnMappedProduct>());\n        }\n\n#endif\n\n        private void SQL_query_can_be_used_to_materialize_unmapped_types_implementation(\n            Func<SimpleModelContext, string, List<UnMappedProduct>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(context, \"select * from Products\");\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                ValidateBovril(products.Single(d => d.Name == \"Bovril\"));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery<UnMappedProduct>(s, p).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery(typeof(UnMappedProduct), s, p).ToList<UnMappedProduct>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery<UnMappedProduct>(s, p).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_async()\n        {\n            SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n                (c, s, p) => c.Database.SqlQuery(typeof(UnMappedProduct), s, p).ToListAsync().Result.ToList<UnMappedProduct>());\n        }\n\n#endif\n\n        private void SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation(\n            Func<SimpleModelContext, string, object[], List<UnMappedProduct>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(\n                    context, \"select * from Products where Id < {0} and CategoryId = {1}\",\n                    new object[] { 4, \"Beverages\" });\n\n                Assert.Equal(1, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                ValidateBovril(products.Single());\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\");\n\n                Assert.Throws<InvalidOperationException>(() => query.ToList()).ValidateMessage(\n                    \"Materializer_InvalidCastReference\", \"System.String\",\n                    \"System.Int32\");\n            }\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws_when_streaming()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\").AsStreaming();\n\n                Assert.Throws<InvalidOperationException>(() => query.ToList()).ValidateMessage(\n                    \"Materializer_InvalidCastReference\", \"System.String\",\n                    \"System.Int32\");\n            }\n        }\n#pragma warning restore 612, 618\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\");\n\n                Assert.Throws<InvalidOperationException>(\n                    () => ExceptionHelpers.UnwrapAggregateExceptions(\n                        () =>\n                            query.ToListAsync().Result)).ValidateMessage(\n                                \"Materializer_InvalidCastReference\", \"System.String\",\n                                \"System.Int32\");\n            }\n        }\n\n#pragma warning disable 612, 618\n        [Fact]\n        [UseDefaultExecutionStrategy]\n        public void SQL_query_for_non_entity_where_columns_dont_map_throws_when_streaming_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<UnMappedProduct>(\"select * from Categories\").AsStreaming();\n\n                Assert.Throws<InvalidOperationException>(\n                    () => ExceptionHelpers.UnwrapAggregateExceptions(\n                        () =>\n                            query.ToListAsync().Result)).ValidateMessage(\n                                \"Materializer_InvalidCastReference\", \"System.String\",\n                                \"System.Int32\");\n            }\n        }\n#pragma warning restore 612, 618\n\n#endif\n\n        [Fact]\n        public void SQL_query_cannot_be_used_to_materialize_anonymous_types()\n        {\n            SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation(\n                new\n                {\n                    Id = 2,\n                    Name = \"Bovril\",\n                    CategoryId = \"Foods\"\n                }, q => q.ToList());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_cannot_be_used_to_materialize_anonymous_types_async()\n        {\n            SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation(\n                new\n                {\n                    Id = 2,\n                    Name = \"Bovril\",\n                    CategoryId = \"Foods\"\n                }, q => ExceptionHelpers.UnwrapAggregateExceptions(() => q.ToListAsync().Result));\n        }\n\n#endif\n\n        private void SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation<TElement>(\n            TElement _,\n            Func<DbRawSqlQuery<TElement>, List<TElement>> execute)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<TElement>(\"select * from Products\");\n                Assert.Throws<InvalidOperationException>(() => execute(query)).ValidateMessage(\n                    \"ObjectContext_InvalidTypeForStoreQuery\",\n                    typeof(TElement).ToString());\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_value_types()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery<int>(s).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_value_types()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(int), s).ToList<int>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_value_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery<int>(s).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_value_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_value_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(int), s).ToListAsync().Result.ToList<int>());\n        }\n\n#endif\n\n        private void SQL_query_can_be_used_to_materialize_value_types_implementation(\n            Func<SimpleModelContext, string, List<int>> query)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var products = query(context, \"select Id from Products\");\n\n                Assert.Equal(7, products.Count);\n                Assert.Equal(0, context.Products.Local.Count);\n\n                Assert.True(products.Contains(2));\n            }\n        }\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_complex_types()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery<SiteInfo>(s).ToList());\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_complex_types()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(SiteInfo), s).ToList<SiteInfo>());\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_can_be_used_to_materialize_complex_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery<SiteInfo>(s).ToListAsync().Result);\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_can_be_used_to_materialize_complex_types_async()\n        {\n            SQL_query_can_be_used_to_materialize_complex_types_implementation(\n                (c, s) => c.Database.SqlQuery(typeof(SiteInfo), s).ToListAsync().Result.ToList<SiteInfo>());\n        }\n\n#endif\n\n        private void SQL_query_can_be_used_to_materialize_complex_types_implementation(\n            Func<AdvancedPatternsMasterContext, string, List<SiteInfo>> query)\n        {\n            using (var context = new AdvancedPatternsMasterContext())\n            {\n                var siteInfos = query(\n                    context,\n                    \"select Address_SiteInfo_Zone as Zone, Address_SiteInfo_Environment as Environment from Buildings\");\n\n                Assert.Equal(2, siteInfos.Count);\n            }\n        }\n\n        [Fact]\n        public void SQL_query_for_non_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<int>(\"select Id from Products\");\n\n                Assert.True(query.ToList().SequenceEqual(query.ToList()));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_for_non_entity_can_be_executed_multiple_times()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n\n                Assert.True(query.ToList<int>().SequenceEqual(query.ToList<int>()));\n            }\n        }\n\n#if !NET40\n\n        [Fact]\n        public void SQL_query_for_non_entity_can_be_executed_multiple_times_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery<int>(\"select Id from Products\");\n\n                Assert.True(query.ToListAsync().Result.SequenceEqual(query.ToListAsync().Result));\n            }\n        }\n\n        [Fact]\n        public void Non_generic_SQL_query_for_non_entity_can_be_executed_multiple_times_async()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var query = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n\n                Assert.True(query.ToListAsync().Result.SequenceEqual(query.ToListAsync().Result));\n            }\n        }\n\n#endif\n\n        [Fact]\n        public void SQL_query_is_streaming_by_default()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var expectedState = DatabaseTestHelpers.IsSqlAzure(context.Database.Connection.ConnectionString)\n                    ? ConnectionState.Closed\n                    : ConnectionState.Open;\n                var products = context.Database.SqlQuery<int>(\"select Id from Products\");\n                using (var enumerator = products.GetEnumerator())\n                {\n                    enumerator.MoveNext();\n\n                    Assert.Equal(expectedState, context.Database.Connection.State);\n                }\n            }\n        }\n\n        [Fact]\n        public void SQL_query_is_buffered_if_execution_strategy_is_used()\n        {\n            var executionStrategyMock = new Mock<IDbExecutionStrategy>();\n            executionStrategyMock.Setup(m => m.RetriesOnFailure).Returns(true);\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Func<ObjectResult<int>>>()))\n                 .Returns<Func<ObjectResult<int>>>(f => f());\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Action>())).Callback<Action>(f => f());\n\n            MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(key => (Func<IDbExecutionStrategy>)(() => executionStrategyMock.Object));\n            try\n            {\n                using (var context = new SimpleModelContext())\n                {\n                    var products = context.Database.SqlQuery<int>(\"select Id from Products\");\n                    using (var enumerator = products.GetEnumerator())\n                    {\n                        enumerator.MoveNext();\n\n                        Assert.Equal(ConnectionState.Closed, context.Database.Connection.State);\n                    }\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        [Fact]\n        public void Nongeneric_SQL_query_is_streaming_by_default()\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var expectedState = DatabaseTestHelpers.IsSqlAzure(context.Database.Connection.ConnectionString)\n                    ? ConnectionState.Closed\n                    : ConnectionState.Open;\n                var products = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n                var enumerator = products.GetEnumerator();\n                enumerator.MoveNext();\n\n                Assert.Equal(expectedState, context.Database.Connection.State);\n            }\n        }\n\n        [Fact]\n        public void Nongeneric_SQL_query_is_buffered_if_execution_strategy_is_used()\n        {\n            var executionStrategyMock = new Mock<IDbExecutionStrategy>();\n            executionStrategyMock.Setup(m => m.RetriesOnFailure).Returns(true);\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Func<ObjectResult<int>>>()))\n                 .Returns<Func<ObjectResult<int>>>(f => f());\n            executionStrategyMock.Setup(m => m.Execute(It.IsAny<Action>())).Callback<Action>(f => f());\n\n            MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(key => (Func<IDbExecutionStrategy>)(() => executionStrategyMock.Object));\n            try\n            {\n                using (var context = new SimpleModelContext())\n                {\n                    var products = context.Database.SqlQuery(typeof(int), \"select Id from Products\");\n                    var enumerator = products.GetEnumerator();\n                    enumerator.MoveNext();\n\n                    Assert.Equal(ConnectionState.Closed, context.Database.Connection.State);\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        #endregion\n\n        #region SQL command tests\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_can_be_executed_against_the_database()\n        {\n            SQL_commands_can_be_executed_against_the_database_implementation((d, q) => d.ExecuteSqlCommand(q));\n        }\n\n#if !NET40\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_can_be_executed_against_the_database_async()\n        {\n            SQL_commands_can_be_executed_against_the_database_implementation((d, q) => d.ExecuteSqlCommandAsync(q).Result);\n        }\n\n#endif\n\n        private void SQL_commands_can_be_executed_against_the_database_implementation(Func<Database, string, int> execute)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var result = execute(\n                    context.Database,\n                    \"update Products set Name = 'Vegemite' where Name = 'Marmite'\");\n\n                Assert.Equal(1, result);\n\n                Assert.NotNull(context.Products.SingleOrDefault(p => p.Name == \"Vegemite\"));\n            }\n        }\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_with_parameters_can_be_executed_against_the_database()\n        {\n            SQL_commands_with_parameters_can_be_executed_against_the_database_implementation((d, q, p) => d.ExecuteSqlCommand(q, p));\n        }\n\n#if !NET40\n\n        [Fact]\n        [AutoRollback]\n        [UseDefaultExecutionStrategy]\n        public void SQL_commands_with_parameters_can_be_executed_against_the_database_async()\n        {\n            SQL_commands_with_parameters_can_be_executed_against_the_database_implementation(\n                (d, q, p) => d.ExecuteSqlCommandAsync(q, p).Result);\n        }\n\n#endif\n\n        private void SQL_commands_with_parameters_can_be_executed_against_the_database_implementation(\n            Func<Database, string, object[], int> execute)\n        {\n            using (var context = new SimpleModelContext())\n            {\n                var result = execute(\n                    context.Database,\n                    \"update Products set Name = {0} where Name = {1}\",\n                    new object[] { \"Vegemite\", \"Marmite\" });\n\n                Assert.Equal(1, result);\n\n                Assert.NotNull(context.Products.SingleOrDefault(p => p.Name == \"Vegemite\"));\n            }\n        }\n\n        #endregion\n    }\n}\n",
      "Start": 0,
      "Length": 39495,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests2\\FunctionalTests\\ProductivityApi\\DbSqlQueryTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests2\\FunctionalTests\\ProductivityApi\\DbSqlQueryTests.cs"
  }
]