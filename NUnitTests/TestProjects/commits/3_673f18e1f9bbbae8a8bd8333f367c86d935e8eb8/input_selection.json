[
  {
    "Text": "string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");",
    "Start": 11950,
    "Length": 84,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Globalization;\nusing System.Linq;\nusing Roslyn.Test.Utilities;\nusing Xunit;\n\nnamespace Microsoft.CodeAnalysis.UnitTests\n{\n    public class CommonCommandLineParserTests : TestBase\n    {\n        private const int EN_US = 1033;\n        \n        private void VerifyCommandLineSplitter(string commandLine, string[] expected)\n        {\n            string[] actual = CommandLineSplitter.SplitCommandLine(commandLine);\n\n            Assert.Equal(expected.Length, actual.Length);\n            for (int i = 0; i < actual.Length; ++i)\n            {\n                Assert.Equal(expected[i], actual[i]);\n            }\n        }\n\n        private RuleSet ParseRuleSet(string source, params string[] otherSources)\n        {\n            var dir = Temp.CreateDirectory();\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(source);\n\n            for (int i = 1; i <= otherSources.Length; i++)\n            {\n                var newFile = dir.CreateFile(\"file\" + i + \".ruleset\");\n                newFile.WriteAllText(otherSources[i - 1]);\n            }\n\n            if (otherSources.Length != 0)\n            {\n                return RuleSet.LoadEffectiveRuleSetFromFile(file.Path);\n            }\n\n            return RuleSetProcessor.LoadFromFile(file.Path);\n        }\n\n        private void VerifyRuleSetError(string source, string message, bool locSpecific = true, string locMessage = \"\", params string[] otherSources)\n        {\n            try\n            {\n                ParseRuleSet(source, otherSources);\n            }\n            catch (Exception e)\n            {\n                if (CultureInfo.CurrentCulture.LCID == EN_US || CultureInfo.CurrentUICulture.LCID == EN_US || CultureInfo.CurrentCulture == CultureInfo.InvariantCulture || CultureInfo.CurrentUICulture == CultureInfo.InvariantCulture)\n                {\n                    Assert.Equal(message, e.Message);\n                }\n                else if (locSpecific)\n                {\n                    if (locMessage != \"\")\n                        Assert.Contains(locMessage, e.Message);\n                    else\n                        Assert.Equal(message, e.Message);\n                }\n\n                return;\n            }\n\n            Assert.True(false, \"Didn't return an error\");\n        }\n\n        [Fact]\n        public void TestCommandLineSplitter()\n        {\n            VerifyCommandLineSplitter(\"\", new string[0]);\n            VerifyCommandLineSplitter(\"   \\t   \", new string[0]);\n            VerifyCommandLineSplitter(\"   abc\\tdef baz    quuz   \", new string[] {\"abc\", \"def\", \"baz\", \"quuz\"});\n            VerifyCommandLineSplitter(@\"  \"\"abc def\"\"  fi\"\"ddle dee de\"\"e  \"\"hi there \"\"dude  he\"\"llo there\"\"  \",\n                                        new string[] { @\"abc def\", @\"fi\"\"ddle dee de\"\"e\", @\"\"\"hi there \"\"dude\", @\"he\"\"llo there\"\"\" });\n            VerifyCommandLineSplitter(@\"  \"\"abc def \\\"\" baz quuz\"\" \"\"\\\"\"straw berry\"\" fi\\\"\"zz \\\"\"buzz fizzbuzz\",\n                                        new string[] { @\"abc def \"\" baz quuz\", @\"\"\"straw berry\", @\"fi\"\"zz\", @\"\"\"buzz\", @\"fizzbuzz\"});\n            VerifyCommandLineSplitter(@\"  \\\\\"\"abc def\"\"  \\\\\\\"\"abc def\"\" \",\n                                        new string[] { @\"\\\"\"abc def\"\"\", @\"\\\"\"abc\", @\"def\"\"\" });\n            VerifyCommandLineSplitter(@\"  \\\\\\\\\"\"abc def\"\"  \\\\\\\\\\\"\"abc def\"\" \",\n                                        new string[] { @\"\\\\\"\"abc def\"\"\", @\"\\\\\"\"abc\", @\"def\"\"\" });\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRule()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\";\n\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"There is a duplicate key sequence 'CA1012' for the 'UniqueRuleName' key or unique identity constraint.\"), locMessage:  locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRule2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\";\n\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetHasDuplicateRules, \"CA1012\", \"Error\", \"Warn\"), locSpecific: false);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRule3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\";\n\n            var ruleSet = ParseRuleSet(source);\n            Assert.Equal(expected: ReportDiagnostic.Error, actual: ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRuleSet()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            VerifyRuleSetError(source, \"There are multiple root elements. Line 8, position 2.\", false);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingIncludeAll1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingIncludeAll2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingWithIncludeOfSameFile()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"a.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, new string[] { \"\" });\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Equal(1, RuleSet.GetEffectiveIncludesFromFile(ruleSet.FilePath).Count());\n        }\n\n        [Fact]\n        public void TestRuleSetParsingWithMutualIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"a.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Equal(2, RuleSet.GetEffectiveIncludesFromFile(ruleSet.FilePath).Count());\n        }\n\n        [Fact]\n        public void TestRuleSetParsingWithSiblingIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Equal(3, RuleSet.GetEffectiveIncludesFromFile(ruleSet.FilePath).Count());\n        }\n\n        [Fact]\n        public void TestRuleSetParsingIncludeAll3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The 'Action' attribute is invalid - The value 'Default' is invalid according to its datatype 'TIncludeAllAction' - The Enumeration constraint failed.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'Id' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'Action' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'AnalyzerId' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute4()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'RuleNamespace' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute5()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'ToolsVersion' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute6()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'Name' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRules()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n    <Rule Id=\"\"CA1015\"\" Action=\"\"Info\"\" />\n    <Rule Id=\"\"CA1016\"\" Action=\"\"Hidden\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1012\"], ReportDiagnostic.Error);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1013\"], ReportDiagnostic.Warn);\n            Assert.Contains(\"CA1014\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1014\"], ReportDiagnostic.Suppress);\n            Assert.Contains(\"CA1015\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1015\"], ReportDiagnostic.Info);\n            Assert.Contains(\"CA1016\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1016\"], ReportDiagnostic.Hidden);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRules2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Default\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The 'Action' attribute is invalid - The value 'Default' is invalid according to its datatype 'TRuleAction' - The Enumeration constraint failed.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetInclude()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"foo.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.True(ruleSet.Includes.Count() == 1);\n            Assert.Equal(ruleSet.Includes.First().Action, ReportDiagnostic.Default);\n            Assert.Equal(ruleSet.Includes.First().IncludePath, \"foo.ruleset\");\n        }\n\n        [WorkItem(156)]\n        [Fact(Skip = \"156\")]\n        public void TestRuleSetInclude1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"foo.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.InvalidRuleSetInclude, \"foo.ruleset\", string.Format(CodeAnalysisResources.FailedToResolveRuleSetName, \"foo.ruleset\")), otherSources: new string[] {\"\"});\n        }\n\n        [Fact]\n        public void TestRuleSetInclude2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Hidden\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Hidden, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Info\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Info, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeRecursiveIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1014\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n            Assert.Contains(\"CA1014\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1014\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeSpecificStrict1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            // CA1012's value in source wins.\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeSpecificStrict2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            // CA1012's value in source still wins.\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeSpecificStrict3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            // CA1013's value in source2 wins.\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveAction()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"None\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.DoesNotContain(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveAction1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionGlobal1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionGlobal2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionSpecific1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Suppress, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionSpecific2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestAllCombinations()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1000\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1001\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set3\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2119\"\" Action=\"\"None\"\" />\n    <Rule Id=\"\"CA2104\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA2105\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\";\n\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1000\"]);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1001\"]);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA2100\"]);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA2104\"]);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA2105\"]);\n            Assert.Equal(ReportDiagnostic.Suppress, ruleSet.SpecificDiagnosticOptions[\"CA2111\"]);\n            Assert.Equal(ReportDiagnostic.Suppress, ruleSet.SpecificDiagnosticOptions[\"CA2119\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeError()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Default\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var dir = Temp.CreateDirectory();\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(source);\n            var newFile = dir.CreateFile(\"file1.ruleset\");\n            newFile.WriteAllText(source1);\n\n            try\n            {\n                RuleSet.LoadEffectiveRuleSetFromFile(file.Path);\n                Assert.True(false, \"Didn't throw an exception\");\n            }\n            catch (InvalidRuleSetException e)\n            {\n                Assert.Contains(string.Format(CodeAnalysisResources.InvalidRuleSetInclude, newFile.Path, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\")), e.Message);\n            }\n        }\n\n        [Fact]\n        public void GetEffectiveIncludes_NoIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            var dir = Temp.CreateDirectory();\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(source);\n\n            var includePaths = RuleSet.GetEffectiveIncludesFromFile(file.Path);\n\n            Assert.Equal(expected: 1, actual: includePaths.Length);\n            Assert.Equal(expected: file.Path, actual: includePaths[0]);\n        }\n\n        [Fact]\n        public void GetEffectiveIncludes_OneLevel()\n        {\n            string ruleSetSource = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1000\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1001\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string includeSource = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            var dir = Temp.CreateDirectory();\n\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(ruleSetSource);\n\n            var include = dir.CreateFile(\"file1.ruleset\");\n            include.WriteAllText(includeSource);\n\n            var includePaths = RuleSet.GetEffectiveIncludesFromFile(file.Path);\n\n            Assert.Equal(expected: 2, actual: includePaths.Length);\n            Assert.Equal(expected: file.Path, actual: includePaths[0]);\n            Assert.Equal(expected: include.Path, actual: includePaths[1]);\n        }\n\n        [Fact]\n        public void GetEffectiveIncludes_TwoLevels()\n        {\n            string ruleSetSource = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1000\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1001\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string includeSource1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string includeSource2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set3\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2119\"\" Action=\"\"None\"\" />\n    <Rule Id=\"\"CA2104\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA2105\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\";\n\n            var dir = Temp.CreateDirectory();\n\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(ruleSetSource);\n\n            var include1 = dir.CreateFile(\"file1.ruleset\");\n            include1.WriteAllText(includeSource1);\n\n            var include2 = dir.CreateFile(\"file2.ruleset\");\n            include2.WriteAllText(includeSource2);\n\n            var includePaths = RuleSet.GetEffectiveIncludesFromFile(file.Path);\n\n            Assert.Equal(expected: 3, actual: includePaths.Length);\n            Assert.Equal(expected: file.Path, actual: includePaths[0]);\n            Assert.Equal(expected: include1.Path, actual: includePaths[1]);\n            Assert.Equal(expected: include2.Path, actual: includePaths[2]);\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 48765,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\CodeAnalysisTest\\CodeAnalysisTest\\CommonCommandLineParserTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\CodeAnalysisTest\\CodeAnalysisTest\\CommonCommandLineParserTests.cs"
  },
  {
    "Text": "string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");",
    "Start": 12767,
    "Length": 84,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Globalization;\nusing System.Linq;\nusing Roslyn.Test.Utilities;\nusing Xunit;\n\nnamespace Microsoft.CodeAnalysis.UnitTests\n{\n    public class CommonCommandLineParserTests : TestBase\n    {\n        private const int EN_US = 1033;\n        \n        private void VerifyCommandLineSplitter(string commandLine, string[] expected)\n        {\n            string[] actual = CommandLineSplitter.SplitCommandLine(commandLine);\n\n            Assert.Equal(expected.Length, actual.Length);\n            for (int i = 0; i < actual.Length; ++i)\n            {\n                Assert.Equal(expected[i], actual[i]);\n            }\n        }\n\n        private RuleSet ParseRuleSet(string source, params string[] otherSources)\n        {\n            var dir = Temp.CreateDirectory();\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(source);\n\n            for (int i = 1; i <= otherSources.Length; i++)\n            {\n                var newFile = dir.CreateFile(\"file\" + i + \".ruleset\");\n                newFile.WriteAllText(otherSources[i - 1]);\n            }\n\n            if (otherSources.Length != 0)\n            {\n                return RuleSet.LoadEffectiveRuleSetFromFile(file.Path);\n            }\n\n            return RuleSetProcessor.LoadFromFile(file.Path);\n        }\n\n        private void VerifyRuleSetError(string source, string message, bool locSpecific = true, string locMessage = \"\", params string[] otherSources)\n        {\n            try\n            {\n                ParseRuleSet(source, otherSources);\n            }\n            catch (Exception e)\n            {\n                if (CultureInfo.CurrentCulture.LCID == EN_US || CultureInfo.CurrentUICulture.LCID == EN_US || CultureInfo.CurrentCulture == CultureInfo.InvariantCulture || CultureInfo.CurrentUICulture == CultureInfo.InvariantCulture)\n                {\n                    Assert.Equal(message, e.Message);\n                }\n                else if (locSpecific)\n                {\n                    if (locMessage != \"\")\n                        Assert.Contains(locMessage, e.Message);\n                    else\n                        Assert.Equal(message, e.Message);\n                }\n\n                return;\n            }\n\n            Assert.True(false, \"Didn't return an error\");\n        }\n\n        [Fact]\n        public void TestCommandLineSplitter()\n        {\n            VerifyCommandLineSplitter(\"\", new string[0]);\n            VerifyCommandLineSplitter(\"   \\t   \", new string[0]);\n            VerifyCommandLineSplitter(\"   abc\\tdef baz    quuz   \", new string[] {\"abc\", \"def\", \"baz\", \"quuz\"});\n            VerifyCommandLineSplitter(@\"  \"\"abc def\"\"  fi\"\"ddle dee de\"\"e  \"\"hi there \"\"dude  he\"\"llo there\"\"  \",\n                                        new string[] { @\"abc def\", @\"fi\"\"ddle dee de\"\"e\", @\"\"\"hi there \"\"dude\", @\"he\"\"llo there\"\"\" });\n            VerifyCommandLineSplitter(@\"  \"\"abc def \\\"\" baz quuz\"\" \"\"\\\"\"straw berry\"\" fi\\\"\"zz \\\"\"buzz fizzbuzz\",\n                                        new string[] { @\"abc def \"\" baz quuz\", @\"\"\"straw berry\", @\"fi\"\"zz\", @\"\"\"buzz\", @\"fizzbuzz\"});\n            VerifyCommandLineSplitter(@\"  \\\\\"\"abc def\"\"  \\\\\\\"\"abc def\"\" \",\n                                        new string[] { @\"\\\"\"abc def\"\"\", @\"\\\"\"abc\", @\"def\"\"\" });\n            VerifyCommandLineSplitter(@\"  \\\\\\\\\"\"abc def\"\"  \\\\\\\\\\\"\"abc def\"\" \",\n                                        new string[] { @\"\\\\\"\"abc def\"\"\", @\"\\\\\"\"abc\", @\"def\"\"\" });\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRule()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\";\n\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"There is a duplicate key sequence 'CA1012' for the 'UniqueRuleName' key or unique identity constraint.\"), locMessage:  locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRule2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\";\n\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetHasDuplicateRules, \"CA1012\", \"Error\", \"Warn\"), locSpecific: false);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRule3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\";\n\n            var ruleSet = ParseRuleSet(source);\n            Assert.Equal(expected: ReportDiagnostic.Error, actual: ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingDuplicateRuleSet()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            VerifyRuleSetError(source, \"There are multiple root elements. Line 8, position 2.\", false);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingIncludeAll1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingIncludeAll2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingWithIncludeOfSameFile()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"a.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, new string[] { \"\" });\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Equal(1, RuleSet.GetEffectiveIncludesFromFile(ruleSet.FilePath).Count());\n        }\n\n        [Fact]\n        public void TestRuleSetParsingWithMutualIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"a.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Equal(2, RuleSet.GetEffectiveIncludesFromFile(ruleSet.FilePath).Count());\n        }\n\n        [Fact]\n        public void TestRuleSetParsingWithSiblingIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Equal(3, RuleSet.GetEffectiveIncludesFromFile(ruleSet.FilePath).Count());\n        }\n\n        [Fact]\n        public void TestRuleSetParsingIncludeAll3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The 'Action' attribute is invalid - The value 'Default' is invalid according to its datatype 'TIncludeAllAction' - The Enumeration constraint failed.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'Id' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'Action' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'AnalyzerId' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute4()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\"  ToolsVersion=\"\"12.0\"\">\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'RuleNamespace' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute5()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'ToolsVersion' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRulesMissingAttribute6()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The required attribute 'Name' is missing.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRules()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n    <Rule Id=\"\"CA1015\"\" Action=\"\"Info\"\" />\n    <Rule Id=\"\"CA1016\"\" Action=\"\"Hidden\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1012\"], ReportDiagnostic.Error);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1013\"], ReportDiagnostic.Warn);\n            Assert.Contains(\"CA1014\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1014\"], ReportDiagnostic.Suppress);\n            Assert.Contains(\"CA1015\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1015\"], ReportDiagnostic.Info);\n            Assert.Contains(\"CA1016\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ruleSet.SpecificDiagnosticOptions[\"CA1016\"], ReportDiagnostic.Hidden);\n        }\n\n        [Fact]\n        public void TestRuleSetParsingRules2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Default\"\" />\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1014\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string locMessage = string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\");\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"The 'Action' attribute is invalid - The value 'Default' is invalid according to its datatype 'TRuleAction' - The Enumeration constraint failed.\"), locMessage: locMessage);\n        }\n\n        [Fact]\n        public void TestRuleSetInclude()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"foo.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source);\n            Assert.True(ruleSet.Includes.Count() == 1);\n            Assert.Equal(ruleSet.Includes.First().Action, ReportDiagnostic.Default);\n            Assert.Equal(ruleSet.Includes.First().IncludePath, \"foo.ruleset\");\n        }\n\n        [WorkItem(156)]\n        [Fact(Skip = \"156\")]\n        public void TestRuleSetInclude1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"foo.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            VerifyRuleSetError(source, string.Format(CodeAnalysisResources.InvalidRuleSetInclude, \"foo.ruleset\", string.Format(CodeAnalysisResources.FailedToResolveRuleSetName, \"foo.ruleset\")), otherSources: new string[] {\"\"});\n        }\n\n        [Fact]\n        public void TestRuleSetInclude2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Hidden\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Hidden, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Info\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Info, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeGlobalStrict3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeRecursiveIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1014\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n            Assert.Contains(\"CA1014\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1014\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeSpecificStrict1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            // CA1012's value in source wins.\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeSpecificStrict2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            // CA1012's value in source still wins.\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeSpecificStrict3()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Default\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Default\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Error\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            // CA1013's value in source2 wins.\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveAction()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"None\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.DoesNotContain(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveAction1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n            Assert.Equal(ReportDiagnostic.Default, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionGlobal1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionGlobal2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <IncludeAll Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.GeneralDiagnosticOption);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionSpecific1()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Suppress, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeEffectiveActionSpecific2()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var ruleSet = ParseRuleSet(source, source1);\n            Assert.Contains(\"CA1012\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1012\"]);\n            Assert.Contains(\"CA1013\", ruleSet.SpecificDiagnosticOptions.Keys);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA1013\"]);\n        }\n\n        [Fact]\n        public void TestAllCombinations()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1000\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1001\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set3\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2119\"\" Action=\"\"None\"\" />\n    <Rule Id=\"\"CA2104\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA2105\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\";\n\n            var ruleSet = ParseRuleSet(source, source1, source2);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1000\"]);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA1001\"]);\n            Assert.Equal(ReportDiagnostic.Error, ruleSet.SpecificDiagnosticOptions[\"CA2100\"]);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA2104\"]);\n            Assert.Equal(ReportDiagnostic.Warn, ruleSet.SpecificDiagnosticOptions[\"CA2105\"]);\n            Assert.Equal(ReportDiagnostic.Suppress, ruleSet.SpecificDiagnosticOptions[\"CA2111\"]);\n            Assert.Equal(ReportDiagnostic.Suppress, ruleSet.SpecificDiagnosticOptions[\"CA2119\"]);\n        }\n\n        [Fact]\n        public void TestRuleSetIncludeError()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string source1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1013\"\" Action=\"\"Default\"\" />\n  </Rules>\n</RuleSet>\n\";\n            var dir = Temp.CreateDirectory();\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(source);\n            var newFile = dir.CreateFile(\"file1.ruleset\");\n            newFile.WriteAllText(source1);\n\n            try\n            {\n                RuleSet.LoadEffectiveRuleSetFromFile(file.Path);\n                Assert.True(false, \"Didn't throw an exception\");\n            }\n            catch (InvalidRuleSetException e)\n            {\n                Assert.Contains(string.Format(CodeAnalysisResources.InvalidRuleSetInclude, newFile.Path, string.Format(CodeAnalysisResources.RuleSetSchemaViolation, \"\")), e.Message);\n            }\n        }\n\n        [Fact]\n        public void GetEffectiveIncludes_NoIncludes()\n        {\n            string source = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"Ruleset1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\" >\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1012\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            var dir = Temp.CreateDirectory();\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(source);\n\n            var includePaths = RuleSet.GetEffectiveIncludesFromFile(file.Path);\n\n            Assert.Equal(expected: 1, actual: includePaths.Length);\n            Assert.Equal(expected: file.Path, actual: includePaths[0]);\n        }\n\n        [Fact]\n        public void GetEffectiveIncludes_OneLevel()\n        {\n            string ruleSetSource = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1000\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1001\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string includeSource = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            var dir = Temp.CreateDirectory();\n\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(ruleSetSource);\n\n            var include = dir.CreateFile(\"file1.ruleset\");\n            include.WriteAllText(includeSource);\n\n            var includePaths = RuleSet.GetEffectiveIncludesFromFile(file.Path);\n\n            Assert.Equal(expected: 2, actual: includePaths.Length);\n            Assert.Equal(expected: file.Path, actual: includePaths[0]);\n            Assert.Equal(expected: include.Path, actual: includePaths[1]);\n        }\n\n        [Fact]\n        public void GetEffectiveIncludes_TwoLevels()\n        {\n            string ruleSetSource = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set1\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file1.ruleset\"\" Action=\"\"Error\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA1000\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA1001\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"None\"\" />\n  </Rules>\n</RuleSet>\n\";\n\n            string includeSource1 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set2\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Include Path=\"\"file2.ruleset\"\" Action=\"\"Warning\"\" />\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\n\";\n            string includeSource2 = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<RuleSet Name=\"\"New Rule Set3\"\" Description=\"\"Test\"\" ToolsVersion=\"\"12.0\"\">\n  <Rules AnalyzerId=\"\"Microsoft.Analyzers.ManagedCodeAnalysis\"\" RuleNamespace=\"\"Microsoft.Rules.Managed\"\">\n    <Rule Id=\"\"CA2100\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2111\"\" Action=\"\"Warning\"\" />\n    <Rule Id=\"\"CA2119\"\" Action=\"\"None\"\" />\n    <Rule Id=\"\"CA2104\"\" Action=\"\"Error\"\" />\n    <Rule Id=\"\"CA2105\"\" Action=\"\"Warning\"\" />\n  </Rules>\n</RuleSet>\";\n\n            var dir = Temp.CreateDirectory();\n\n            var file = dir.CreateFile(\"a.ruleset\");\n            file.WriteAllText(ruleSetSource);\n\n            var include1 = dir.CreateFile(\"file1.ruleset\");\n            include1.WriteAllText(includeSource1);\n\n            var include2 = dir.CreateFile(\"file2.ruleset\");\n            include2.WriteAllText(includeSource2);\n\n            var includePaths = RuleSet.GetEffectiveIncludesFromFile(file.Path);\n\n            Assert.Equal(expected: 3, actual: includePaths.Length);\n            Assert.Equal(expected: file.Path, actual: includePaths[0]);\n            Assert.Equal(expected: include1.Path, actual: includePaths[1]);\n            Assert.Equal(expected: include2.Path, actual: includePaths[2]);\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 48765,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\CodeAnalysisTest\\CodeAnalysisTest\\CommonCommandLineParserTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\CodeAnalysisTest\\CodeAnalysisTest\\CommonCommandLineParserTests.cs"
  }
]