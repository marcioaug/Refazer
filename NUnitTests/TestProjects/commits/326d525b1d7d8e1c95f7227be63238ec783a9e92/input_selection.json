[
  {
    "Text": "public void Execute(Action operation)",
    "Start": 800,
    "Length": 37,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.TestHelpers\n{\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Utilities;\n    using System.Threading;\n    using System.Threading.Tasks;\n\n    internal class TestSqlAzureExecutionStrategy : IDbExecutionStrategy\n    {\n        private IDbExecutionStrategy azureExecutionStrategy;\n\n        public TestSqlAzureExecutionStrategy()\n        {\n            azureExecutionStrategy = new ExtendedSqlAzureExecutionStrategy();\n        }\n\n        public bool RetriesOnFailure\n        {\n            get\n            {\n                return !FunctionalTestsConfiguration.SuspendExecutionStrategy;\n            }\n        }\n\n        public void Execute(Action operation)\n        {\n            Check.NotNull(operation, \"operation\");\n\n            Execute(\n                () =>\n                {\n                    operation();\n                    return (object)null;\n                });\n        }\n\n        public TResult Execute<TResult>(Func<TResult> operation)\n        {\n            if (!RetriesOnFailure)\n            {\n                return operation();\n            }\n            return azureExecutionStrategy.Execute(operation);\n        }\n\n#if !NET40\n\n        public Task ExecuteAsync(Func<Task> operation, CancellationToken cancellationToken)\n        {\n            if (!RetriesOnFailure)\n            {\n                return operation();\n            }\n            return azureExecutionStrategy.ExecuteAsync(operation, cancellationToken);\n        }\n\n        public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> operation, CancellationToken cancellationToken)\n        {\n            if (!RetriesOnFailure)\n            {\n                return operation();\n            }\n            return azureExecutionStrategy.ExecuteAsync(operation, cancellationToken);\n        }\n\n#endif\n    }\n}\n",
      "Start": 0,
      "Length": 1963,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework9\\EntityFramework\\FunctionalTests.Transitional\\TestHelpers\\TestSqlAzureExecutionStrategy.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework9\\EntityFramework\\FunctionalTests.Transitional\\TestHelpers\\TestSqlAzureExecutionStrategy.cs"
  },
  {
    "Text": "public TResult Execute<TResult>(Func<TResult> operation)",
    "Start": 1074,
    "Length": 56,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.TestHelpers\n{\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Utilities;\n    using System.Threading;\n    using System.Threading.Tasks;\n\n    internal class TestSqlAzureExecutionStrategy : IDbExecutionStrategy\n    {\n        private IDbExecutionStrategy azureExecutionStrategy;\n\n        public TestSqlAzureExecutionStrategy()\n        {\n            azureExecutionStrategy = new ExtendedSqlAzureExecutionStrategy();\n        }\n\n        public bool RetriesOnFailure\n        {\n            get\n            {\n                return !FunctionalTestsConfiguration.SuspendExecutionStrategy;\n            }\n        }\n\n        public void Execute(Action operation)\n        {\n            Check.NotNull(operation, \"operation\");\n\n            Execute(\n                () =>\n                {\n                    operation();\n                    return (object)null;\n                });\n        }\n\n        public TResult Execute<TResult>(Func<TResult> operation)\n        {\n            if (!RetriesOnFailure)\n            {\n                return operation();\n            }\n            return azureExecutionStrategy.Execute(operation);\n        }\n\n#if !NET40\n\n        public Task ExecuteAsync(Func<Task> operation, CancellationToken cancellationToken)\n        {\n            if (!RetriesOnFailure)\n            {\n                return operation();\n            }\n            return azureExecutionStrategy.ExecuteAsync(operation, cancellationToken);\n        }\n\n        public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> operation, CancellationToken cancellationToken)\n        {\n            if (!RetriesOnFailure)\n            {\n                return operation();\n            }\n            return azureExecutionStrategy.ExecuteAsync(operation, cancellationToken);\n        }\n\n#endif\n    }\n}\n",
      "Start": 0,
      "Length": 1963,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework9\\EntityFramework\\FunctionalTests.Transitional\\TestHelpers\\TestSqlAzureExecutionStrategy.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework9\\EntityFramework\\FunctionalTests.Transitional\\TestHelpers\\TestSqlAzureExecutionStrategy.cs"
  }
]