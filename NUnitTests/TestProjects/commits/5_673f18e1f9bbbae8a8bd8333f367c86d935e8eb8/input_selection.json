[
  {
    "Text": "Select(d => d.ToString())",
    "Start": 301936,
    "Length": 25,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Linq;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.CSharp.Test.Utilities;\nusing Microsoft.CodeAnalysis.Test.Utilities;\nusing Roslyn.Test.Utilities;\nusing Xunit;\n\nnamespace Microsoft.CodeAnalysis.CSharp.UnitTests\n{\n    public class ParsingErrorRecoveryTests\n    {\n        private CompilationUnitSyntax ParseTree(string text, CSharpParseOptions options = null)\n        {\n            return SyntaxFactory.ParseCompilationUnit(text, options: options);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterLocation()\n        {\n            var text = \"[assembly: $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeUsingAfterLocation()\n        {\n            var text = \"[assembly: using n;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UsingAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeExternAfterLocation()\n        {\n            var text = \"[assembly: extern alias a;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExternAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeNamespaceAfterLocation()\n        {\n            var text = \"[assembly: namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeClassAfterLocation()\n        {\n            var text = \"[assembly: class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeAttributeAfterLocation()\n        {\n            var text = \"[assembly: [assembly: attr]\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeEOFAfterLocation()\n        {\n            var text = \"[assembly: \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterAttribute()\n        {\n            var text = \"[assembly: a $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterParameterStart()\n        {\n            var text = \"[assembly: a( $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterParameter()\n        {\n            var text = \"[assembly: a(b $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeMissingCommaBetweenParameters()\n        {\n            var text = \"[assembly: a(b c)\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithGarbageBetweenParameters()\n        {\n            var text = \"[assembly: a(b $ c)\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithGarbageBetweenAttributes()\n        {\n            var text = \"[assembly: a $ b\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithUsingAfterParameterStart()\n        {\n            var text = \"[assembly: a( using n;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UsingAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithExternAfterParameterStart()\n        {\n            var text = \"[assembly: a( extern alias n;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExternAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithNamespaceAfterParameterStart()\n        {\n            var text = \"[assembly: a( namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithClassAfterParameterStart()\n        {\n            var text = \"[assembly: a( class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeNamespace()\n        {\n            var text = \"$ namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterNamespace()\n        {\n            var text = \"namespace n { } $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void MultipleSubsequentMisplacedCharactersSingleError1()\n        {\n            var text = \"namespace n { } ,,,,,,,,\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void MultipleSubsequentMisplacedCharactersSingleError2()\n        {\n            var text = \",,,, namespace n { } ,,,,\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageInsideNamespace()\n        {\n            var text = \"namespace n { $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestIncompleteGlobalMembers()\n        {\n            var text = @\"\nasas]\nextern alias A;\nasas\nusing System;\nsadasdasd]\n\n[assembly: foo]\n\nclass C\n{\n}\n\n\n[a]fod;\n[b\";\n            var file = this.ParseTree(text);\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Externs.Count);\n            Assert.Equal(1, file.Usings.Count);\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(3, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[1].Kind());\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[2].Kind());\n        }\n\n        [Fact]\n        public void TestAttributeWithGarbageAfterStart()\n        {\n            var text = \"[ $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithGarbageAfterName()\n        {\n            var text = \"[a $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterBracket()\n        {\n            var text = \"[ class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterName()\n        {\n            var text = \"[a class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterParameterStart()\n        {\n            var text = \"[a( class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterParameter()\n        {\n            var text = \"[a(b class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterParameterAndComma()\n        {\n            var text = \"[a(b, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithCommaAfterParameterStart()\n        {\n            var text = \"[a(, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithCommasAfterParameterStart()\n        {\n            var text = \"[a(,, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithMissingFirstParameter()\n        {\n            var text = \"[a(, b class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestNamespaceWithGarbage()\n        {\n            var text = \"namespace n { $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestNamespaceWithUnexpectedKeyword()\n        {\n            var text = \"namespace n { int }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_NamespaceUnexpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestNamespaceWithUnexpectedBracing()\n        {\n            var text = \"namespace n { { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGlobalNamespaceWithUnexpectedBracingAtEnd()\n        {\n            var text = \"namespace n { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGlobalNamespaceWithUnexpectedBracingAtStart()\n        {\n            var text = \"} namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGlobalNamespaceWithOpenBraceBeforeNamespace()\n        {\n            var text = \"{ namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestPartialNamespace()\n        {\n            var text = \"partial namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_BadModifiersOnNamespace, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterStartOfBaseTypeList()\n        {\n            var text = \"class c : class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterBaseType()\n        {\n            var text = \"class c : t class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterBaseTypeAndComma()\n        {\n            var text = \"class c : t, class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterBaseTypesWithMissingComma()\n        {\n            var text = \"class c : x y class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterStartOfBaseTypeList()\n        {\n            var text = \"class c : $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterBaseType()\n        {\n            var text = \"class c : t $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterBaseTypeAndComma()\n        {\n            var text = \"class c : t, $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterBaseTypesWithMissingComma()\n        {\n            var text = \"class c : x y $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterStartOfBaseTypeList()\n        {\n            var text = \"class c<t> : where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseType()\n        {\n            var text = \"class c<t> : x where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseTypeComma()\n        {\n            var text = \"class c<t> : x, where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseTypes()\n        {\n            var text = \"class c<t> : x, y where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseTypesWithMissingComma()\n        {\n            var text = \"class c<t> : x y where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterStartOfBaseTypeList()\n        {\n            var text = \"class c<t> : { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterBaseType()\n        {\n            var text = \"class c<t> : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterBaseTypeComma()\n        {\n            var text = \"class c<t> : x, { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterBaseTypes()\n        {\n            var text = \"class c<t> : x, y { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestBaseTypesWithMissingComma()\n        {\n            var text = \"class c<t> : x y { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintStart()\n        {\n            var text = \"class c<t> where { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintName()\n        {\n            var text = \"class c<t> where t { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintNameAndColon()\n        {\n            var text = \"class c<t> where t : { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintNameAndTypeAndComma()\n        {\n            var text = \"class c<t> where t : x, { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintStart()\n        {\n            var text = \"class c<t> where where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintName()\n        {\n            var text = \"class c<t> where t where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintNameAndColon()\n        {\n            var text = \"class c<t> where t : where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintNameColonTypeAndComma()\n        {\n            var text = \"class c<t> where t : a, where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintStart()\n        {\n            var text = \"class c<t> where $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintName()\n        {\n            var text = \"class c<t> where t $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintNameAndColon()\n        {\n            var text = \"class c<t> where t : $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintNameColonAndType()\n        {\n            var text = \"class c<t> where t : x $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintNameColonTypeAndComma()\n        {\n            var text = \"class c<t> where t : x, $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterGenericClassNameStart()\n        {\n            var text = \"class c<$> { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterGenericClassNameType()\n        {\n            var text = \"class c<t $> { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, $> { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterGenericClassNameStart()\n        {\n            var text = \"class c< { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterGenericClassNameStart()\n        {\n            var text = \"class c< class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestBaseTypeAfterGenericClassNameStart()\n        {\n            var text = \"class c< : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestBaseTypeAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestBaseTypeAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterGenericClassNameStart()\n        {\n            var text = \"class c< where t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t where t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, where t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestFieldAfterFieldStart()\n        {\n            var text = \"class c { int int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFieldAfterFieldTypeAndName()\n        {\n            var text = \"class c { int x int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFieldAfterFieldTypeNameAndComma()\n        {\n            var text = \"class c { int x, int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldStart()\n        {\n            var text = \"class c { int $ int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeAndName()\n        {\n            var text = \"class c { int x $ int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeNameAndComma()\n        {\n            var text = \"class c { int x, $ int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldStart()\n        {\n            var text = \"class c { int }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldName()\n        {\n            var text = \"class c { int x }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldNameAndComma()\n        {\n            var text = \"class c { int x, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterStart()\n        {\n            var text = \"class c { int m( }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterType()\n        {\n            var text = \"class c { int m(x }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterName()\n        {\n            var text = \"class c { int m(x y}\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterTypeNameAndComma()\n        {\n            var text = \"class c { int m(x y, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameters()\n        {\n            var text = \"class c { int m() }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterStart()\n        {\n            var text = \"class c { int m( $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterType()\n        {\n            var text = \"class c { int m( x $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterTypeAndName()\n        {\n            var text = \"class c { int m( x y $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterTypeNameAndComma()\n        {\n            var text = \"class c { int m( x y, $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterStart()\n        {\n            var text = \"class c { int m( public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterType()\n        {\n            var text = \"class c { int m(x public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterTypeAndName()\n        {\n            var text = \"class c { int m(x y public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterTypeNameAndComma()\n        {\n            var text = \"class c { int m(x y, public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterList()\n        {\n            var text = \"class c { int m(x y) public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodBodyAfterMethodParameterListStart()\n        {\n            var text = \"class c { int m( { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterMethodParameterListStart()\n        {\n            var text = \"class c { int m( ; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstructorBodyAfterConstructorParameterListStart()\n        {\n            var text = \"class c { c( { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.ConstructorDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterDelegateParameterListStart()\n        {\n            var text = \"delegate void d( ;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            var agg = (DelegateDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterStart()\n        {\n            var text = \"class c { int this[ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IndexerNeedsParam, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterType()\n        {\n            var text = \"class c { int this[x }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterName()\n        {\n            var text = \"class c { int this[x y }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterTypeNameAndComma()\n        {\n            var text = \"class c { int this[x y, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameters()\n        {\n            var text = \"class c { int this[x y] }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterStart()\n        {\n            var text = \"class c { int this[ $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IndexerNeedsParam, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterType()\n        {\n            var text = \"class c { int this[ x $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterTypeAndName()\n        {\n            var text = \"class c { int this[ x y $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterTypeNameAndComma()\n        {\n            var text = \"class c { int this[ x y, $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterStart()\n        {\n            var text = \"class c { int this[ public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IndexerNeedsParam, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterType()\n        {\n            var text = \"class c { int this[x public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterTypeAndName()\n        {\n            var text = \"class c { int this[x y public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterTypeNameAndComma()\n        {\n            var text = \"class c { int this[x y, public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterList()\n        {\n            var text = \"class c { int this[x y] public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateStart()\n        {\n            var text = \"delegate\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateType()\n        {\n            var text = \"delegate d\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateName()\n        {\n            var text = \"delegate void d\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterStart()\n        {\n            var text = \"delegate void d(\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterType()\n        {\n            var text = \"delegate void d(t\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterTypeName()\n        {\n            var text = \"delegate void d(t n\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterList()\n        {\n            var text = \"delegate void d(t n)\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterTypeNameAndComma()\n        {\n            var text = \"delegate void d(t n, \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateStart()\n        {\n            var text = \"delegate class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateType()\n        {\n            var text = \"delegate d class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateName()\n        {\n            var text = \"delegate void d class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterStart()\n        {\n            var text = \"delegate void d( class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterType()\n        {\n            var text = \"delegate void d(t class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterTypeName()\n        {\n            var text = \"delegate void d(t n class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterList()\n        {\n            var text = \"delegate void d(t n) class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterTypeNameAndComma()\n        {\n            var text = \"delegate void d(t n, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterStart()\n        {\n            var text = \"delegate void d($);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterType()\n        {\n            var text = \"delegate void d(t $);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterTypeAndName()\n        {\n            var text = \"delegate void d(t n $);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterTypeNameAndComma()\n        {\n            var text = \"delegate void d(t n, $);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterEnumStart()\n        {\n            var text = \"enum e { $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterEnumName()\n        {\n            var text = \"enum e { n $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeEnumName()\n        {\n            var text = \"enum e { $ n }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAferEnumNameAndComma()\n        {\n            var text = \"enum e { n, $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAferEnumNameCommaAndName()\n        {\n            var text = \"enum e { n, n $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenEnumNames()\n        {\n            var text = \"enum e { n, $ n }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenEnumNamesWithMissingComma()\n        {\n            var text = \"enum e { n $ n }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAferEnumNameAndEquals()\n        {\n            var text = \"enum e { n = $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterEnumStart()\n        {\n            var text = \"enum e { \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterEnumName()\n        {\n            var text = \"enum e { n \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterEnumNameAndComma()\n        {\n            var text = \"enum e { n, \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterEnumStart()\n        {\n            var text = \"enum e { class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterEnumName()\n        {\n            var text = \"enum e { n class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterEnumNameAndComma()\n        {\n            var text = \"enum e { n, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFixedFieldRankStart()\n        {\n            var text = \"class c { fixed int x[$]; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ValueExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeFixedFieldRankSize()\n        {\n            var text = \"class c { fixed int x[$ 10]; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFixedFieldRankSize()\n        {\n            var text = \"class c { fixed int x[10 $]; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal(ErrorCode.ERR_SyntaxError, (ErrorCode)file.Errors()[0].Code); //expected comma\n            Assert.Equal(ErrorCode.ERR_UnexpectedCharacter, (ErrorCode)file.Errors()[1].Code); //didn't expect '$'\n            Assert.Equal(ErrorCode.ERR_ValueExpected, (ErrorCode)file.Errors()[2].Code); //expected value after (missing) comma\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeRankStart()\n        {\n            var text = \"class c { int[$] x; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeRankComma()\n        {\n            var text = \"class c { int[,$] x; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeFieldTypeRankComma()\n        {\n            var text = \"class c { int[$,] x; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldRankStart()\n        {\n            var text = \"class c { int[ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldRankComma()\n        {\n            var text = \"class c { int[, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterFieldRankStart()\n        {\n            var text = \"class c { int[ public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterFieldRankComma()\n        {\n            var text = \"class c { int[, public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationStart()\n        {\n            var text = \"class c { void m() { int if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalRankStart()\n        {\n            var text = \"class c { void m() { int [ if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalRankComma()\n        {\n            var text = \"class c { void m() { int [, if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationWithMissingSemicolon()\n        {\n            var text = \"class c { void m() { int a if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationWithCommaAndMissingSemicolon()\n        {\n            var text = \"class c { void m() { int a, if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationEquals()\n        {\n            var text = \"class c { void m() { int a = if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationArrayInitializerStart()\n        {\n            var text = \"class c { void m() { int a = { if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationArrayInitializerExpression()\n        {\n            var text = \"class c { void m() { int a = { e if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationArrayInitializerExpressionAndComma()\n        {\n            var text = \"class c { void m() { int a = { e, if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerStart()\n        {\n            var text = \"class c { void m() { int a = { $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerExpression()\n        {\n            var text = \"class c { void m() { int a = { e $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeLocalDeclarationArrayInitializerExpression()\n        {\n            var text = \"class c { void m() { int a = { $ e }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerExpressionAndComma()\n        {\n            var text = \"class c { void m() { int a = { e, $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerExpressions()\n        {\n            var text = \"class c { void m() { int a = { e, e $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenLocalDeclarationArrayInitializerExpressions()\n        {\n            var text = \"class c { void m() { int a = { e, $ e }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenLocalDeclarationArrayInitializerExpressionsWithMissingComma()\n        {\n            var text = \"class c { void m() { int a = { e $ e }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m($); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodArgument()\n        {\n            var text = \"class c { void m() { m(a $); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeMethodArgument()\n        {\n            var text = \"class c { void m() { m($ a); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeMethodArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a, $); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m(; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterMethodCallArgument()\n        {\n            var text = \"class c { void m() { m(a; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterMethodCallArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a,; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClosingBraceAfterMethodCallArgumentAndCommaWithWhitespace()\n        {\n            var text = \"class c { void m() { m(a,\\t\\t\\n\\t\\t\\t} }\";\n            var file = this.ParseTree(text);\n\n            var md = (file.Members[0] as TypeDeclarationSyntax).Members[0] as MethodDeclarationSyntax;\n            var ie = (md.Body.Statements[0] as ExpressionStatementSyntax).Expression as InvocationExpressionSyntax;\n\n            // whitespace trivia is part of the following '}', not the invocation expression\n            Assert.Equal(\"\", ie.ArgumentList.CloseParenToken.ToFullString());\n            Assert.Equal(\"\\t\\t\\t} \", md.Body.CloseBraceToken.ToFullString());\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m( if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterMethodCallArgument()\n        {\n            var text = \"class c { void m() { m(a if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterMethodCallArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a, if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m( } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterMethodCallArgument()\n        {\n            var text = \"class c { void m() { m(a } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterMethodCallArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a, } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[$]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e $]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[$ e]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e, $]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e,; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[ if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e, if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e, } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterFixedStatementStart()\n        {\n            var text = \"class c { void m() { fixed(t v { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.FixedStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterFixedStatementStart()\n        {\n            var text = \"class c { void m() { fixed(t v; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.FixedStatement, ms.Body.Statements[0].Kind());\n            var diags = file.ErrorsAndWarnings();\n            Assert.Equal(2, diags.Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, diags[0].Code);\n            Assert.Equal((int)ErrorCode.WRN_PossibleMistakenNullStatement, diags[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterFixedStatementType()\n        {\n            var text = \"class c { void m() { fixed(t ) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.FixedStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCatchAfterTryBlockStart()\n        {\n            var text = \"class c { void m() { try { catch { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFinallyAfterTryBlockStart()\n        {\n            var text = \"class c { void m() { try { finally { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFinallyAfterCatchStart()\n        {\n            var text = \"class c { void m() { try { } catch finally { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCatchAfterCatchStart()\n        {\n            var text = \"class c { void m() { try { } catch catch { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TooManyCatches, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestFinallyAfterCatchParameterStart()\n        {\n            var text = \"class c { void m() { try { } catch (t finally { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCatchAfterCatchParameterStart()\n        {\n            var text = \"class c { void m() { try { } catch (t catch { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterCatchStart()\n        {\n            var text = \"class c { void m() { try { } catch } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterCatchParameterStart()\n        {\n            var text = \"class c { void m() { try { } catch(t } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterDoWhileExpressionIndexer()\n        {\n            // this shows that ';' is an exit condition for the expression\n            var text = \"class c { void m() { do { } while(e[; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.DoStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterDoWhileExpressionIndexerStart()\n        {\n            // this shows that ')' is an exit condition for the expression\n            var text = \"class c { void m() { do { } while(e[); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.DoStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterForStatementInitializerStart()\n        {\n            // this shows that ';' is an exit condition for the initializer expression\n            var text = \"class c { void m() { for (a[;;) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterForStatementInitializerStart()\n        {\n            // this shows that '{' is an exit condition for the initializer expression\n            var text = \"class c { void m() { for (a[ { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterForStatementInitializerStart()\n        {\n            // this shows that '}' is an exit condition for the initializer expression\n            var text = \"class c { void m() { for (a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(7, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[4].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[5].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[6].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterForStatementConditionStart()\n        {\n            var text = \"class c { void m() { for (;a[;) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterForStatementConditionStart()\n        {\n            var text = \"class c { void m() { for (;a[ { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterForStatementConditionStart()\n        {\n            var text = \"class c { void m() { for (;a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterForStatementIncrementerStart()\n        {\n            var text = \"class c { void m() { for (;;++a[) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterForStatementIncrementerStart()\n        {\n            var text = \"class c { void m() { for (;;++a[ { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterForStatementIncrementerStart()\n        {\n            var text = \"class c { void m() { for (;;++a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterAnonymousTypeStart()\n        {\n            // empty anonymous type is perfectly legal\n            var text = \"class c { void m() { var x = new {}; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeStart()\n        {\n            var text = \"class c { void m() { var x = new {; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.EqualsToken);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new {a; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new {a =; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMember()\n        {\n            var text = \"class c { void m() { var x = new {a = b; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMemberComma()\n        {\n            var text = \"class c { void m() { var x = new {a = b, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeStart()\n        {\n            var text = \"class c { void m() { var x = new { while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new { a while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new { a = while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMember()\n        {\n            var text = \"class c { void m() { var x = new { a = b while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMemberComma()\n        {\n            var text = \"class c { void m() { var x = new { a = b, while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeStart()\n        {\n            var text = \"class c { void m() { var x = new { $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new { $ a }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new { a $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new { a = $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMember()\n        {\n            var text = \"class c { void m() { var x = new { a = b $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMemberComma()\n        {\n            var text = \"class c { void m() { var x = new { a = b, $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterObjectInitializerStart()\n        {\n            // empty object initializer is perfectly legal\n            var text = \"class c { void m() { var x = new C {}; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerStart()\n        {\n            var text = \"class c { void m() { var x = new C {; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { a; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new C { a =; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMember()\n        {\n            var text = \"class c { void m() { var x = new C { a = b; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMemberComma()\n        {\n            var text = \"class c { void m() { var x = new C { a = b, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerStart()\n        {\n            var text = \"class c { void m() { var x = new C { while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { a while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new C { a = while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMember()\n        {\n            var text = \"class c { void m() { var x = new C { a = b while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMemberComma()\n        {\n            var text = \"class c { void m() { var x = new C { a = b, while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerStart()\n        {\n            var text = \"class c { void m() { var x = new C { $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { $ a }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { a $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new C { a = $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMember()\n        {\n            var text = \"class c { void m() { var x = new C { a = b $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMemberComma()\n        {\n            var text = \"class c { void m() { var x = new C { a = b, $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (Y y, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterUntypedLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (y, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (Y y, while (c) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(6, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[4].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[5].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterUntypedLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (y, while (c) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestPropertyWithNoAccessors()\n        {\n            // this is syntactically valid (even though it will produce a binding error)\n            var text = \"class c { int p { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.False(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(0, pd.AccessorList.Accessors.Count);\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestMethodAfterPropertyStart()\n        {\n            // this is syntactically valid (even though it will produce a binding error)\n            var text = \"class c { int p { int M() {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(0, pd.AccessorList.Accessors.Count);\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterPropertyGet()\n        {\n            var text = \"class c { int p { get int M() {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(1, pd.AccessorList.Accessors.Count);\n            var acc = pd.AccessorList.Accessors[0];\n            Assert.Equal(SyntaxKind.GetAccessorDeclaration, acc.Kind());\n            Assert.NotNull(acc.Keyword);\n            Assert.False(acc.Keyword.IsMissing);\n            Assert.Equal(SyntaxKind.GetKeyword, acc.Keyword.Kind());\n            Assert.Null(acc.Body);\n            Assert.NotNull(acc.SemicolonToken);\n            Assert.True(acc.SemicolonToken.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemiOrLBraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterPropertyGetBrace()\n        {\n            var text = \"class c { int p { get { class d {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(1, pd.AccessorList.Accessors.Count);\n            var acc = pd.AccessorList.Accessors[0];\n            Assert.Equal(SyntaxKind.GetAccessorDeclaration, acc.Kind());\n            Assert.NotNull(acc.Keyword);\n            Assert.False(acc.Keyword.IsMissing);\n            Assert.Equal(SyntaxKind.GetKeyword, acc.Keyword.Kind());\n            Assert.NotNull(acc.Body);\n            Assert.NotNull(acc.Body.OpenBraceToken);\n            Assert.False(acc.Body.OpenBraceToken.IsMissing);\n            Assert.Equal(0, acc.Body.Statements.Count);\n            Assert.NotNull(acc.Body.CloseBraceToken);\n            Assert.True(acc.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(SyntaxKind.None, acc.SemicolonToken.Kind());\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestModifiedMemberAfterPropertyGetBrace()\n        {\n            var text = \"class c { int p { get { public class d {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(2, pd.AccessorList.Accessors.Count);\n            var acc = pd.AccessorList.Accessors[0];\n            Assert.Equal(SyntaxKind.GetAccessorDeclaration, acc.Kind());\n            Assert.NotNull(acc.Keyword);\n            Assert.False(acc.Keyword.IsMissing);\n            Assert.Equal(SyntaxKind.GetKeyword, acc.Keyword.Kind());\n            Assert.NotNull(acc.Body);\n            Assert.NotNull(acc.Body.OpenBraceToken);\n            Assert.False(acc.Body.OpenBraceToken.IsMissing);\n            Assert.Equal(0, acc.Body.Statements.Count);\n            Assert.NotNull(acc.Body.CloseBraceToken);\n            Assert.True(acc.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(SyntaxKind.None, acc.SemicolonToken.Kind());\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_GetOrSetExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestPropertyAccessorMissingOpenBrace()\n        {\n            var text = \"class c { int p { get return 0; } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n\n            var classDecl = (TypeDeclarationSyntax)file.Members[0];\n            var propertyDecl = (PropertyDeclarationSyntax)classDecl.Members[0];\n\n            var accessorDecls = propertyDecl.AccessorList.Accessors;\n            Assert.Equal(1, accessorDecls.Count);\n\n            var getDecl = accessorDecls[0];\n            Assert.Equal(SyntaxKind.GetKeyword, getDecl.Keyword.Kind());\n\n            var getBodyDecl = getDecl.Body;\n            Assert.NotNull(getBodyDecl);\n            Assert.True(getBodyDecl.OpenBraceToken.IsMissing);\n\n            var getBodyStmts = getBodyDecl.Statements;\n            Assert.Equal(1, getBodyStmts.Count);\n            Assert.Equal(SyntaxKind.ReturnKeyword, getBodyStmts[0].GetFirstToken().Kind());\n            Assert.False(getBodyStmts[0].ContainsDiagnostics);\n\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal(ErrorCode.ERR_SemiOrLBraceExpected, (ErrorCode)file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestPropertyAccessorsWithoutBodiesOrSemicolons()\n        {\n            var text = \"class c { int p { get set } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n\n            var classDecl = (TypeDeclarationSyntax)file.Members[0];\n            var propertyDecl = (PropertyDeclarationSyntax)classDecl.Members[0];\n\n            var accessorDecls = propertyDecl.AccessorList.Accessors;\n            Assert.Equal(2, accessorDecls.Count);\n\n            var getDecl = accessorDecls[0];\n            Assert.Equal(SyntaxKind.GetKeyword, getDecl.Keyword.Kind());\n            Assert.Null(getDecl.Body);\n            Assert.True(getDecl.SemicolonToken.IsMissing);\n\n            var setDecl = accessorDecls[1];\n            Assert.Equal(SyntaxKind.SetKeyword, setDecl.Keyword.Kind());\n            Assert.Null(setDecl.Body);\n            Assert.True(setDecl.SemicolonToken.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal(ErrorCode.ERR_SemiOrLBraceExpected, (ErrorCode)file.Errors()[0].Code);\n            Assert.Equal(ErrorCode.ERR_SemiOrLBraceExpected, (ErrorCode)file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterOrderingStart()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.False(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterOrderingExpression()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.False(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterOrderingExpressionAndComma()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.False(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(2, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n            Assert.NotNull(oc.Orderings[1].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            nm = (IdentifierNameSyntax)oc.Orderings[1].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestMemberAfterOrderingStart()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby public int Foo; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.True(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMemberAfterOrderingExpression()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e public int Foo; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.True(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMemberAfterOrderingExpressionAndComma()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e, public int Foo; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.True(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(2, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n            Assert.NotNull(oc.Orderings[1].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            nm = (IdentifierNameSyntax)oc.Orderings[1].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void PartialInVariableDecl()\n        {\n            var text = \"class C1 { void M1() { int x = 1, partial class y = 2; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n\n            var item1 = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(\"C1\", item1.Identifier.ToString());\n            Assert.False(item1.OpenBraceToken.IsMissing);\n            Assert.Equal(2, item1.Members.Count);\n            Assert.False(item1.CloseBraceToken.IsMissing);\n\n            var subitem1 = (MethodDeclarationSyntax)item1.Members[0];\n            Assert.Equal(SyntaxKind.MethodDeclaration, subitem1.Kind());\n            Assert.NotNull(subitem1.Body);\n            Assert.False(subitem1.Body.OpenBraceToken.IsMissing);\n            Assert.True(subitem1.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, subitem1.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, subitem1.Body.Statements[0].Kind());\n            var decl = (LocalDeclarationStatementSyntax)subitem1.Body.Statements[0];\n            Assert.True(decl.SemicolonToken.IsMissing);\n            Assert.Equal(2, decl.Declaration.Variables.Count);\n            Assert.Equal(\"x\", decl.Declaration.Variables[0].Identifier.ToString());\n            Assert.True(decl.Declaration.Variables[1].Identifier.IsMissing);\n            Assert.Equal(3, subitem1.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, subitem1.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, subitem1.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, subitem1.Errors()[2].Code);\n\n            var subitem2 = (TypeDeclarationSyntax)item1.Members[1];\n            Assert.Equal(SyntaxKind.ClassDeclaration, item1.Members[1].Kind());\n            Assert.Equal(\"y\", subitem2.Identifier.ToString());\n            Assert.Equal(SyntaxKind.PartialKeyword, subitem2.Modifiers[0].ContextualKind());\n            Assert.True(subitem2.OpenBraceToken.IsMissing);\n            Assert.True(subitem2.CloseBraceToken.IsMissing);\n            Assert.Equal(3, subitem2.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, subitem2.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, subitem2.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, subitem2.Errors()[2].Code);\n        }\n\n        [WorkItem(905394, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestThisKeywordInIncompleteLambdaArgumentList()\n        {\n            var text = @\"public class Test\n                         {\n                             public void Foo()\n                             {\n                                 var x = ((x, this\n                             }\n                         }\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(906986, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestIncompleteAttribute()\n        {\n            var text = @\"    [type: F\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(908952, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestNegAttributeOnTypeParameter()\n        {\n            var text = @\"    \n                            public class B\n                            {\n                                void M()\n                                {\n                                    I<[Test] int> I1=new I<[Test] int>();\n                                }\n                            } \n                        \";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(918947, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestAtKeywordAsLocalOrParameter()\n        {\n            var text = @\"\nclass A\n{\n  public void M()\n  {\n    int @int = 0;\n    if (@int == 1)\n    {\n      @int = 0;\n    }\n    MM(@int);\n  }\n  public void MM(int n) { }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.False(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(918947, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestAtKeywordAsTypeNames()\n        {\n            var text = @\"namespace @namespace\n{\n    class C1 { }\n    class @class : C1 { }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.False(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(919418, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestNegDefaultAsLambdaParameter()\n        {\n            var text = @\"class C\n{\n    delegate T Func<T>();\n    delegate T Func<A0, T>(A0 a0);\n    delegate T Func<A0, A1, T>(A0 a0, A1 a1);\n    delegate T Func<A0, A1, A2, A3, T>(A0 a0, A1 a1, A2 a2, A3 a3);\n\n    static void X()\n    {\n        // Func<int,int> f1      = (int @in) => 1;              // ok: @Keyword as parameter name\n        Func<int,int> f2      = (int where, int from) => 1;  // ok: contextual keyword as parameter name\n        Func<int,int> f3      = (int default) => 1;          // err: Keyword as parameter name\n    }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [Fact]\n        public void TestEmptyUsingDirective()\n        {\n            var text = @\"using;\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n\n            var usings = file.Usings;\n            Assert.Equal(1, usings.Count);\n            Assert.True(usings[0].Name.IsMissing);\n        }\n\n        [Fact]\n        public void TestNumericLiteralInUsingDirective()\n        {\n            var text = @\"using 10;\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n\n            var usings = file.Usings;\n            Assert.Equal(1, usings.Count);\n            Assert.True(usings[0].Name.IsMissing);\n        }\n\n        [Fact]\n        public void TestNamespaceDeclarationInUsingDirective()\n        {\n            var text = @\"using namespace Foo\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpectedKW, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n\n            var usings = file.Usings;\n            Assert.Equal(1, usings.Count);\n            Assert.True(usings[0].Name.IsMissing);\n\n            var members = file.Members;\n            Assert.Equal(1, members.Count);\n\n            var namespaceDeclaration = members[0];\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, namespaceDeclaration.Kind());\n            Assert.False(((NamespaceDeclarationSyntax)namespaceDeclaration).Name.IsMissing);\n        }\n\n        [Fact]\n        public void TestContextualKeywordAsFromVariable()\n        {\n            var text = @\"\nclass C \n{ \n    int x = from equals in new[] { 1, 2, 3 } select 1;\n}\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n        }\n\n        [WorkItem(537210, \"DevDiv\")]\n        [Fact]\n        public void RegressException4UseValueInAccessor()\n        {\n            var text = @\"public class MyClass\n{\n    public int MyProp\n    {\n        set { int value = 0; } // CS0136\n    }\n    D x;\n    int this[int n]\n    {\n        get { return 0; }\n        set { x = (value) => { value++; }; }  // CS0136\n    }\n\n    public delegate void D(int n);\n    public event D MyEvent\n    {\n        add { object value = null; } // CS0136\n        remove { }\n    }\n}\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            // Assert.True(file.ContainsDiagnostics); // CS0136 is not parser error\n        }\n\n        [WorkItem(931315, \"DevDiv/Personal\")]\n        [Fact]\n        public void RegressException4InvalidOperator()\n        {\n            var text = @\"class A \n{\n  public static int operator &&(A a) // CS1019\n  {    return 0;   }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(931316, \"DevDiv/Personal\")]\n        [Fact]\n        public void RegressNoError4NoOperator()\n        {\n            var text = @\"class A \n{\n  public static A operator (A a) // CS1019\n  {    return a;   }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(537214, \"DevDiv\")]\n        [Fact]\n        public void RegressWarning4UseContextKeyword()\n        {\n            var text = @\"class TestClass\n{\n    int partial { get; set; }\n    static int Main()\n    {\n        TestClass tc = new TestClass();\n        tc.partial = 0;\n        return 0;\n    }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.False(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(537150, \"DevDiv\")]\n        [Fact]\n        public void ParseStartOfAccessor()\n        {\n            var text = @\"class Program\n{\n  int this[string s]\n  {\n    g\n  }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_GetOrSetExpected, file.Errors()[0].Code);\n        }\n\n        [WorkItem(536050, \"DevDiv\")]\n        [Fact]\n        public void ParseMethodWithConstructorInitializer()\n        {\n            //someone has a typo in the name of their ctor - parse it as a method, but accept the initializer \n            var text = @\"\nclass C\n{\n  CTypo() : base() {\n     //body\n  }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_MemberNeedsType, file.Errors()[0].Code); //for the missing 'void'\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code); //colon is unexpected\n\n            // CONSIDER: Dev10 actually gives 'CS1002: ; expected', because it thinks you were trying to\n            // specify a method without a body.  This is a little silly, since we already know the method\n            // isn't abstract.  It might be reasonable to say that an open brace was expected though.\n\n            var classDecl = file.ChildNodesAndTokens()[0];\n            Assert.Equal(SyntaxKind.ClassDeclaration, classDecl.Kind());\n\n            var methodDecl = classDecl.ChildNodesAndTokens()[3];\n            Assert.Equal(SyntaxKind.MethodDeclaration, methodDecl.Kind()); //not ConstructorDeclaration\n            Assert.True(methodDecl.ContainsDiagnostics);\n\n            var methodBody = methodDecl.ChildNodesAndTokens()[3];\n            Assert.Equal(SyntaxKind.Block, methodBody.Kind());\n            Assert.False(methodBody.ContainsDiagnostics);\n        }\n\n        [WorkItem(537157, \"DevDiv\")]\n        [Fact]\n        public void MissingInternalNode()\n        {\n            var text = @\"[1]\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n\n            var incompleteMemberDecl = file.ChildNodesAndTokens()[0];\n            Assert.Equal(incompleteMemberDecl.Kind(), SyntaxKind.IncompleteMember);\n            Assert.False(incompleteMemberDecl.IsMissing);\n\n            var attributeDecl = incompleteMemberDecl.ChildNodesAndTokens()[0];\n            Assert.Equal(attributeDecl.Kind(), SyntaxKind.AttributeList);\n            Assert.False(attributeDecl.IsMissing);\n\n            var openBracketToken = attributeDecl.ChildNodesAndTokens()[0];\n            Assert.Equal(openBracketToken.Kind(), SyntaxKind.OpenBracketToken);\n            Assert.False(openBracketToken.IsMissing);\n\n            var attribute = attributeDecl.ChildNodesAndTokens()[1];\n            Assert.Equal(attribute.Kind(), SyntaxKind.Attribute);\n            Assert.True(attribute.IsMissing);\n\n            var identifierName = attribute.ChildNodesAndTokens()[0];\n            Assert.Equal(identifierName.Kind(), SyntaxKind.IdentifierName);\n            Assert.True(identifierName.IsMissing);\n\n            var identifierToken = identifierName.ChildNodesAndTokens()[0];\n            Assert.Equal(identifierToken.Kind(), SyntaxKind.IdentifierToken);\n            Assert.True(identifierToken.IsMissing);\n        }\n\n        [WorkItem(538469, \"DevDiv\")]\n        [Fact]\n        public void FromKeyword()\n        {\n            var text = @\"\nusing System.Collections.Generic;\nusing System.Linq;\npublic class QueryExpressionTest\n{\n    public static int Main()\n    {\n        int[] expr1 = new int[] { 1, 2, 3, };\n        IEnumerable<int> query01 = from value in expr1 select value;\n        IEnumerable<int> query02 = from yield in expr1 select yield;\n        IEnumerable<int> query03 = from select in expr1 select select;\n        return 0;\n    }\n}\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code); //expecting item name - found \"select\" keyword\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[1].Code); //expecting expression - found \"select\" keyword\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code); //we inserted a missing semicolon in a place we didn't expect\n        }\n\n        [WorkItem(538971, \"DevDiv\")]\n        [Fact]\n        public void UnclosedGenericInExplicitInterfaceName()\n        {\n            var text = @\"\ninterface I<T>\n{\n    void Foo();\n}\n \nclass C : I<int>\n{\n    void I<.Foo() { }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code); //expecting a type (argument)\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code); //expecting close angle bracket\n        }\n\n        [WorkItem(540788, \"DevDiv\")]\n        [Fact]\n        public void IncompleteForEachStatement()\n        {\n            var text = @\"\npublic class Test\n{\n    public static void Main(string[] args)\n    {\n        foreach\";\n\n            var srcTree = this.ParseTree(text);\n\n            Assert.Equal(text, srcTree.ToFullString());\n            Assert.Equal(\"foreach\", srcTree.GetLastToken().ToString());\n\n            // Get the Foreach Node\n            var foreachNode = srcTree.GetLastToken().Parent;\n\n            // Verify 3 empty nodes are created by the parser for error recovery.\n            Assert.Equal(3, foreachNode.ChildNodes().ToList().Count);\n        }\n\n        [WorkItem(542236, \"DevDiv\")]\n        [Fact]\n        public void InsertOpenBraceBeforeCodes()\n        {\n            var text = @\"{\n        this.I = i;\n    };\n}\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.Equal(\"{\\r\\n\", syntaxTree.GetCompilationUnitRoot().GetLeadingTrivia().Node.ToFullString());\n\n            // The issue (9391) was exhibited while enumerating the diagnostics\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(1,2): error CS1031: Type expected\",\n                \"(1,1): error CS1022: Type or namespace definition, or end-of-file expected\",\n                \"(2,13): error CS1003: Syntax error, '[' expected\",\n                \"(2,13): error CS1001: Identifier expected\",\n                \"(2,16): error CS1001: Identifier expected\",\n                \"(2,19): error CS1003: Syntax error, ',' expected\",\n                \"(2,20): error CS1003: Syntax error, ']' expected\",\n                \"(2,20): error CS1514: { expected\",\n                \"(3,6): error CS1597: Semicolon after method or accessor block is not valid\",\n                \"(4,1): error CS1022: Type or namespace definition, or end-of-file expected\",\n            }));\n        }\n\n        [WorkItem(542352, \"DevDiv\")]\n        [Fact]\n        public void IncompleteTopLevelOperator()\n        {\n            var text = @\"\nfg implicit//\nclass C { }\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            // 9553: Several of the locations were incorrect and one was negative\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                // Error on the return type, because in C# syntax it goes after the operator and implicit/explicit keywords\n                \"(2,1): error CS1553: Declaration is not valid; use '+ operator <dest-type> (...' instead\",\n                // Error on \"implicit\" because there should be an operator keyword\n                \"(2,4): error CS1003: Syntax error, 'operator' expected\",\n                // Error on \"implicit\" because there should be an operator symbol\n                \"(2,4): error CS1037: Overloadable operator expected\",\n                // Missing parameter list and body\n                \"(2,12): error CS1003: Syntax error, '(' expected\",\n                \"(2,12): error CS1026: ) expected\",\n                \"(2,12): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAboveDotMemberAccess()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        Console.WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAbovePointerMemberAccess()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        Console->WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAboveBinaryExpression()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        A + B;\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAboveMemberAccess_MultiLine()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n\n        Console.WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationBeforeMemberAccessOnSameLine()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C Console.WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,18): error CS1003: Syntax error, ',' expected\",\n                \"(6,19): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void EqualsIsNotAmbiguous()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        A = B;\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.Empty(syntaxTree.GetDiagnostics());\n        }\n\n        [WorkItem(547120, \"DevDiv\")]\n        [Fact]\n        public void ColonColonInExplicitInterfaceMember()\n        {\n            var text = @\"\n_ _::this\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            syntaxTree.GetDiagnostics().Verify(\n                // (2,4): error CS1003: Syntax error, '.' expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"::\").WithArguments(\".\", \"::\"),\n                // (3,1): error CS1551: Indexers must have at least one parameter\n                // \n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IndexerNeedsParam, \"\"),\n                // (2,10): error CS1003: Syntax error, '[' expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"\").WithArguments(\"[\", \"\"),\n                // (2,10): error CS1003: Syntax error, ']' expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"\").WithArguments(\"]\", \"\"),\n                // (2,10): error CS1514: { expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_LbraceExpected, \"\"),\n                // (2,10): error CS1513: } expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(649806, \"DevDiv\")]\n        [Fact]\n        public void Repro649806()\n        {\n            var source = \"a b:: /**/\\r\\n\";\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var diags = tree.GetDiagnostics();\n            Assert.DoesNotThrow(() => diags.ToArray());\n            Assert.Equal(1, diags.Count(d => d.Code == (int)ErrorCode.ERR_AliasQualAsExpression));\n        }\n\n        [WorkItem(674564, \"DevDiv\")]\n        [Fact]\n        public void Repro674564()\n        {\n            var source = @\"\nclass C\n{\n    int P { set . } }\n}\";\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var diags = tree.GetDiagnostics();\n            Assert.DoesNotThrow(() => diags.ToArray());\n            diags.Verify(\n                // We see this diagnostic because the accessor has no open brace.\n\n                // (4,17): error CS1043: { or ; expected\n                //     int P { set . } }\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SemiOrLBraceExpected, \".\"),\n\n                // We see this diagnostic because we're trying to skip bad tokens in the block and \n                // the \"expected\" token (i.e. the one we report when we see something that's not a\n                // statement) is close brace.\n                // CONSIDER: This diagnostic isn't great.\n\n                // (4,17): error CS1513: } expected\n                //     int P { set . } }\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \".\"));\n        }\n\n        [WorkItem(680733, \"DevDiv\")]\n        [Fact]\n        public void Repro680733a()\n        {\n            var source = @\"\nclass Test\n{\n    public async Task<in{> Bar()\n    {\n        return 1;\n    }\n}\n\";\n            AssertEqualRoundtrip(source);\n        }\n\n        [WorkItem(680733, \"DevDiv\")]\n        [Fact]\n        public void Repro680733b()\n        {\n            var source = @\"\nusing System;\n\nclass Test\n{\n    public async Task<[Obsolete]in{> Bar()\n    {\n        return 1;\n    }\n}\n\";\n            AssertEqualRoundtrip(source);\n        }\n\n        [WorkItem(680739, \"DevDiv\")]\n        [Fact]\n        public void Repro680739()\n        {\n            var source = @\"a b<c..<using.d\";\n            AssertEqualRoundtrip(source);\n        }\n\n        [WorkItem(675600, \"DevDiv\")]\n        [Fact]\n        public void TestBracesToOperatorDoubleGreaterThan()\n        {\n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator}}\"\"/>\nclass C {}\");\n\n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator{{\"\"/>\nclass C {}\");\n\n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator}=\"\"/>\nclass C {}\");\n            \n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator}}=\"\"/>\nclass C {}\");\n        }\n\n        private void AssertEqualRoundtrip(string source)\n        {\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void GenericPropertyWithMissingIdentifier()\n        {\n            var source = @\"\nclass C : I\n{\n    int I./*missing*/< {\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,22): error CS1001: Identifier expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"<\"),\n                // (4,22): error CS7002: Unexpected use of a generic name\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_UnexpectedGenericName, \"<\"),\n                // (4,24): error CS1003: Syntax error, '>' expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"{\").WithArguments(\">\", \"{\"),\n                // (4,25): error CS1513: } expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"),\n                // (4,25): error CS1513: } expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void GenericEventWithMissingIdentifier()\n        {\n            var source = @\"\nclass C : I\n{\n    event D I./*missing*/< {\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,26): error CS1001: Identifier expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"<\"),\n                // (4,26): error CS1001: Identifier expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"<\"),\n                // (4,28): error CS1003: Syntax error, '>' expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"{\").WithArguments(\">\", \"{\"),\n                // (4,26): error CS7002: Unexpected use of a generic name\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_UnexpectedGenericName, \"<\"),\n                // (4,29): error CS1513: } expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"),\n                // (4,29): error CS1513: } expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void ExplicitImplementationEventWithColonColon()\n        {\n            var source = @\"\nclass C : I\n{\n    event D I::\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,14): error CS0071: An explicit interface implementation of an event must use event accessor syntax\n                //     event D I::\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_ExplicitEventFieldImpl, \"::\"),\n                // (4,14): error CS0687: The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead.\n                //     event D I::\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_AliasQualAsExpression, \"::\"),\n                // (4,16): error CS1513: } expected\n                //     event D I::\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void EventNamedThis()\n        {\n            var source = @\"\nclass C\n{\n    event System.Action this\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,25): error CS1001: Identifier expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"this\"),\n                // (4,29): error CS1514: { expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_LbraceExpected, \"\"),\n                // (4,29): error CS1513: } expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"),\n                // (4,29): error CS1513: } expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(697022, \"DevDiv\")]\n        [Fact]\n        public void GenericEnumWithMissingIdentifiers()\n        {\n            var source = @\"enum\n<//aaaa\nenum\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            Assert.DoesNotThrow(() => tree.GetDiagnostics().ToArray());\n        }\n\n        [WorkItem(703809, \"DevDiv\")]\n        [Fact]\n        public void ReplaceOmittedArrayRankWithMissingIdentifier()\n        {\n            var source = @\"fixed a,b {//aaaa\nstatic\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            Assert.DoesNotThrow(() => tree.GetDiagnostics().ToArray());\n        }\n\n        [WorkItem(716245, \"DevDiv\")]\n        [Fact]\n        public void ManySkippedTokens()\n        {\n            const int numTokens = 500000; // Prohibitively slow without fix.\n            var source = new string(',', numTokens);\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var eofToken = ((CompilationUnitSyntax)tree.GetRoot()).EndOfFileToken;\n            Assert.Equal(numTokens, eofToken.FullWidth);\n            Assert.Equal(numTokens, eofToken.LeadingTrivia.Count); // Confirm that we built a list.\n        }\n\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingOpenBraceForClass()\n        {\n            var source = @\"namespace n\n{\n    class c\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var classDecl = root.DescendantNodes().OfType<ClassDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 9), classDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 13), classDecl.FullSpan);\n        }\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingOpenBraceForStruct()\n        {\n            var source = @\"namespace n\n{\n    struct c : I\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var structDecl = root.DescendantNodes().OfType<StructDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 14), structDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 18), structDecl.FullSpan);\n        }\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingNameForStruct()\n        {\n            var source = @\"namespace n\n{\n    struct : I\n    {\n    }\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var structDecl = root.DescendantNodes().OfType<StructDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 24), structDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 30), structDecl.FullSpan);\n        }\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingNameForClass()\n        {\n            var source = @\"namespace n\n{\n    class\n    {\n    }\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var classDecl = root.DescendantNodes().OfType<ClassDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 19), classDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 25), classDecl.FullSpan);\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 320921,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\Syntax\\Syntax\\Parsing\\ParsingErrorRecoveryTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\Syntax\\Syntax\\Parsing\\ParsingErrorRecoveryTests.cs"
  },
  {
    "Text": "Select(d => d.ToString())",
    "Start": 303198,
    "Length": 25,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nusing System;\nusing System.Linq;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.CSharp.Test.Utilities;\nusing Microsoft.CodeAnalysis.Test.Utilities;\nusing Roslyn.Test.Utilities;\nusing Xunit;\n\nnamespace Microsoft.CodeAnalysis.CSharp.UnitTests\n{\n    public class ParsingErrorRecoveryTests\n    {\n        private CompilationUnitSyntax ParseTree(string text, CSharpParseOptions options = null)\n        {\n            return SyntaxFactory.ParseCompilationUnit(text, options: options);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterLocation()\n        {\n            var text = \"[assembly: $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeUsingAfterLocation()\n        {\n            var text = \"[assembly: using n;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UsingAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeExternAfterLocation()\n        {\n            var text = \"[assembly: extern alias a;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExternAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeNamespaceAfterLocation()\n        {\n            var text = \"[assembly: namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeClassAfterLocation()\n        {\n            var text = \"[assembly: class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeAttributeAfterLocation()\n        {\n            var text = \"[assembly: [assembly: attr]\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeEOFAfterLocation()\n        {\n            var text = \"[assembly: \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterAttribute()\n        {\n            var text = \"[assembly: a $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterParameterStart()\n        {\n            var text = \"[assembly: a( $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeGarbageAfterParameter()\n        {\n            var text = \"[assembly: a(b $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeMissingCommaBetweenParameters()\n        {\n            var text = \"[assembly: a(b c)\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithGarbageBetweenParameters()\n        {\n            var text = \"[assembly: a(b $ c)\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithGarbageBetweenAttributes()\n        {\n            var text = \"[assembly: a $ b\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithUsingAfterParameterStart()\n        {\n            var text = \"[assembly: a( using n;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UsingAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithExternAfterParameterStart()\n        {\n            var text = \"[assembly: a( extern alias n;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(0, file.Members.Count);\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExternAfterElements, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithNamespaceAfterParameterStart()\n        {\n            var text = \"[assembly: a( namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGlobalAttributeWithClassAfterParameterStart()\n        {\n            var text = \"[assembly: a( class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeNamespace()\n        {\n            var text = \"$ namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterNamespace()\n        {\n            var text = \"namespace n { } $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void MultipleSubsequentMisplacedCharactersSingleError1()\n        {\n            var text = \"namespace n { } ,,,,,,,,\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void MultipleSubsequentMisplacedCharactersSingleError2()\n        {\n            var text = \",,,, namespace n { } ,,,,\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageInsideNamespace()\n        {\n            var text = \"namespace n { $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestIncompleteGlobalMembers()\n        {\n            var text = @\"\nasas]\nextern alias A;\nasas\nusing System;\nsadasdasd]\n\n[assembly: foo]\n\nclass C\n{\n}\n\n\n[a]fod;\n[b\";\n            var file = this.ParseTree(text);\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Externs.Count);\n            Assert.Equal(1, file.Usings.Count);\n            Assert.Equal(1, file.AttributeLists.Count);\n            Assert.Equal(3, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[1].Kind());\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[2].Kind());\n        }\n\n        [Fact]\n        public void TestAttributeWithGarbageAfterStart()\n        {\n            var text = \"[ $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithGarbageAfterName()\n        {\n            var text = \"[a $\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterBracket()\n        {\n            var text = \"[ class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterName()\n        {\n            var text = \"[a class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterParameterStart()\n        {\n            var text = \"[a( class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterParameter()\n        {\n            var text = \"[a(b class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithClassAfterParameterAndComma()\n        {\n            var text = \"[a(b, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithCommaAfterParameterStart()\n        {\n            var text = \"[a(, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithCommasAfterParameterStart()\n        {\n            var text = \"[a(,, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestAttributeWithMissingFirstParameter()\n        {\n            var text = \"[a(, b class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestNamespaceWithGarbage()\n        {\n            var text = \"namespace n { $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestNamespaceWithUnexpectedKeyword()\n        {\n            var text = \"namespace n { int }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_NamespaceUnexpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestNamespaceWithUnexpectedBracing()\n        {\n            var text = \"namespace n { { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGlobalNamespaceWithUnexpectedBracingAtEnd()\n        {\n            var text = \"namespace n { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGlobalNamespaceWithUnexpectedBracingAtStart()\n        {\n            var text = \"} namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGlobalNamespaceWithOpenBraceBeforeNamespace()\n        {\n            var text = \"{ namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_EOFExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestPartialNamespace()\n        {\n            var text = \"partial namespace n { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_BadModifiersOnNamespace, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterStartOfBaseTypeList()\n        {\n            var text = \"class c : class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterBaseType()\n        {\n            var text = \"class c : t class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterBaseTypeAndComma()\n        {\n            var text = \"class c : t, class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterBaseTypesWithMissingComma()\n        {\n            var text = \"class c : x y class b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterStartOfBaseTypeList()\n        {\n            var text = \"class c : $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterBaseType()\n        {\n            var text = \"class c : t $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterBaseTypeAndComma()\n        {\n            var text = \"class c : t, $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterBaseTypesWithMissingComma()\n        {\n            var text = \"class c : x y $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterStartOfBaseTypeList()\n        {\n            var text = \"class c<t> : where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseType()\n        {\n            var text = \"class c<t> : x where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseTypeComma()\n        {\n            var text = \"class c<t> : x, where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseTypes()\n        {\n            var text = \"class c<t> : x, y where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestConstraintAfterBaseTypesWithMissingComma()\n        {\n            var text = \"class c<t> : x y where t : b { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterStartOfBaseTypeList()\n        {\n            var text = \"class c<t> : { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterBaseType()\n        {\n            var text = \"class c<t> : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterBaseTypeComma()\n        {\n            var text = \"class c<t> : x, { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterBaseTypes()\n        {\n            var text = \"class c<t> : x, y { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestBaseTypesWithMissingComma()\n        {\n            var text = \"class c<t> : x y { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintStart()\n        {\n            var text = \"class c<t> where { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintName()\n        {\n            var text = \"class c<t> where t { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintNameAndColon()\n        {\n            var text = \"class c<t> where t : { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterConstraintNameAndTypeAndComma()\n        {\n            var text = \"class c<t> where t : x, { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintStart()\n        {\n            var text = \"class c<t> where where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintName()\n        {\n            var text = \"class c<t> where t where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintNameAndColon()\n        {\n            var text = \"class c<t> where t : where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterConstraintNameColonTypeAndComma()\n        {\n            var text = \"class c<t> where t : a, where t : a { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintStart()\n        {\n            var text = \"class c<t> where $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintName()\n        {\n            var text = \"class c<t> where t $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintNameAndColon()\n        {\n            var text = \"class c<t> where t : $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintNameColonAndType()\n        {\n            var text = \"class c<t> where t : x $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterConstraintNameColonTypeAndComma()\n        {\n            var text = \"class c<t> where t : x, $ { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterGenericClassNameStart()\n        {\n            var text = \"class c<$> { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterGenericClassNameType()\n        {\n            var text = \"class c<t $> { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, $> { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterGenericClassNameStart()\n        {\n            var text = \"class c< { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterGenericClassNameStart()\n        {\n            var text = \"class c< class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestBaseTypeAfterGenericClassNameStart()\n        {\n            var text = \"class c< : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestBaseTypeAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestBaseTypeAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterGenericClassNameStart()\n        {\n            var text = \"class c< where t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterGenericClassNameAndType()\n        {\n            var text = \"class c<t where t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstraintAfterGenericClassNameTypeAndComma()\n        {\n            var text = \"class c<t, where t : x { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestFieldAfterFieldStart()\n        {\n            var text = \"class c { int int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFieldAfterFieldTypeAndName()\n        {\n            var text = \"class c { int x int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFieldAfterFieldTypeNameAndComma()\n        {\n            var text = \"class c { int x, int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldStart()\n        {\n            var text = \"class c { int $ int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeAndName()\n        {\n            var text = \"class c { int x $ int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeNameAndComma()\n        {\n            var text = \"class c { int x, $ int y; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldStart()\n        {\n            var text = \"class c { int }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldName()\n        {\n            var text = \"class c { int x }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldNameAndComma()\n        {\n            var text = \"class c { int x, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterStart()\n        {\n            var text = \"class c { int m( }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterType()\n        {\n            var text = \"class c { int m(x }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterName()\n        {\n            var text = \"class c { int m(x y}\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameterTypeNameAndComma()\n        {\n            var text = \"class c { int m(x y, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterMethodParameters()\n        {\n            var text = \"class c { int m() }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterStart()\n        {\n            var text = \"class c { int m( $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterType()\n        {\n            var text = \"class c { int m( x $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterTypeAndName()\n        {\n            var text = \"class c { int m( x y $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodParameterTypeNameAndComma()\n        {\n            var text = \"class c { int m( x y, $ ); }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterStart()\n        {\n            var text = \"class c { int m( public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterType()\n        {\n            var text = \"class c { int m(x public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterTypeAndName()\n        {\n            var text = \"class c { int m(x y public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterTypeNameAndComma()\n        {\n            var text = \"class c { int m(x y, public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterMethodParameterList()\n        {\n            var text = \"class c { int m(x y) public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodBodyAfterMethodParameterListStart()\n        {\n            var text = \"class c { int m( { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterMethodParameterListStart()\n        {\n            var text = \"class c { int m( ; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestConstructorBodyAfterConstructorParameterListStart()\n        {\n            var text = \"class c { c( { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.ConstructorDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterDelegateParameterListStart()\n        {\n            var text = \"delegate void d( ;\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            var agg = (DelegateDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterStart()\n        {\n            var text = \"class c { int this[ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IndexerNeedsParam, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterType()\n        {\n            var text = \"class c { int this[x }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterName()\n        {\n            var text = \"class c { int this[x y }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameterTypeNameAndComma()\n        {\n            var text = \"class c { int this[x y, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterIndexerParameters()\n        {\n            var text = \"class c { int this[x y] }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterStart()\n        {\n            var text = \"class c { int this[ $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IndexerNeedsParam, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterType()\n        {\n            var text = \"class c { int this[ x $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterTypeAndName()\n        {\n            var text = \"class c { int this[ x y $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerParameterTypeNameAndComma()\n        {\n            var text = \"class c { int this[ x y, $ ] { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterStart()\n        {\n            var text = \"class c { int this[ public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IndexerNeedsParam, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterType()\n        {\n            var text = \"class c { int this[x public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterTypeAndName()\n        {\n            var text = \"class c { int this[x y public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterTypeNameAndComma()\n        {\n            var text = \"class c { int this[x y, public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterIndexerParameterList()\n        {\n            var text = \"class c { int this[x y] public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IndexerDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateStart()\n        {\n            var text = \"delegate\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateType()\n        {\n            var text = \"delegate d\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateName()\n        {\n            var text = \"delegate void d\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterStart()\n        {\n            var text = \"delegate void d(\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterType()\n        {\n            var text = \"delegate void d(t\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterTypeName()\n        {\n            var text = \"delegate void d(t n\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterList()\n        {\n            var text = \"delegate void d(t n)\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterDelegateParameterTypeNameAndComma()\n        {\n            var text = \"delegate void d(t n, \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateStart()\n        {\n            var text = \"delegate class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateType()\n        {\n            var text = \"delegate d class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateName()\n        {\n            var text = \"delegate void d class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterStart()\n        {\n            var text = \"delegate void d( class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterType()\n        {\n            var text = \"delegate void d(t class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterTypeName()\n        {\n            var text = \"delegate void d(t n class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterList()\n        {\n            var text = \"delegate void d(t n) class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterDelegateParameterTypeNameAndComma()\n        {\n            var text = \"delegate void d(t n, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterStart()\n        {\n            var text = \"delegate void d($);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterType()\n        {\n            var text = \"delegate void d(t $);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterTypeAndName()\n        {\n            var text = \"delegate void d(t n $);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterDelegateParameterTypeNameAndComma()\n        {\n            var text = \"delegate void d(t n, $);\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.DelegateDeclaration, file.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterEnumStart()\n        {\n            var text = \"enum e { $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterEnumName()\n        {\n            var text = \"enum e { n $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeEnumName()\n        {\n            var text = \"enum e { $ n }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAferEnumNameAndComma()\n        {\n            var text = \"enum e { n, $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAferEnumNameCommaAndName()\n        {\n            var text = \"enum e { n, n $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenEnumNames()\n        {\n            var text = \"enum e { n, $ n }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenEnumNamesWithMissingComma()\n        {\n            var text = \"enum e { n $ n }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAferEnumNameAndEquals()\n        {\n            var text = \"enum e { n = $ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterEnumStart()\n        {\n            var text = \"enum e { \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterEnumName()\n        {\n            var text = \"enum e { n \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEOFAfterEnumNameAndComma()\n        {\n            var text = \"enum e { n, \";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterEnumStart()\n        {\n            var text = \"enum e { class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterEnumName()\n        {\n            var text = \"enum e { n class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterEnumNameAndComma()\n        {\n            var text = \"enum e { n, class c { }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Members.Count);\n            Assert.Equal(SyntaxKind.EnumDeclaration, file.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFixedFieldRankStart()\n        {\n            var text = \"class c { fixed int x[$]; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ValueExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeFixedFieldRankSize()\n        {\n            var text = \"class c { fixed int x[$ 10]; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFixedFieldRankSize()\n        {\n            var text = \"class c { fixed int x[10 $]; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal(ErrorCode.ERR_SyntaxError, (ErrorCode)file.Errors()[0].Code); //expected comma\n            Assert.Equal(ErrorCode.ERR_UnexpectedCharacter, (ErrorCode)file.Errors()[1].Code); //didn't expect '$'\n            Assert.Equal(ErrorCode.ERR_ValueExpected, (ErrorCode)file.Errors()[2].Code); //expected value after (missing) comma\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeRankStart()\n        {\n            var text = \"class c { int[$] x; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterFieldTypeRankComma()\n        {\n            var text = \"class c { int[,$] x; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeFieldTypeRankComma()\n        {\n            var text = \"class c { int[$,] x; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldRankStart()\n        {\n            var text = \"class c { int[ }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestEndBraceAfterFieldRankComma()\n        {\n            var text = \"class c { int[, }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterFieldRankStart()\n        {\n            var text = \"class c { int[ public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterFieldRankComma()\n        {\n            var text = \"class c { int[, public void m() { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.IncompleteMember, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationStart()\n        {\n            var text = \"class c { void m() { int if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalRankStart()\n        {\n            var text = \"class c { void m() { int [ if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalRankComma()\n        {\n            var text = \"class c { void m() { int [, if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationWithMissingSemicolon()\n        {\n            var text = \"class c { void m() { int a if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationWithCommaAndMissingSemicolon()\n        {\n            var text = \"class c { void m() { int a, if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationEquals()\n        {\n            var text = \"class c { void m() { int a = if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationArrayInitializerStart()\n        {\n            var text = \"class c { void m() { int a = { if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationArrayInitializerExpression()\n        {\n            var text = \"class c { void m() { int a = { e if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLocalDeclarationArrayInitializerExpressionAndComma()\n        {\n            var text = \"class c { void m() { int a = { e, if (x) y(); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerStart()\n        {\n            var text = \"class c { void m() { int a = { $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerExpression()\n        {\n            var text = \"class c { void m() { int a = { e $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeLocalDeclarationArrayInitializerExpression()\n        {\n            var text = \"class c { void m() { int a = { $ e }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerExpressionAndComma()\n        {\n            var text = \"class c { void m() { int a = { e, $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterLocalDeclarationArrayInitializerExpressions()\n        {\n            var text = \"class c { void m() { int a = { e, e $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenLocalDeclarationArrayInitializerExpressions()\n        {\n            var text = \"class c { void m() { int a = { e, $ e }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBetweenLocalDeclarationArrayInitializerExpressionsWithMissingComma()\n        {\n            var text = \"class c { void m() { int a = { e $ e }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m($); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterMethodArgument()\n        {\n            var text = \"class c { void m() { m(a $); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeMethodArgument()\n        {\n            var text = \"class c { void m() { m($ a); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeMethodArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a, $); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m(; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterMethodCallArgument()\n        {\n            var text = \"class c { void m() { m(a; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterMethodCallArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a,; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClosingBraceAfterMethodCallArgumentAndCommaWithWhitespace()\n        {\n            var text = \"class c { void m() { m(a,\\t\\t\\n\\t\\t\\t} }\";\n            var file = this.ParseTree(text);\n\n            var md = (file.Members[0] as TypeDeclarationSyntax).Members[0] as MethodDeclarationSyntax;\n            var ie = (md.Body.Statements[0] as ExpressionStatementSyntax).Expression as InvocationExpressionSyntax;\n\n            // whitespace trivia is part of the following '}', not the invocation expression\n            Assert.Equal(\"\", ie.ArgumentList.CloseParenToken.ToFullString());\n            Assert.Equal(\"\\t\\t\\t} \", md.Body.CloseBraceToken.ToFullString());\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m( if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterMethodCallArgument()\n        {\n            var text = \"class c { void m() { m(a if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterMethodCallArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a, if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterMethodCallStart()\n        {\n            var text = \"class c { void m() { m( } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterMethodCallArgument()\n        {\n            var text = \"class c { void m() { m(a } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterMethodCallArgumentAndComma()\n        {\n            var text = \"class c { void m() { m(a, } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.InvocationExpression, es.Expression.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[$]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e $]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[$ e]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e, $]; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e,; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[ if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e, if(e) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.IfStatement, ms.Body.Statements[1].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterIndexerStart()\n        {\n            var text = \"class c { void m() { ++a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterIndexerArgument()\n        {\n            var text = \"class c { void m() { ++a[e } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterIndexerArgumentAndComma()\n        {\n            var text = \"class c { void m() { ++a[e, } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ExpressionStatement, ms.Body.Statements[0].Kind());\n            var es = (ExpressionStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(SyntaxKind.PreIncrementExpression, es.Expression.Kind());\n            Assert.Equal(SyntaxKind.ElementAccessExpression, ((PrefixUnaryExpressionSyntax)es.Expression).Operand.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterFixedStatementStart()\n        {\n            var text = \"class c { void m() { fixed(t v { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.FixedStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterFixedStatementStart()\n        {\n            var text = \"class c { void m() { fixed(t v; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.FixedStatement, ms.Body.Statements[0].Kind());\n            var diags = file.ErrorsAndWarnings();\n            Assert.Equal(2, diags.Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, diags[0].Code);\n            Assert.Equal((int)ErrorCode.WRN_PossibleMistakenNullStatement, diags[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterFixedStatementType()\n        {\n            var text = \"class c { void m() { fixed(t ) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.FixedStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCatchAfterTryBlockStart()\n        {\n            var text = \"class c { void m() { try { catch { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFinallyAfterTryBlockStart()\n        {\n            var text = \"class c { void m() { try { finally { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestFinallyAfterCatchStart()\n        {\n            var text = \"class c { void m() { try { } catch finally { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCatchAfterCatchStart()\n        {\n            var text = \"class c { void m() { try { } catch catch { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_TooManyCatches, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestFinallyAfterCatchParameterStart()\n        {\n            var text = \"class c { void m() { try { } catch (t finally { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCatchAfterCatchParameterStart()\n        {\n            var text = \"class c { void m() { try { } catch (t catch { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterCatchStart()\n        {\n            var text = \"class c { void m() { try { } catch } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterCatchParameterStart()\n        {\n            var text = \"class c { void m() { try { } catch(t } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.TryStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemiColonAfterDoWhileExpressionIndexer()\n        {\n            // this shows that ';' is an exit condition for the expression\n            var text = \"class c { void m() { do { } while(e[; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.DoStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterDoWhileExpressionIndexerStart()\n        {\n            // this shows that ')' is an exit condition for the expression\n            var text = \"class c { void m() { do { } while(e[); } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.DoStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterForStatementInitializerStart()\n        {\n            // this shows that ';' is an exit condition for the initializer expression\n            var text = \"class c { void m() { for (a[;;) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterForStatementInitializerStart()\n        {\n            // this shows that '{' is an exit condition for the initializer expression\n            var text = \"class c { void m() { for (a[ { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterForStatementInitializerStart()\n        {\n            // this shows that '}' is an exit condition for the initializer expression\n            var text = \"class c { void m() { for (a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(7, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[4].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[5].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[6].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterForStatementConditionStart()\n        {\n            var text = \"class c { void m() { for (;a[;) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterForStatementConditionStart()\n        {\n            var text = \"class c { void m() { for (;a[ { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterForStatementConditionStart()\n        {\n            var text = \"class c { void m() { for (;a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestCloseParenAfterForStatementIncrementerStart()\n        {\n            var text = \"class c { void m() { for (;;++a[) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestOpenBraceAfterForStatementIncrementerStart()\n        {\n            var text = \"class c { void m() { for (;;++a[ { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterForStatementIncrementerStart()\n        {\n            var text = \"class c { void m() { for (;;++a[ } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.ForStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterAnonymousTypeStart()\n        {\n            // empty anonymous type is perfectly legal\n            var text = \"class c { void m() { var x = new {}; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeStart()\n        {\n            var text = \"class c { void m() { var x = new {; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.EqualsToken);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new {a; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new {a =; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMember()\n        {\n            var text = \"class c { void m() { var x = new {a = b; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterAnonymousTypeMemberComma()\n        {\n            var text = \"class c { void m() { var x = new {a = b, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeStart()\n        {\n            var text = \"class c { void m() { var x = new { while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new { a while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new { a = while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMember()\n        {\n            var text = \"class c { void m() { var x = new { a = b while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterAnonymousTypeMemberComma()\n        {\n            var text = \"class c { void m() { var x = new { a = b, while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeStart()\n        {\n            var text = \"class c { void m() { var x = new { $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new { $ a }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMemberStart()\n        {\n            var text = \"class c { void m() { var x = new { a $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new { a = $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMember()\n        {\n            var text = \"class c { void m() { var x = new { a = b $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterAnonymousTypeMemberComma()\n        {\n            var text = \"class c { void m() { var x = new { a = b, $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.AnonymousObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestCloseBraceAfterObjectInitializerStart()\n        {\n            // empty object initializer is perfectly legal\n            var text = \"class c { void m() { var x = new C {}; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerStart()\n        {\n            var text = \"class c { void m() { var x = new C {; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { a; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new C { a =; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMember()\n        {\n            var text = \"class c { void m() { var x = new C { a = b; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterObjectInitializerMemberComma()\n        {\n            var text = \"class c { void m() { var x = new C { a = b, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerStart()\n        {\n            var text = \"class c { void m() { var x = new C { while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { a while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new C { a = while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMember()\n        {\n            var text = \"class c { void m() { var x = new C { a = b while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterObjectInitializerMemberComma()\n        {\n            var text = \"class c { void m() { var x = new C { a = b, while (x) {} } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerStart()\n        {\n            var text = \"class c { void m() { var x = new C { $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageBeforeObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { $ a }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMemberStart()\n        {\n            var text = \"class c { void m() { var x = new C { a $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMemberEquals()\n        {\n            var text = \"class c { void m() { var x = new C { a = $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMember()\n        {\n            var text = \"class c { void m() { var x = new C { a = b $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestGarbageAfterObjectInitializerMemberComma()\n        {\n            var text = \"class c { void m() { var x = new C { a = b, $ }; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ObjectCreationExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (Y y, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterUntypedLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (y, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(1, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (Y y, while (c) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(6, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[4].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[5].Code);\n        }\n\n        [Fact]\n        public void TestStatementAfterUntypedLambdaParameter()\n        {\n            var text = \"class c { void m() { var x = (y, while (c) { } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var ms = (MethodDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(ms.Body);\n            Assert.Equal(2, ms.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, ms.Body.Statements[0].Kind());\n            Assert.Equal(SyntaxKind.WhileStatement, ms.Body.Statements[1].Kind());\n            var ds = (LocalDeclarationStatementSyntax)ms.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotEqual(SyntaxKind.None, ds.Declaration.Variables[0].Initializer.EqualsToken.Kind());\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.ParenthesizedLambdaExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            Assert.Equal(5, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_CloseParenExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[3].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[4].Code);\n        }\n\n        [Fact]\n        public void TestPropertyWithNoAccessors()\n        {\n            // this is syntactically valid (even though it will produce a binding error)\n            var text = \"class c { int p { } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.False(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(0, pd.AccessorList.Accessors.Count);\n            Assert.Equal(0, file.Errors().Length);\n        }\n\n        [Fact]\n        public void TestMethodAfterPropertyStart()\n        {\n            // this is syntactically valid (even though it will produce a binding error)\n            var text = \"class c { int p { int M() {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(0, pd.AccessorList.Accessors.Count);\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestMethodAfterPropertyGet()\n        {\n            var text = \"class c { int p { get int M() {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(1, pd.AccessorList.Accessors.Count);\n            var acc = pd.AccessorList.Accessors[0];\n            Assert.Equal(SyntaxKind.GetAccessorDeclaration, acc.Kind());\n            Assert.NotNull(acc.Keyword);\n            Assert.False(acc.Keyword.IsMissing);\n            Assert.Equal(SyntaxKind.GetKeyword, acc.Keyword.Kind());\n            Assert.Null(acc.Body);\n            Assert.NotNull(acc.SemicolonToken);\n            Assert.True(acc.SemicolonToken.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_SemiOrLBraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestClassAfterPropertyGetBrace()\n        {\n            var text = \"class c { int p { get { class d {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(1, pd.AccessorList.Accessors.Count);\n            var acc = pd.AccessorList.Accessors[0];\n            Assert.Equal(SyntaxKind.GetAccessorDeclaration, acc.Kind());\n            Assert.NotNull(acc.Keyword);\n            Assert.False(acc.Keyword.IsMissing);\n            Assert.Equal(SyntaxKind.GetKeyword, acc.Keyword.Kind());\n            Assert.NotNull(acc.Body);\n            Assert.NotNull(acc.Body.OpenBraceToken);\n            Assert.False(acc.Body.OpenBraceToken.IsMissing);\n            Assert.Equal(0, acc.Body.Statements.Count);\n            Assert.NotNull(acc.Body.CloseBraceToken);\n            Assert.True(acc.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(SyntaxKind.None, acc.SemicolonToken.Kind());\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestModifiedMemberAfterPropertyGetBrace()\n        {\n            var text = \"class c { int p { get { public class d {} }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.PropertyDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.ClassDeclaration, agg.Members[1].Kind());\n            var pd = (PropertyDeclarationSyntax)agg.Members[0];\n            Assert.NotNull(pd.AccessorList);\n            Assert.NotNull(pd.AccessorList.OpenBraceToken);\n            Assert.False(pd.AccessorList.OpenBraceToken.IsMissing);\n            Assert.NotNull(pd.AccessorList.CloseBraceToken);\n            Assert.True(pd.AccessorList.CloseBraceToken.IsMissing);\n            Assert.Equal(2, pd.AccessorList.Accessors.Count);\n            var acc = pd.AccessorList.Accessors[0];\n            Assert.Equal(SyntaxKind.GetAccessorDeclaration, acc.Kind());\n            Assert.NotNull(acc.Keyword);\n            Assert.False(acc.Keyword.IsMissing);\n            Assert.Equal(SyntaxKind.GetKeyword, acc.Keyword.Kind());\n            Assert.NotNull(acc.Body);\n            Assert.NotNull(acc.Body.OpenBraceToken);\n            Assert.False(acc.Body.OpenBraceToken.IsMissing);\n            Assert.Equal(0, acc.Body.Statements.Count);\n            Assert.NotNull(acc.Body.CloseBraceToken);\n            Assert.True(acc.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(SyntaxKind.None, acc.SemicolonToken.Kind());\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_GetOrSetExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestPropertyAccessorMissingOpenBrace()\n        {\n            var text = \"class c { int p { get return 0; } } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n\n            var classDecl = (TypeDeclarationSyntax)file.Members[0];\n            var propertyDecl = (PropertyDeclarationSyntax)classDecl.Members[0];\n\n            var accessorDecls = propertyDecl.AccessorList.Accessors;\n            Assert.Equal(1, accessorDecls.Count);\n\n            var getDecl = accessorDecls[0];\n            Assert.Equal(SyntaxKind.GetKeyword, getDecl.Keyword.Kind());\n\n            var getBodyDecl = getDecl.Body;\n            Assert.NotNull(getBodyDecl);\n            Assert.True(getBodyDecl.OpenBraceToken.IsMissing);\n\n            var getBodyStmts = getBodyDecl.Statements;\n            Assert.Equal(1, getBodyStmts.Count);\n            Assert.Equal(SyntaxKind.ReturnKeyword, getBodyStmts[0].GetFirstToken().Kind());\n            Assert.False(getBodyStmts[0].ContainsDiagnostics);\n\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal(ErrorCode.ERR_SemiOrLBraceExpected, (ErrorCode)file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestPropertyAccessorsWithoutBodiesOrSemicolons()\n        {\n            var text = \"class c { int p { get set } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n\n            var classDecl = (TypeDeclarationSyntax)file.Members[0];\n            var propertyDecl = (PropertyDeclarationSyntax)classDecl.Members[0];\n\n            var accessorDecls = propertyDecl.AccessorList.Accessors;\n            Assert.Equal(2, accessorDecls.Count);\n\n            var getDecl = accessorDecls[0];\n            Assert.Equal(SyntaxKind.GetKeyword, getDecl.Keyword.Kind());\n            Assert.Null(getDecl.Body);\n            Assert.True(getDecl.SemicolonToken.IsMissing);\n\n            var setDecl = accessorDecls[1];\n            Assert.Equal(SyntaxKind.SetKeyword, setDecl.Keyword.Kind());\n            Assert.Null(setDecl.Body);\n            Assert.True(setDecl.SemicolonToken.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal(ErrorCode.ERR_SemiOrLBraceExpected, (ErrorCode)file.Errors()[0].Code);\n            Assert.Equal(ErrorCode.ERR_SemiOrLBraceExpected, (ErrorCode)file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterOrderingStart()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.False(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterOrderingExpression()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.False(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[0].Code);\n        }\n\n        [Fact]\n        public void TestSemicolonAfterOrderingExpressionAndComma()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e, ; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(1, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.False(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(2, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n            Assert.NotNull(oc.Orderings[1].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            nm = (IdentifierNameSyntax)oc.Orderings[1].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n        }\n\n        [Fact]\n        public void TestMemberAfterOrderingStart()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby public int Foo; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.True(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void TestMemberAfterOrderingExpression()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e public int Foo; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.True(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(1, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n        }\n\n        [Fact]\n        public void TestMemberAfterOrderingExpressionAndComma()\n        {\n            var text = \"class c { void m() { var q = from x in y orderby e, public int Foo; }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n            var agg = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(2, agg.Members.Count);\n            Assert.Equal(SyntaxKind.MethodDeclaration, agg.Members[0].Kind());\n            Assert.Equal(SyntaxKind.FieldDeclaration, agg.Members[1].Kind());\n            var md = (MethodDeclarationSyntax)agg.Members[0];\n\n            Assert.NotNull(md.Body);\n            Assert.NotNull(md.Body.OpenBraceToken);\n            Assert.False(md.Body.OpenBraceToken.IsMissing);\n            Assert.NotNull(md.Body.CloseBraceToken);\n            Assert.True(md.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, md.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, md.Body.Statements[0].Kind());\n            var ds = (LocalDeclarationStatementSyntax)md.Body.Statements[0];\n            Assert.Equal(1, ds.Declaration.Variables.Count);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer);\n            Assert.NotNull(ds.Declaration.Variables[0].Initializer.Value);\n            Assert.Equal(SyntaxKind.QueryExpression, ds.Declaration.Variables[0].Initializer.Value.Kind());\n            var qx = (QueryExpressionSyntax)ds.Declaration.Variables[0].Initializer.Value;\n            Assert.Equal(1, qx.Body.Clauses.Count);\n            Assert.Equal(SyntaxKind.FromClause, qx.FromClause.Kind());\n            Assert.Equal(SyntaxKind.OrderByClause, qx.Body.Clauses[0].Kind());\n            var oc = (OrderByClauseSyntax)qx.Body.Clauses[0];\n            Assert.NotNull(oc.OrderByKeyword);\n            Assert.False(oc.OrderByKeyword.IsMissing);\n            Assert.Equal(2, oc.Orderings.Count);\n            Assert.NotNull(oc.Orderings[0].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            var nm = (IdentifierNameSyntax)oc.Orderings[0].Expression;\n            Assert.False(nm.IsMissing);\n            Assert.NotNull(oc.Orderings[1].Expression);\n            Assert.Equal(SyntaxKind.IdentifierName, oc.Orderings[0].Expression.Kind());\n            nm = (IdentifierNameSyntax)oc.Orderings[1].Expression;\n            Assert.True(nm.IsMissing);\n\n            Assert.Equal(4, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_ExpectedSelectOrGroup, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[3].Code);\n        }\n\n        [Fact]\n        public void PartialInVariableDecl()\n        {\n            var text = \"class C1 { void M1() { int x = 1, partial class y = 2; } }\";\n            var file = this.ParseTree(text);\n\n            Assert.NotNull(file);\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Members.Count);\n            Assert.Equal(SyntaxKind.ClassDeclaration, file.Members[0].Kind());\n\n            var item1 = (TypeDeclarationSyntax)file.Members[0];\n            Assert.Equal(\"C1\", item1.Identifier.ToString());\n            Assert.False(item1.OpenBraceToken.IsMissing);\n            Assert.Equal(2, item1.Members.Count);\n            Assert.False(item1.CloseBraceToken.IsMissing);\n\n            var subitem1 = (MethodDeclarationSyntax)item1.Members[0];\n            Assert.Equal(SyntaxKind.MethodDeclaration, subitem1.Kind());\n            Assert.NotNull(subitem1.Body);\n            Assert.False(subitem1.Body.OpenBraceToken.IsMissing);\n            Assert.True(subitem1.Body.CloseBraceToken.IsMissing);\n            Assert.Equal(1, subitem1.Body.Statements.Count);\n            Assert.Equal(SyntaxKind.LocalDeclarationStatement, subitem1.Body.Statements[0].Kind());\n            var decl = (LocalDeclarationStatementSyntax)subitem1.Body.Statements[0];\n            Assert.True(decl.SemicolonToken.IsMissing);\n            Assert.Equal(2, decl.Declaration.Variables.Count);\n            Assert.Equal(\"x\", decl.Declaration.Variables[0].Identifier.ToString());\n            Assert.True(decl.Declaration.Variables[1].Identifier.IsMissing);\n            Assert.Equal(3, subitem1.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, subitem1.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, subitem1.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, subitem1.Errors()[2].Code);\n\n            var subitem2 = (TypeDeclarationSyntax)item1.Members[1];\n            Assert.Equal(SyntaxKind.ClassDeclaration, item1.Members[1].Kind());\n            Assert.Equal(\"y\", subitem2.Identifier.ToString());\n            Assert.Equal(SyntaxKind.PartialKeyword, subitem2.Modifiers[0].ContextualKind());\n            Assert.True(subitem2.OpenBraceToken.IsMissing);\n            Assert.True(subitem2.CloseBraceToken.IsMissing);\n            Assert.Equal(3, subitem2.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, subitem2.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, subitem2.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl, subitem2.Errors()[2].Code);\n        }\n\n        [WorkItem(905394, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestThisKeywordInIncompleteLambdaArgumentList()\n        {\n            var text = @\"public class Test\n                         {\n                             public void Foo()\n                             {\n                                 var x = ((x, this\n                             }\n                         }\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(906986, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestIncompleteAttribute()\n        {\n            var text = @\"    [type: F\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(908952, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestNegAttributeOnTypeParameter()\n        {\n            var text = @\"    \n                            public class B\n                            {\n                                void M()\n                                {\n                                    I<[Test] int> I1=new I<[Test] int>();\n                                }\n                            } \n                        \";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(918947, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestAtKeywordAsLocalOrParameter()\n        {\n            var text = @\"\nclass A\n{\n  public void M()\n  {\n    int @int = 0;\n    if (@int == 1)\n    {\n      @int = 0;\n    }\n    MM(@int);\n  }\n  public void MM(int n) { }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.False(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(918947, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestAtKeywordAsTypeNames()\n        {\n            var text = @\"namespace @namespace\n{\n    class C1 { }\n    class @class : C1 { }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.False(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(919418, \"DevDiv/Personal\")]\n        [Fact]\n        public void TestNegDefaultAsLambdaParameter()\n        {\n            var text = @\"class C\n{\n    delegate T Func<T>();\n    delegate T Func<A0, T>(A0 a0);\n    delegate T Func<A0, A1, T>(A0 a0, A1 a1);\n    delegate T Func<A0, A1, A2, A3, T>(A0 a0, A1 a1, A2 a2, A3 a3);\n\n    static void X()\n    {\n        // Func<int,int> f1      = (int @in) => 1;              // ok: @Keyword as parameter name\n        Func<int,int> f2      = (int where, int from) => 1;  // ok: contextual keyword as parameter name\n        Func<int,int> f3      = (int default) => 1;          // err: Keyword as parameter name\n    }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [Fact]\n        public void TestEmptyUsingDirective()\n        {\n            var text = @\"using;\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n\n            var usings = file.Usings;\n            Assert.Equal(1, usings.Count);\n            Assert.True(usings[0].Name.IsMissing);\n        }\n\n        [Fact]\n        public void TestNumericLiteralInUsingDirective()\n        {\n            var text = @\"using 10;\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n\n            var usings = file.Usings;\n            Assert.Equal(1, usings.Count);\n            Assert.True(usings[0].Name.IsMissing);\n        }\n\n        [Fact]\n        public void TestNamespaceDeclarationInUsingDirective()\n        {\n            var text = @\"using namespace Foo\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpectedKW, file.Errors()[0].Code);\n            Assert.Equal((int)ErrorCode.ERR_LbraceExpected, file.Errors()[1].Code);\n            Assert.Equal((int)ErrorCode.ERR_RbraceExpected, file.Errors()[2].Code);\n\n            var usings = file.Usings;\n            Assert.Equal(1, usings.Count);\n            Assert.True(usings[0].Name.IsMissing);\n\n            var members = file.Members;\n            Assert.Equal(1, members.Count);\n\n            var namespaceDeclaration = members[0];\n            Assert.Equal(SyntaxKind.NamespaceDeclaration, namespaceDeclaration.Kind());\n            Assert.False(((NamespaceDeclarationSyntax)namespaceDeclaration).Name.IsMissing);\n        }\n\n        [Fact]\n        public void TestContextualKeywordAsFromVariable()\n        {\n            var text = @\"\nclass C \n{ \n    int x = from equals in new[] { 1, 2, 3 } select 1;\n}\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code);\n        }\n\n        [WorkItem(537210, \"DevDiv\")]\n        [Fact]\n        public void RegressException4UseValueInAccessor()\n        {\n            var text = @\"public class MyClass\n{\n    public int MyProp\n    {\n        set { int value = 0; } // CS0136\n    }\n    D x;\n    int this[int n]\n    {\n        get { return 0; }\n        set { x = (value) => { value++; }; }  // CS0136\n    }\n\n    public delegate void D(int n);\n    public event D MyEvent\n    {\n        add { object value = null; } // CS0136\n        remove { }\n    }\n}\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            // Assert.True(file.ContainsDiagnostics); // CS0136 is not parser error\n        }\n\n        [WorkItem(931315, \"DevDiv/Personal\")]\n        [Fact]\n        public void RegressException4InvalidOperator()\n        {\n            var text = @\"class A \n{\n  public static int operator &&(A a) // CS1019\n  {    return 0;   }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(931316, \"DevDiv/Personal\")]\n        [Fact]\n        public void RegressNoError4NoOperator()\n        {\n            var text = @\"class A \n{\n  public static A operator (A a) // CS1019\n  {    return a;   }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.True(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(537214, \"DevDiv\")]\n        [Fact]\n        public void RegressWarning4UseContextKeyword()\n        {\n            var text = @\"class TestClass\n{\n    int partial { get; set; }\n    static int Main()\n    {\n        TestClass tc = new TestClass();\n        tc.partial = 0;\n        return 0;\n    }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.False(file.ContainsDiagnostics);\n        }\n\n        [WorkItem(537150, \"DevDiv\")]\n        [Fact]\n        public void ParseStartOfAccessor()\n        {\n            var text = @\"class Program\n{\n  int this[string s]\n  {\n    g\n  }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(1, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_GetOrSetExpected, file.Errors()[0].Code);\n        }\n\n        [WorkItem(536050, \"DevDiv\")]\n        [Fact]\n        public void ParseMethodWithConstructorInitializer()\n        {\n            //someone has a typo in the name of their ctor - parse it as a method, but accept the initializer \n            var text = @\"\nclass C\n{\n  CTypo() : base() {\n     //body\n  }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_MemberNeedsType, file.Errors()[0].Code); //for the missing 'void'\n            Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter, file.Errors()[1].Code); //colon is unexpected\n\n            // CONSIDER: Dev10 actually gives 'CS1002: ; expected', because it thinks you were trying to\n            // specify a method without a body.  This is a little silly, since we already know the method\n            // isn't abstract.  It might be reasonable to say that an open brace was expected though.\n\n            var classDecl = file.ChildNodesAndTokens()[0];\n            Assert.Equal(SyntaxKind.ClassDeclaration, classDecl.Kind());\n\n            var methodDecl = classDecl.ChildNodesAndTokens()[3];\n            Assert.Equal(SyntaxKind.MethodDeclaration, methodDecl.Kind()); //not ConstructorDeclaration\n            Assert.True(methodDecl.ContainsDiagnostics);\n\n            var methodBody = methodDecl.ChildNodesAndTokens()[3];\n            Assert.Equal(SyntaxKind.Block, methodBody.Kind());\n            Assert.False(methodBody.ContainsDiagnostics);\n        }\n\n        [WorkItem(537157, \"DevDiv\")]\n        [Fact]\n        public void MissingInternalNode()\n        {\n            var text = @\"[1]\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n\n            var incompleteMemberDecl = file.ChildNodesAndTokens()[0];\n            Assert.Equal(incompleteMemberDecl.Kind(), SyntaxKind.IncompleteMember);\n            Assert.False(incompleteMemberDecl.IsMissing);\n\n            var attributeDecl = incompleteMemberDecl.ChildNodesAndTokens()[0];\n            Assert.Equal(attributeDecl.Kind(), SyntaxKind.AttributeList);\n            Assert.False(attributeDecl.IsMissing);\n\n            var openBracketToken = attributeDecl.ChildNodesAndTokens()[0];\n            Assert.Equal(openBracketToken.Kind(), SyntaxKind.OpenBracketToken);\n            Assert.False(openBracketToken.IsMissing);\n\n            var attribute = attributeDecl.ChildNodesAndTokens()[1];\n            Assert.Equal(attribute.Kind(), SyntaxKind.Attribute);\n            Assert.True(attribute.IsMissing);\n\n            var identifierName = attribute.ChildNodesAndTokens()[0];\n            Assert.Equal(identifierName.Kind(), SyntaxKind.IdentifierName);\n            Assert.True(identifierName.IsMissing);\n\n            var identifierToken = identifierName.ChildNodesAndTokens()[0];\n            Assert.Equal(identifierToken.Kind(), SyntaxKind.IdentifierToken);\n            Assert.True(identifierToken.IsMissing);\n        }\n\n        [WorkItem(538469, \"DevDiv\")]\n        [Fact]\n        public void FromKeyword()\n        {\n            var text = @\"\nusing System.Collections.Generic;\nusing System.Linq;\npublic class QueryExpressionTest\n{\n    public static int Main()\n    {\n        int[] expr1 = new int[] { 1, 2, 3, };\n        IEnumerable<int> query01 = from value in expr1 select value;\n        IEnumerable<int> query02 = from yield in expr1 select yield;\n        IEnumerable<int> query03 = from select in expr1 select select;\n        return 0;\n    }\n}\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n\n            Assert.Equal(3, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected, file.Errors()[0].Code); //expecting item name - found \"select\" keyword\n            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm, file.Errors()[1].Code); //expecting expression - found \"select\" keyword\n            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected, file.Errors()[2].Code); //we inserted a missing semicolon in a place we didn't expect\n        }\n\n        [WorkItem(538971, \"DevDiv\")]\n        [Fact]\n        public void UnclosedGenericInExplicitInterfaceName()\n        {\n            var text = @\"\ninterface I<T>\n{\n    void Foo();\n}\n \nclass C : I<int>\n{\n    void I<.Foo() { }\n}\n\";\n            var file = this.ParseTree(text);\n\n            Assert.Equal(text, file.ToFullString());\n\n            Assert.Equal(2, file.Errors().Length);\n            Assert.Equal((int)ErrorCode.ERR_TypeExpected, file.Errors()[0].Code); //expecting a type (argument)\n            Assert.Equal((int)ErrorCode.ERR_SyntaxError, file.Errors()[1].Code); //expecting close angle bracket\n        }\n\n        [WorkItem(540788, \"DevDiv\")]\n        [Fact]\n        public void IncompleteForEachStatement()\n        {\n            var text = @\"\npublic class Test\n{\n    public static void Main(string[] args)\n    {\n        foreach\";\n\n            var srcTree = this.ParseTree(text);\n\n            Assert.Equal(text, srcTree.ToFullString());\n            Assert.Equal(\"foreach\", srcTree.GetLastToken().ToString());\n\n            // Get the Foreach Node\n            var foreachNode = srcTree.GetLastToken().Parent;\n\n            // Verify 3 empty nodes are created by the parser for error recovery.\n            Assert.Equal(3, foreachNode.ChildNodes().ToList().Count);\n        }\n\n        [WorkItem(542236, \"DevDiv\")]\n        [Fact]\n        public void InsertOpenBraceBeforeCodes()\n        {\n            var text = @\"{\n        this.I = i;\n    };\n}\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.Equal(\"{\\r\\n\", syntaxTree.GetCompilationUnitRoot().GetLeadingTrivia().Node.ToFullString());\n\n            // The issue (9391) was exhibited while enumerating the diagnostics\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(1,2): error CS1031: Type expected\",\n                \"(1,1): error CS1022: Type or namespace definition, or end-of-file expected\",\n                \"(2,13): error CS1003: Syntax error, '[' expected\",\n                \"(2,13): error CS1001: Identifier expected\",\n                \"(2,16): error CS1001: Identifier expected\",\n                \"(2,19): error CS1003: Syntax error, ',' expected\",\n                \"(2,20): error CS1003: Syntax error, ']' expected\",\n                \"(2,20): error CS1514: { expected\",\n                \"(3,6): error CS1597: Semicolon after method or accessor block is not valid\",\n                \"(4,1): error CS1022: Type or namespace definition, or end-of-file expected\",\n            }));\n        }\n\n        [WorkItem(542352, \"DevDiv\")]\n        [Fact]\n        public void IncompleteTopLevelOperator()\n        {\n            var text = @\"\nfg implicit//\nclass C { }\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            // 9553: Several of the locations were incorrect and one was negative\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                // Error on the return type, because in C# syntax it goes after the operator and implicit/explicit keywords\n                \"(2,1): error CS1553: Declaration is not valid; use '+ operator <dest-type> (...' instead\",\n                // Error on \"implicit\" because there should be an operator keyword\n                \"(2,4): error CS1003: Syntax error, 'operator' expected\",\n                // Error on \"implicit\" because there should be an operator symbol\n                \"(2,4): error CS1037: Overloadable operator expected\",\n                // Missing parameter list and body\n                \"(2,12): error CS1003: Syntax error, '(' expected\",\n                \"(2,12): error CS1026: ) expected\",\n                \"(2,12): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAboveDotMemberAccess()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        Console.WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAbovePointerMemberAccess()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        Console->WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAboveBinaryExpression()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        A + B;\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationAboveMemberAccess_MultiLine()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n\n        Console.WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,10): error CS1001: Identifier expected\",\n                \"(6,10): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void IncompleteVariableDeclarationBeforeMemberAccessOnSameLine()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C Console.WriteLine();\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.True(syntaxTree.GetDiagnostics().Select(d => d.ToString()).SequenceEqual(new[] \n            {\n                \"(6,18): error CS1003: Syntax error, ',' expected\",\n                \"(6,19): error CS1002: ; expected\",\n            }));\n        }\n\n        [WorkItem(545647, \"DevDiv\")]\n        [Fact]\n        public void EqualsIsNotAmbiguous()\n        {\n            var text = @\"\nclass C\n{\n    void Main()\n    {\n        C\n        A = B;\n    }\n}\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            Assert.Empty(syntaxTree.GetDiagnostics());\n        }\n\n        [WorkItem(547120, \"DevDiv\")]\n        [Fact]\n        public void ColonColonInExplicitInterfaceMember()\n        {\n            var text = @\"\n_ _::this\n\";\n\n            SyntaxTree syntaxTree = SyntaxFactory.ParseSyntaxTree(text);\n            Assert.Equal(text, syntaxTree.GetCompilationUnitRoot().ToFullString());\n\n            syntaxTree.GetDiagnostics().Verify(\n                // (2,4): error CS1003: Syntax error, '.' expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"::\").WithArguments(\".\", \"::\"),\n                // (3,1): error CS1551: Indexers must have at least one parameter\n                // \n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IndexerNeedsParam, \"\"),\n                // (2,10): error CS1003: Syntax error, '[' expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"\").WithArguments(\"[\", \"\"),\n                // (2,10): error CS1003: Syntax error, ']' expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"\").WithArguments(\"]\", \"\"),\n                // (2,10): error CS1514: { expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_LbraceExpected, \"\"),\n                // (2,10): error CS1513: } expected\n                // _ _::this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(649806, \"DevDiv\")]\n        [Fact]\n        public void Repro649806()\n        {\n            var source = \"a b:: /**/\\r\\n\";\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var diags = tree.GetDiagnostics();\n            Assert.DoesNotThrow(() => diags.ToArray());\n            Assert.Equal(1, diags.Count(d => d.Code == (int)ErrorCode.ERR_AliasQualAsExpression));\n        }\n\n        [WorkItem(674564, \"DevDiv\")]\n        [Fact]\n        public void Repro674564()\n        {\n            var source = @\"\nclass C\n{\n    int P { set . } }\n}\";\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var diags = tree.GetDiagnostics();\n            Assert.DoesNotThrow(() => diags.ToArray());\n            diags.Verify(\n                // We see this diagnostic because the accessor has no open brace.\n\n                // (4,17): error CS1043: { or ; expected\n                //     int P { set . } }\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SemiOrLBraceExpected, \".\"),\n\n                // We see this diagnostic because we're trying to skip bad tokens in the block and \n                // the \"expected\" token (i.e. the one we report when we see something that's not a\n                // statement) is close brace.\n                // CONSIDER: This diagnostic isn't great.\n\n                // (4,17): error CS1513: } expected\n                //     int P { set . } }\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \".\"));\n        }\n\n        [WorkItem(680733, \"DevDiv\")]\n        [Fact]\n        public void Repro680733a()\n        {\n            var source = @\"\nclass Test\n{\n    public async Task<in{> Bar()\n    {\n        return 1;\n    }\n}\n\";\n            AssertEqualRoundtrip(source);\n        }\n\n        [WorkItem(680733, \"DevDiv\")]\n        [Fact]\n        public void Repro680733b()\n        {\n            var source = @\"\nusing System;\n\nclass Test\n{\n    public async Task<[Obsolete]in{> Bar()\n    {\n        return 1;\n    }\n}\n\";\n            AssertEqualRoundtrip(source);\n        }\n\n        [WorkItem(680739, \"DevDiv\")]\n        [Fact]\n        public void Repro680739()\n        {\n            var source = @\"a b<c..<using.d\";\n            AssertEqualRoundtrip(source);\n        }\n\n        [WorkItem(675600, \"DevDiv\")]\n        [Fact]\n        public void TestBracesToOperatorDoubleGreaterThan()\n        {\n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator}}\"\"/>\nclass C {}\");\n\n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator{{\"\"/>\nclass C {}\");\n\n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator}=\"\"/>\nclass C {}\");\n            \n            AssertEqualRoundtrip(\n@\"/// <see cref=\"\"operator}}=\"\"/>\nclass C {}\");\n        }\n\n        private void AssertEqualRoundtrip(string source)\n        {\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void GenericPropertyWithMissingIdentifier()\n        {\n            var source = @\"\nclass C : I\n{\n    int I./*missing*/< {\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,22): error CS1001: Identifier expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"<\"),\n                // (4,22): error CS7002: Unexpected use of a generic name\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_UnexpectedGenericName, \"<\"),\n                // (4,24): error CS1003: Syntax error, '>' expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"{\").WithArguments(\">\", \"{\"),\n                // (4,25): error CS1513: } expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"),\n                // (4,25): error CS1513: } expected\n                //     int I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void GenericEventWithMissingIdentifier()\n        {\n            var source = @\"\nclass C : I\n{\n    event D I./*missing*/< {\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,26): error CS1001: Identifier expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"<\"),\n                // (4,26): error CS1001: Identifier expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"<\"),\n                // (4,28): error CS1003: Syntax error, '>' expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_SyntaxError, \"{\").WithArguments(\">\", \"{\"),\n                // (4,26): error CS7002: Unexpected use of a generic name\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_UnexpectedGenericName, \"<\"),\n                // (4,29): error CS1513: } expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"),\n                // (4,29): error CS1513: } expected\n                //     event D I./*missing*/< {\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void ExplicitImplementationEventWithColonColon()\n        {\n            var source = @\"\nclass C : I\n{\n    event D I::\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,14): error CS0071: An explicit interface implementation of an event must use event accessor syntax\n                //     event D I::\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_ExplicitEventFieldImpl, \"::\"),\n                // (4,14): error CS0687: The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead.\n                //     event D I::\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_AliasQualAsExpression, \"::\"),\n                // (4,16): error CS1513: } expected\n                //     event D I::\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(684816, \"DevDiv\")]\n        [Fact]\n        public void EventNamedThis()\n        {\n            var source = @\"\nclass C\n{\n    event System.Action this\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            tree.GetDiagnostics().Verify(\n                // (4,25): error CS1001: Identifier expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_IdentifierExpected, \"this\"),\n                // (4,29): error CS1514: { expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_LbraceExpected, \"\"),\n                // (4,29): error CS1513: } expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"),\n                // (4,29): error CS1513: } expected\n                //     event System.Action this\n                CSharpTestBase.Diagnostic(ErrorCode.ERR_RbraceExpected, \"\"));\n        }\n\n        [WorkItem(697022, \"DevDiv\")]\n        [Fact]\n        public void GenericEnumWithMissingIdentifiers()\n        {\n            var source = @\"enum\n<//aaaa\nenum\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            Assert.DoesNotThrow(() => tree.GetDiagnostics().ToArray());\n        }\n\n        [WorkItem(703809, \"DevDiv\")]\n        [Fact]\n        public void ReplaceOmittedArrayRankWithMissingIdentifier()\n        {\n            var source = @\"fixed a,b {//aaaa\nstatic\n\";\n\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var toString = tree.GetRoot().ToFullString();\n            Assert.Equal(source, toString);\n            Assert.DoesNotThrow(() => tree.GetDiagnostics().ToArray());\n        }\n\n        [WorkItem(716245, \"DevDiv\")]\n        [Fact]\n        public void ManySkippedTokens()\n        {\n            const int numTokens = 500000; // Prohibitively slow without fix.\n            var source = new string(',', numTokens);\n            var tree = SyntaxFactory.ParseSyntaxTree(source);\n            var eofToken = ((CompilationUnitSyntax)tree.GetRoot()).EndOfFileToken;\n            Assert.Equal(numTokens, eofToken.FullWidth);\n            Assert.Equal(numTokens, eofToken.LeadingTrivia.Count); // Confirm that we built a list.\n        }\n\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingOpenBraceForClass()\n        {\n            var source = @\"namespace n\n{\n    class c\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var classDecl = root.DescendantNodes().OfType<ClassDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 9), classDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 13), classDecl.FullSpan);\n        }\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingOpenBraceForStruct()\n        {\n            var source = @\"namespace n\n{\n    struct c : I\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var structDecl = root.DescendantNodes().OfType<StructDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 14), structDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 18), structDecl.FullSpan);\n        }\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingNameForStruct()\n        {\n            var source = @\"namespace n\n{\n    struct : I\n    {\n    }\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var structDecl = root.DescendantNodes().OfType<StructDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 24), structDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 30), structDecl.FullSpan);\n        }\n\n        [WorkItem(947819, \"DevDiv\")]\n        [Fact]\n        public void MissingNameForClass()\n        {\n            var source = @\"namespace n\n{\n    class\n    {\n    }\n}\n\";\n            var root = SyntaxFactory.ParseSyntaxTree(source).GetRoot();\n\n            Assert.Equal(source, root.ToFullString());\n            var classDecl = root.DescendantNodes().OfType<ClassDeclarationSyntax>().Single();\n            Assert.Equal(new Text.TextSpan(20, 19), classDecl.Span);\n            Assert.Equal(new Text.TextSpan(16, 25), classDecl.FullSpan);\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 320921,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\Syntax\\Syntax\\Parsing\\ParsingErrorRecoveryTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\Syntax\\Syntax\\Parsing\\ParsingErrorRecoveryTests.cs"
  }
]