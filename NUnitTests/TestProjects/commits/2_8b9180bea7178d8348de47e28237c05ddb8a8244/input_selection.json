[
  {
    "Text": "Assert.False(context.Exists);",
    "Start": 22695,
    "Length": 29,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.SqlServer\n{\n    using System.Data.Common;\n    using System.Data.Entity.Core.Common;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Infrastructure.DependencyResolution;\n    using System.Data.Entity.Infrastructure.Interception;\n    using System.Data.Entity.Migrations.History;\n    using System.Data.SqlClient;\n    using System.Reflection;\n    using Xunit;\n\n    public class DatabaseExistsInInitializerTests : FunctionalTestBase, IDisposable\n    {\n        private const string Password = \"Password1\";\n        private const string NormalUser = \"EFGooseWithDbVisibility\";\n        private const string ImpairedUser = \"EFGooseWithoutDbVisibility\";\n        private const string DatabaseWithMigrationHistory = \"MigratoryGoose\";\n        private const string DatabaseWithoutMigrationHistory = \"NonMigratoryGoose\";\n        private const string DatabaseOutOfDate = \"MigratedGoose\";\n\n        public DatabaseExistsInInitializerTests()\n        {\n            EnsureDatabaseExists(DatabaseWithMigrationHistory, drophistoryTable: false, outOfDate: false);\n            EnsureUserExists(DatabaseWithMigrationHistory, NormalUser, allowMasterQuery: true);\n            EnsureUserExists(DatabaseWithMigrationHistory, ImpairedUser, allowMasterQuery: false);\n\n            EnsureDatabaseExists(DatabaseWithoutMigrationHistory, drophistoryTable: true, outOfDate: false);\n            EnsureUserExists(DatabaseWithoutMigrationHistory, NormalUser, allowMasterQuery: true);\n            EnsureUserExists(DatabaseWithoutMigrationHistory, ImpairedUser, allowMasterQuery: false);\n\n            EnsureDatabaseExists(DatabaseOutOfDate, drophistoryTable: false, outOfDate: true);\n            EnsureUserExists(DatabaseOutOfDate, NormalUser, allowMasterQuery: true);\n            EnsureUserExists(DatabaseOutOfDate, ImpairedUser, allowMasterQuery: false);\n\n            MutableResolver.AddResolver<IManifestTokenResolver>(\n                new SingletonDependencyResolver<IManifestTokenResolver>(new BasicManifestTokenResolver()));\n        }\n\n        public void Dispose()\n        {\n            MutableResolver.ClearResolvers();\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info()\n        {\n            ExistsTestNoMaster(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info()\n        {\n            ExistsTestNoMaster(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_no_MigrationHistory()\n        {\n            ExistsTestNoMaster(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_no_MigrationHistory()\n        {\n            ExistsTestNoMaster(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_out_of_date()\n        {\n            ExistsTestNoMaster(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_out_of_date()\n        {\n            ExistsTestNoMaster(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_persist_info()\n        {\n            NotExistsTest(NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_no_persist_info()\n        {\n            NotExistsTest(NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_persist_info()\n        {\n            NotExistsTestNoMaster(NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_no_persist_info()\n        {\n            NotExistsTestNoMaster(NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_persist_info()\n        {\n            NotExistsTest(ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_no_persist_info()\n        {\n            NotExistsTest(ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_no_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_persist_info_open_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_no_persist_info_open_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_no_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_closed_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_closed_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_no_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_no_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_no_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_no_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_no_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_no_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_no_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_persist_info_closed_connection()\n        {\n            NotExistsTestNoMasterWithConnection(NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_no_persist_info_closed_connection()\n        {\n            NotExistsTestNoMasterWithConnection(NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_no_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        private void ExistsTest(string databaseName, string username, bool persistSecurityInfo)\n        {\n            AssertExists(\n                databaseName,\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    databaseName, username, Password, persistSecurityInfo));\n        }\n\n        private void ExistsTestNoMaster(string databaseName, string username, bool persistSecurityInfo)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertExists(\n                    databaseName,\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        databaseName, username, Password, persistSecurityInfo));\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private void NotExistsTest(string username, bool persistSecurityInfo)\n        {\n            AssertDoesNotExist(\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    \"IDoNotExist\", username, Password, persistSecurityInfo));\n        }\n\n        private void NotExistsTestNoMaster(string username, bool persistSecurityInfo)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertDoesNotExist(\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        \"IDoNotExist\", username, Password, persistSecurityInfo));\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private void ExistsTestWithConnection(string databaseName, string username, bool persistSecurityInfo, bool openConnection)\n        {\n            AssertExistsWithConnection(\n                databaseName,\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    databaseName, username, Password, persistSecurityInfo), openConnection);\n        }\n\n        private void ExistsTestNoMasterWithConnection(string databaseName, string username, bool persistSecurityInfo, bool openConnection)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertExistsWithConnection(\n                    databaseName,\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        databaseName, username, Password, persistSecurityInfo), openConnection);\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private void NotExistsTestWithConnection(string username, bool persistSecurityInfo, bool openConnection)\n        {\n            AssertDoesNotExistWithConnection(\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    \"IDoNotExist\", username, Password, persistSecurityInfo), openConnection);\n        }\n\n        private void NotExistsTestNoMasterWithConnection(string username, bool persistSecurityInfo, bool openConnection)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertDoesNotExistWithConnection(\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        \"IDoNotExist\", username, Password, persistSecurityInfo), openConnection);\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private static void AssertExists(string databaseName, string connectionString)\n        {\n            using (var context = ExistsContext.Create(connectionString))\n            {\n                AssertExists(databaseName, context);\n            }\n        }\n\n        private static void AssertDoesNotExist(string connectionString)\n        {\n            using (var context = ExistsContext.Create(connectionString))\n            {\n                context.Database.Initialize(force: false);\n\n                Assert.True(context.InitializerCalled);\n                Assert.False(context.Exists);\n            }\n        }\n\n        private static void AssertExistsWithConnection(string databaseName, string connectionString, bool openConnection)\n        {\n            using (var connection = new SqlConnection(connectionString))\n            {\n                if (openConnection)\n                {\n                    connection.Open();\n                }\n\n                using (var context = ExistsContext.Create(connection))\n                {\n                    AssertExists(databaseName, context);\n                }\n\n                connection.Close();\n            }\n        }\n\n        private static void AssertExists(string databaseName, ExistsContext context)\n        {\n            context.Database.Initialize(force: false);\n\n            Assert.True(context.InitializerCalled);\n            Assert.True(context.Exists);\n\n            if (databaseName == DatabaseWithMigrationHistory)\n            {\n                context.SetDropCreateIfNotExists();\n                context.Database.Initialize(force: true);\n                context.Database.Initialize(force: true);\n\n                context.SetDropCreateIfModelChanges();\n                context.Database.Initialize(force: true);\n                context.Database.Initialize(force: true);\n            }\n            else if (databaseName == DatabaseWithoutMigrationHistory)\n            {\n                context.SetDropCreateIfNotExists();\n                context.Database.Initialize(force: true);\n                context.Database.Initialize(force: true);\n\n                context.SetDropCreateIfModelChanges();\n                Assert.Throws<NotSupportedException>(() => context.Database.Initialize(force: true))\n                    .ValidateMessage(\"Database_NoDatabaseMetadata\");\n            }\n            else if (databaseName == DatabaseOutOfDate)\n            {\n                context.SetDropCreateIfNotExists();\n                Assert.Throws<InvalidOperationException>(() => context.Database.Initialize(force: true))\n                    .ValidateMessage(\"DatabaseInitializationStrategy_ModelMismatch\", context.GetType().Name);\n            }\n        }\n\n        private static void AssertDoesNotExistWithConnection(string connectionString, bool openConnection)\n        {\n            using (var connection = new SqlConnection(connectionString))\n            {\n                if (openConnection)\n                {\n                    connection.Open();\n                }\n\n                using (var context = ExistsContext.Create(connection))\n                {\n                    context.Database.Initialize(force: false);\n\n                    Assert.True(context.InitializerCalled);\n                    Assert.False(context.Exists);\n                }\n\n                connection.Close();\n            }\n        }\n\n        private static void EnsureDatabaseExists(string databaseName, bool drophistoryTable, bool outOfDate)\n        {\n            using (var context = outOfDate\n                ? new ExistsContextModelChanged(SimpleConnectionString(databaseName))\n                : new ExistsContext(SimpleConnectionString(databaseName)))\n            {\n                if (!context.Database.Exists())\n                {\n                    context.Database.Create();\n\n                    if (drophistoryTable)\n                    {\n                        context.Database.ExecuteSqlCommand(\"DROP TABLE \" + HistoryContext.DefaultTableName);\n                    }\n                    else\n                    {\n                        context.Database.ExecuteSqlCommand(@\"UPDATE __MigrationHistory SET ContextKey = 'TestContextKey'\");\n                    }\n                }\n            }\n        }\n\n        private void EnsureUserExists(string databaseName, string username, bool allowMasterQuery)\n        {\n            using (var connection = new SqlConnection(SimpleConnectionString(\"master\")))\n            {\n                connection.Open();\n\n                var loginExists = ExecuteScalarReturnsOne(\n                    connection,\n                    \"SELECT COUNT(*) FROM sys.sql_logins WHERE name = N'{0}'\", username);\n\n                if (!loginExists)\n                {\n                    ExecuteNonQuery(connection, \"CREATE LOGIN [{0}] WITH PASSWORD=N'{1}'\", username, Password);\n                }\n\n                var userExists = ExecuteScalarReturnsOne(\n                    connection,\n                    \"SELECT COUNT(*) FROM sys.sysusers WHERE name = N'{0}'\", username);\n\n                if (!userExists)\n                {\n                    ExecuteNonQuery(connection, \"CREATE USER [{0}] FROM LOGIN [{0}]\", username);\n                    if (!allowMasterQuery)\n                    {\n                        ExecuteNonQuery(connection, \"DENY VIEW ANY DATABASE TO [{0}]\", username);\n                    }\n                }\n\n                connection.Close();\n            }\n\n            using (var connection = new SqlConnection(SimpleConnectionString(databaseName)))\n            {\n                connection.Open();\n\n                var userExists = ExecuteScalarReturnsOne(\n                    connection,\n                    \"SELECT COUNT(*) FROM sys.sysusers WHERE name = N'{0}'\", username);\n\n                if (!userExists)\n                {\n                    ExecuteNonQuery(connection, \"CREATE USER [{0}] FROM LOGIN [{0}]\", username);\n                    ExecuteNonQuery(connection, \"GRANT VIEW DEFINITION TO [{0}]\", username);\n                    ExecuteNonQuery(connection, \"GRANT SELECT TO [{0}]\", username);\n                }\n\n                connection.Close();\n            }\n        }\n\n        private static void ExecuteNonQuery(SqlConnection connection, string commandText, params object[] args)\n        {\n            using (var command = connection.CreateCommand())\n            {\n                command.CommandText = string.Format(commandText, args);\n                command.ExecuteNonQuery();\n            }\n        }\n\n        private static bool ExecuteScalarReturnsOne(SqlConnection connection, string commandText, params object[] args)\n        {\n            using (var command = connection.CreateCommand())\n            {\n                try\n                {\n                    command.CommandText = string.Format(commandText, args);\n                    return (int)command.ExecuteScalar() == 1;\n                }\n                catch (Exception)\n                {\n                    return false;\n                }\n            }\n        }\n\n        public class NoMasterInterceptor : IDbConnectionInterceptor\n        {\n            public void BeginningTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void BeganTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Closing(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Closed(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void ConnectionStringGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionStringGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionStringSetting(\n                DbConnection connection, DbConnectionPropertyInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionStringSet(DbConnection connection, DbConnectionPropertyInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionTimeoutGetting(DbConnection connection, DbConnectionInterceptionContext<int> interceptionContext)\n            {\n            }\n\n            public void ConnectionTimeoutGot(DbConnection connection, DbConnectionInterceptionContext<int> interceptionContext)\n            {\n            }\n\n            public void DatabaseGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void DatabaseGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void DataSourceGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void DataSourceGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void Disposing(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Disposed(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void EnlistingTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void EnlistedTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Opening(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n                if (connection.Database == \"master\")\n                {\n                    interceptionContext.Exception =\n                        (SqlException)Activator.CreateInstance(\n                            typeof(SqlException), BindingFlags.Instance | BindingFlags.NonPublic, null,\n                            new object[] { \"No master for you!\", null, null, Guid.NewGuid() }, null);\n                }\n            }\n\n            public void Opened(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void ServerVersionGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ServerVersionGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void StateGetting(DbConnection connection, DbConnectionInterceptionContext<ConnectionState> interceptionContext)\n            {\n            }\n\n            public void StateGot(DbConnection connection, DbConnectionInterceptionContext<ConnectionState> interceptionContext)\n            {\n            }\n        }\n\n        public class ExistsContext : DbContext\n        {\n            public bool InitializerCalled { get; set; }\n            public bool Exists { get; set; }\n\n            private static int _typeCount;\n\n            static ExistsContext()\n            {\n                Database.SetInitializer<ExistsContext>(null);\n            }\n\n            public ExistsContext(string connectionString)\n                : base(connectionString)\n            {\n                SetContextKey();\n            }\n\n            public ExistsContext(DbConnection connection)\n                : base(connection, contextOwnsConnection: false)\n            {\n                SetContextKey();\n            }\n\n            private void SetContextKey()\n            {\n                var internalContext = typeof(DbContext)\n                    .GetField(\"_internalContext\", BindingFlags.Instance | BindingFlags.NonPublic)\n                    .GetValue(this);\n\n                internalContext.GetType().BaseType\n                    .GetField(\"_defaultContextKey\", BindingFlags.Instance | BindingFlags.NonPublic)\n                    .SetValue(internalContext, \"TestContextKey\");\n            }\n\n            public DbSet<ExistsEntity> Entities { get; set; }\n\n            public static ExistsContext Create(string connectionString)\n            {\n                return (ExistsContext)Activator.CreateInstance(GetNewContxtType(), connectionString);\n            }\n\n            public static ExistsContext Create(DbConnection connection)\n            {\n                return (ExistsContext)Activator.CreateInstance(GetNewContxtType(), connection);\n            }\n\n            private static Type GetNewContxtType()\n            {\n                var typeNumber = _typeCount++;\n\n                var typeBits = new Type[8];\n                for (var bit = 0; bit < 8; bit++)\n                {\n                    typeBits[bit] = ((typeNumber & 1) == 1) ? typeof(int) : typeof(string);\n                    typeNumber >>= 1;\n                }\n\n                return typeof(ExistsContext<>).MakeGenericType(typeof(Tuple<,,,,,,,>).MakeGenericType(typeBits));\n            }\n\n            public virtual void SetDropCreateIfNotExists()\n            {\n                throw new NotImplementedException();\n            }\n\n            public virtual void SetDropCreateIfModelChanges()\n            {\n                throw new NotImplementedException();\n            }\n        }\n\n        public class ExistsContextModelChanged : ExistsContext\n        {\n            static ExistsContextModelChanged()\n            {\n                Database.SetInitializer<ExistsContextModelChanged>(null);\n            }\n\n            public ExistsContextModelChanged(string connectionString)\n                : base(connectionString)\n            {\n            }\n\n            public ExistsContextModelChanged(DbConnection connection)\n                : base(connection)\n            {\n            }\n\n            public DbSet<ModelChangedEntity> ModelChangedEntities { get; set; }\n        }\n\n        public class ExistsContext<T> : ExistsContext\n        {\n            private static readonly ExistsInitializer<T> _initializer = new ExistsInitializer<T>();\n\n            private static readonly CreateDatabaseIfNotExists<ExistsContext<T>> _dropCreateIfNotExists\n                = new CreateDatabaseIfNotExists<ExistsContext<T>>();\n\n            private static readonly DropCreateDatabaseIfModelChanges<ExistsContext<T>> _dropCreateIfModelChanges\n                = new DropCreateDatabaseIfModelChanges<ExistsContext<T>>();\n\n            private static readonly DropCreateDatabaseAlways<ExistsContext<T>> _dropCreateAlways\n                = new DropCreateDatabaseAlways<ExistsContext<T>>();\n\n            static ExistsContext()\n            {\n                Database.SetInitializer(_initializer);\n            }\n\n            public ExistsContext(string connectionString)\n                : base(connectionString)\n            {\n            }\n\n            public ExistsContext(DbConnection connection)\n                : base(connection)\n            {\n            }\n\n            public override void SetDropCreateIfNotExists()\n            {\n                Database.SetInitializer(_dropCreateIfNotExists);\n            }\n\n            public override void SetDropCreateIfModelChanges()\n            {\n                Database.SetInitializer(_dropCreateIfModelChanges);\n            }\n        }\n\n        public class BasicManifestTokenResolver : IManifestTokenResolver\n        {\n            public string ResolveManifestToken(DbConnection connection)\n            {\n                return DbProviderServices.GetProviderServices(connection).GetProviderManifestToken(connection);\n            }\n        }\n\n        public class ExistsInitializer<T> : IDatabaseInitializer<ExistsContext<T>>\n        {\n            public void InitializeDatabase(ExistsContext<T> context)\n            {\n                context.InitializerCalled = true;\n                context.Exists = context.Database.Exists();\n            }\n        }\n\n        public class ExistsEntity\n        {\n            public int Id { get; set; }\n        }\n\n        public class ModelChangedEntity\n        {\n            public int Id { get; set; }\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 38574,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework6\\EntityFramework\\FunctionalTests\\SqlClient\\DatabaseExistsInInitializerTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework6\\EntityFramework\\FunctionalTests\\SqlClient\\DatabaseExistsInInitializerTests.cs"
  },
  {
    "Text": "Assert.True(context.Exists);",
    "Start": 23522,
    "Length": 28,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.SqlServer\n{\n    using System.Data.Common;\n    using System.Data.Entity.Core.Common;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Infrastructure.DependencyResolution;\n    using System.Data.Entity.Infrastructure.Interception;\n    using System.Data.Entity.Migrations.History;\n    using System.Data.SqlClient;\n    using System.Reflection;\n    using Xunit;\n\n    public class DatabaseExistsInInitializerTests : FunctionalTestBase, IDisposable\n    {\n        private const string Password = \"Password1\";\n        private const string NormalUser = \"EFGooseWithDbVisibility\";\n        private const string ImpairedUser = \"EFGooseWithoutDbVisibility\";\n        private const string DatabaseWithMigrationHistory = \"MigratoryGoose\";\n        private const string DatabaseWithoutMigrationHistory = \"NonMigratoryGoose\";\n        private const string DatabaseOutOfDate = \"MigratedGoose\";\n\n        public DatabaseExistsInInitializerTests()\n        {\n            EnsureDatabaseExists(DatabaseWithMigrationHistory, drophistoryTable: false, outOfDate: false);\n            EnsureUserExists(DatabaseWithMigrationHistory, NormalUser, allowMasterQuery: true);\n            EnsureUserExists(DatabaseWithMigrationHistory, ImpairedUser, allowMasterQuery: false);\n\n            EnsureDatabaseExists(DatabaseWithoutMigrationHistory, drophistoryTable: true, outOfDate: false);\n            EnsureUserExists(DatabaseWithoutMigrationHistory, NormalUser, allowMasterQuery: true);\n            EnsureUserExists(DatabaseWithoutMigrationHistory, ImpairedUser, allowMasterQuery: false);\n\n            EnsureDatabaseExists(DatabaseOutOfDate, drophistoryTable: false, outOfDate: true);\n            EnsureUserExists(DatabaseOutOfDate, NormalUser, allowMasterQuery: true);\n            EnsureUserExists(DatabaseOutOfDate, ImpairedUser, allowMasterQuery: false);\n\n            MutableResolver.AddResolver<IManifestTokenResolver>(\n                new SingletonDependencyResolver<IManifestTokenResolver>(new BasicManifestTokenResolver()));\n        }\n\n        public void Dispose()\n        {\n            MutableResolver.ClearResolvers();\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info()\n        {\n            ExistsTestNoMaster(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info()\n        {\n            ExistsTestNoMaster(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info()\n        {\n            ExistsTest(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_no_MigrationHistory()\n        {\n            ExistsTestNoMaster(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_no_MigrationHistory()\n        {\n            ExistsTestNoMaster(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_no_MigrationHistory()\n        {\n            ExistsTest(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_out_of_date()\n        {\n            ExistsTestNoMaster(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_out_of_date()\n        {\n            ExistsTestNoMaster(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_out_of_date()\n        {\n            ExistsTest(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_persist_info()\n        {\n            NotExistsTest(NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_no_persist_info()\n        {\n            NotExistsTest(NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_persist_info()\n        {\n            NotExistsTestNoMaster(NormalUser, persistSecurityInfo: true);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_no_persist_info()\n        {\n            NotExistsTestNoMaster(NormalUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_persist_info()\n        {\n            NotExistsTest(ImpairedUser, persistSecurityInfo: true);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_no_persist_info()\n        {\n            NotExistsTest(ImpairedUser, persistSecurityInfo: false);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_no_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_persist_info_open_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_no_persist_info_open_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_no_persist_info_open_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_closed_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_closed_connection()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_closed_connection()\n        {\n            ExistsTestWithConnection(DatabaseWithMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_no_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_no_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_no_persist_info_open_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseWithoutMigrationHistory, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_closed_connection_no_MigrationHistory()\n        {\n            ExistsTestWithConnection(DatabaseWithoutMigrationHistory, ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_with_master_no_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2068\n        public void Exists_check_without_master_no_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: true, openConnection: true);\n        }\n\n        [Fact] // CodePlex 2113, 2068\n        public void Exists_check_with_no_master_query_no_persist_info_open_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: false, openConnection: true);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_with_master_no_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Exists_check_without_master_no_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestNoMasterWithConnection(DatabaseOutOfDate, NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Exists_check_with_no_master_query_no_persist_info_closed_connection_out_of_date()\n        {\n            ExistsTestWithConnection(DatabaseOutOfDate, ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_with_master_no_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_persist_info_closed_connection()\n        {\n            NotExistsTestNoMasterWithConnection(NormalUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact]\n        public void Not_exists_check_without_master_no_persist_info_closed_connection()\n        {\n            NotExistsTestNoMasterWithConnection(NormalUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(ImpairedUser, persistSecurityInfo: true, openConnection: false);\n        }\n\n        [Fact] // CodePlex 2113\n        public void Not_exists_check_with_no_master_query_no_persist_info_closed_connection()\n        {\n            NotExistsTestWithConnection(ImpairedUser, persistSecurityInfo: false, openConnection: false);\n        }\n\n        private void ExistsTest(string databaseName, string username, bool persistSecurityInfo)\n        {\n            AssertExists(\n                databaseName,\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    databaseName, username, Password, persistSecurityInfo));\n        }\n\n        private void ExistsTestNoMaster(string databaseName, string username, bool persistSecurityInfo)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertExists(\n                    databaseName,\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        databaseName, username, Password, persistSecurityInfo));\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private void NotExistsTest(string username, bool persistSecurityInfo)\n        {\n            AssertDoesNotExist(\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    \"IDoNotExist\", username, Password, persistSecurityInfo));\n        }\n\n        private void NotExistsTestNoMaster(string username, bool persistSecurityInfo)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertDoesNotExist(\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        \"IDoNotExist\", username, Password, persistSecurityInfo));\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private void ExistsTestWithConnection(string databaseName, string username, bool persistSecurityInfo, bool openConnection)\n        {\n            AssertExistsWithConnection(\n                databaseName,\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    databaseName, username, Password, persistSecurityInfo), openConnection);\n        }\n\n        private void ExistsTestNoMasterWithConnection(string databaseName, string username, bool persistSecurityInfo, bool openConnection)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertExistsWithConnection(\n                    databaseName,\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        databaseName, username, Password, persistSecurityInfo), openConnection);\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private void NotExistsTestWithConnection(string username, bool persistSecurityInfo, bool openConnection)\n        {\n            AssertDoesNotExistWithConnection(\n                ModelHelpers.SimpleConnectionStringWithCredentials(\n                    \"IDoNotExist\", username, Password, persistSecurityInfo), openConnection);\n        }\n\n        private void NotExistsTestNoMasterWithConnection(string username, bool persistSecurityInfo, bool openConnection)\n        {\n            var interceptor = new NoMasterInterceptor();\n            try\n            {\n                DbInterception.Add(interceptor);\n\n                AssertDoesNotExistWithConnection(\n                    ModelHelpers.SimpleConnectionStringWithCredentials(\n                        \"IDoNotExist\", username, Password, persistSecurityInfo), openConnection);\n            }\n            finally\n            {\n                DbInterception.Remove(interceptor);\n            }\n        }\n\n        private static void AssertExists(string databaseName, string connectionString)\n        {\n            using (var context = ExistsContext.Create(connectionString))\n            {\n                AssertExists(databaseName, context);\n            }\n        }\n\n        private static void AssertDoesNotExist(string connectionString)\n        {\n            using (var context = ExistsContext.Create(connectionString))\n            {\n                context.Database.Initialize(force: false);\n\n                Assert.True(context.InitializerCalled);\n                Assert.False(context.Exists);\n            }\n        }\n\n        private static void AssertExistsWithConnection(string databaseName, string connectionString, bool openConnection)\n        {\n            using (var connection = new SqlConnection(connectionString))\n            {\n                if (openConnection)\n                {\n                    connection.Open();\n                }\n\n                using (var context = ExistsContext.Create(connection))\n                {\n                    AssertExists(databaseName, context);\n                }\n\n                connection.Close();\n            }\n        }\n\n        private static void AssertExists(string databaseName, ExistsContext context)\n        {\n            context.Database.Initialize(force: false);\n\n            Assert.True(context.InitializerCalled);\n            Assert.True(context.Exists);\n\n            if (databaseName == DatabaseWithMigrationHistory)\n            {\n                context.SetDropCreateIfNotExists();\n                context.Database.Initialize(force: true);\n                context.Database.Initialize(force: true);\n\n                context.SetDropCreateIfModelChanges();\n                context.Database.Initialize(force: true);\n                context.Database.Initialize(force: true);\n            }\n            else if (databaseName == DatabaseWithoutMigrationHistory)\n            {\n                context.SetDropCreateIfNotExists();\n                context.Database.Initialize(force: true);\n                context.Database.Initialize(force: true);\n\n                context.SetDropCreateIfModelChanges();\n                Assert.Throws<NotSupportedException>(() => context.Database.Initialize(force: true))\n                    .ValidateMessage(\"Database_NoDatabaseMetadata\");\n            }\n            else if (databaseName == DatabaseOutOfDate)\n            {\n                context.SetDropCreateIfNotExists();\n                Assert.Throws<InvalidOperationException>(() => context.Database.Initialize(force: true))\n                    .ValidateMessage(\"DatabaseInitializationStrategy_ModelMismatch\", context.GetType().Name);\n            }\n        }\n\n        private static void AssertDoesNotExistWithConnection(string connectionString, bool openConnection)\n        {\n            using (var connection = new SqlConnection(connectionString))\n            {\n                if (openConnection)\n                {\n                    connection.Open();\n                }\n\n                using (var context = ExistsContext.Create(connection))\n                {\n                    context.Database.Initialize(force: false);\n\n                    Assert.True(context.InitializerCalled);\n                    Assert.False(context.Exists);\n                }\n\n                connection.Close();\n            }\n        }\n\n        private static void EnsureDatabaseExists(string databaseName, bool drophistoryTable, bool outOfDate)\n        {\n            using (var context = outOfDate\n                ? new ExistsContextModelChanged(SimpleConnectionString(databaseName))\n                : new ExistsContext(SimpleConnectionString(databaseName)))\n            {\n                if (!context.Database.Exists())\n                {\n                    context.Database.Create();\n\n                    if (drophistoryTable)\n                    {\n                        context.Database.ExecuteSqlCommand(\"DROP TABLE \" + HistoryContext.DefaultTableName);\n                    }\n                    else\n                    {\n                        context.Database.ExecuteSqlCommand(@\"UPDATE __MigrationHistory SET ContextKey = 'TestContextKey'\");\n                    }\n                }\n            }\n        }\n\n        private void EnsureUserExists(string databaseName, string username, bool allowMasterQuery)\n        {\n            using (var connection = new SqlConnection(SimpleConnectionString(\"master\")))\n            {\n                connection.Open();\n\n                var loginExists = ExecuteScalarReturnsOne(\n                    connection,\n                    \"SELECT COUNT(*) FROM sys.sql_logins WHERE name = N'{0}'\", username);\n\n                if (!loginExists)\n                {\n                    ExecuteNonQuery(connection, \"CREATE LOGIN [{0}] WITH PASSWORD=N'{1}'\", username, Password);\n                }\n\n                var userExists = ExecuteScalarReturnsOne(\n                    connection,\n                    \"SELECT COUNT(*) FROM sys.sysusers WHERE name = N'{0}'\", username);\n\n                if (!userExists)\n                {\n                    ExecuteNonQuery(connection, \"CREATE USER [{0}] FROM LOGIN [{0}]\", username);\n                    if (!allowMasterQuery)\n                    {\n                        ExecuteNonQuery(connection, \"DENY VIEW ANY DATABASE TO [{0}]\", username);\n                    }\n                }\n\n                connection.Close();\n            }\n\n            using (var connection = new SqlConnection(SimpleConnectionString(databaseName)))\n            {\n                connection.Open();\n\n                var userExists = ExecuteScalarReturnsOne(\n                    connection,\n                    \"SELECT COUNT(*) FROM sys.sysusers WHERE name = N'{0}'\", username);\n\n                if (!userExists)\n                {\n                    ExecuteNonQuery(connection, \"CREATE USER [{0}] FROM LOGIN [{0}]\", username);\n                    ExecuteNonQuery(connection, \"GRANT VIEW DEFINITION TO [{0}]\", username);\n                    ExecuteNonQuery(connection, \"GRANT SELECT TO [{0}]\", username);\n                }\n\n                connection.Close();\n            }\n        }\n\n        private static void ExecuteNonQuery(SqlConnection connection, string commandText, params object[] args)\n        {\n            using (var command = connection.CreateCommand())\n            {\n                command.CommandText = string.Format(commandText, args);\n                command.ExecuteNonQuery();\n            }\n        }\n\n        private static bool ExecuteScalarReturnsOne(SqlConnection connection, string commandText, params object[] args)\n        {\n            using (var command = connection.CreateCommand())\n            {\n                try\n                {\n                    command.CommandText = string.Format(commandText, args);\n                    return (int)command.ExecuteScalar() == 1;\n                }\n                catch (Exception)\n                {\n                    return false;\n                }\n            }\n        }\n\n        public class NoMasterInterceptor : IDbConnectionInterceptor\n        {\n            public void BeginningTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void BeganTransaction(DbConnection connection, BeginTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Closing(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Closed(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void ConnectionStringGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionStringGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionStringSetting(\n                DbConnection connection, DbConnectionPropertyInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionStringSet(DbConnection connection, DbConnectionPropertyInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ConnectionTimeoutGetting(DbConnection connection, DbConnectionInterceptionContext<int> interceptionContext)\n            {\n            }\n\n            public void ConnectionTimeoutGot(DbConnection connection, DbConnectionInterceptionContext<int> interceptionContext)\n            {\n            }\n\n            public void DatabaseGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void DatabaseGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void DataSourceGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void DataSourceGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void Disposing(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Disposed(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void EnlistingTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void EnlistedTransaction(DbConnection connection, EnlistTransactionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void Opening(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n                if (connection.Database == \"master\")\n                {\n                    interceptionContext.Exception =\n                        (SqlException)Activator.CreateInstance(\n                            typeof(SqlException), BindingFlags.Instance | BindingFlags.NonPublic, null,\n                            new object[] { \"No master for you!\", null, null, Guid.NewGuid() }, null);\n                }\n            }\n\n            public void Opened(DbConnection connection, DbConnectionInterceptionContext interceptionContext)\n            {\n            }\n\n            public void ServerVersionGetting(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void ServerVersionGot(DbConnection connection, DbConnectionInterceptionContext<string> interceptionContext)\n            {\n            }\n\n            public void StateGetting(DbConnection connection, DbConnectionInterceptionContext<ConnectionState> interceptionContext)\n            {\n            }\n\n            public void StateGot(DbConnection connection, DbConnectionInterceptionContext<ConnectionState> interceptionContext)\n            {\n            }\n        }\n\n        public class ExistsContext : DbContext\n        {\n            public bool InitializerCalled { get; set; }\n            public bool Exists { get; set; }\n\n            private static int _typeCount;\n\n            static ExistsContext()\n            {\n                Database.SetInitializer<ExistsContext>(null);\n            }\n\n            public ExistsContext(string connectionString)\n                : base(connectionString)\n            {\n                SetContextKey();\n            }\n\n            public ExistsContext(DbConnection connection)\n                : base(connection, contextOwnsConnection: false)\n            {\n                SetContextKey();\n            }\n\n            private void SetContextKey()\n            {\n                var internalContext = typeof(DbContext)\n                    .GetField(\"_internalContext\", BindingFlags.Instance | BindingFlags.NonPublic)\n                    .GetValue(this);\n\n                internalContext.GetType().BaseType\n                    .GetField(\"_defaultContextKey\", BindingFlags.Instance | BindingFlags.NonPublic)\n                    .SetValue(internalContext, \"TestContextKey\");\n            }\n\n            public DbSet<ExistsEntity> Entities { get; set; }\n\n            public static ExistsContext Create(string connectionString)\n            {\n                return (ExistsContext)Activator.CreateInstance(GetNewContxtType(), connectionString);\n            }\n\n            public static ExistsContext Create(DbConnection connection)\n            {\n                return (ExistsContext)Activator.CreateInstance(GetNewContxtType(), connection);\n            }\n\n            private static Type GetNewContxtType()\n            {\n                var typeNumber = _typeCount++;\n\n                var typeBits = new Type[8];\n                for (var bit = 0; bit < 8; bit++)\n                {\n                    typeBits[bit] = ((typeNumber & 1) == 1) ? typeof(int) : typeof(string);\n                    typeNumber >>= 1;\n                }\n\n                return typeof(ExistsContext<>).MakeGenericType(typeof(Tuple<,,,,,,,>).MakeGenericType(typeBits));\n            }\n\n            public virtual void SetDropCreateIfNotExists()\n            {\n                throw new NotImplementedException();\n            }\n\n            public virtual void SetDropCreateIfModelChanges()\n            {\n                throw new NotImplementedException();\n            }\n        }\n\n        public class ExistsContextModelChanged : ExistsContext\n        {\n            static ExistsContextModelChanged()\n            {\n                Database.SetInitializer<ExistsContextModelChanged>(null);\n            }\n\n            public ExistsContextModelChanged(string connectionString)\n                : base(connectionString)\n            {\n            }\n\n            public ExistsContextModelChanged(DbConnection connection)\n                : base(connection)\n            {\n            }\n\n            public DbSet<ModelChangedEntity> ModelChangedEntities { get; set; }\n        }\n\n        public class ExistsContext<T> : ExistsContext\n        {\n            private static readonly ExistsInitializer<T> _initializer = new ExistsInitializer<T>();\n\n            private static readonly CreateDatabaseIfNotExists<ExistsContext<T>> _dropCreateIfNotExists\n                = new CreateDatabaseIfNotExists<ExistsContext<T>>();\n\n            private static readonly DropCreateDatabaseIfModelChanges<ExistsContext<T>> _dropCreateIfModelChanges\n                = new DropCreateDatabaseIfModelChanges<ExistsContext<T>>();\n\n            private static readonly DropCreateDatabaseAlways<ExistsContext<T>> _dropCreateAlways\n                = new DropCreateDatabaseAlways<ExistsContext<T>>();\n\n            static ExistsContext()\n            {\n                Database.SetInitializer(_initializer);\n            }\n\n            public ExistsContext(string connectionString)\n                : base(connectionString)\n            {\n            }\n\n            public ExistsContext(DbConnection connection)\n                : base(connection)\n            {\n            }\n\n            public override void SetDropCreateIfNotExists()\n            {\n                Database.SetInitializer(_dropCreateIfNotExists);\n            }\n\n            public override void SetDropCreateIfModelChanges()\n            {\n                Database.SetInitializer(_dropCreateIfModelChanges);\n            }\n        }\n\n        public class BasicManifestTokenResolver : IManifestTokenResolver\n        {\n            public string ResolveManifestToken(DbConnection connection)\n            {\n                return DbProviderServices.GetProviderServices(connection).GetProviderManifestToken(connection);\n            }\n        }\n\n        public class ExistsInitializer<T> : IDatabaseInitializer<ExistsContext<T>>\n        {\n            public void InitializeDatabase(ExistsContext<T> context)\n            {\n                context.InitializerCalled = true;\n                context.Exists = context.Database.Exists();\n            }\n        }\n\n        public class ExistsEntity\n        {\n            public int Id { get; set; }\n        }\n\n        public class ModelChangedEntity\n        {\n            public int Id { get; set; }\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 38574,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework6\\EntityFramework\\FunctionalTests\\SqlClient\\DatabaseExistsInInitializerTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework6\\EntityFramework\\FunctionalTests\\SqlClient\\DatabaseExistsInInitializerTests.cs"
  }
]