[
  {
    "Text": "GetMethod(methodName, getParameterTypes.Method, 0)",
    "Start": 333198,
    "Length": 50,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity\n{\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.Data.Entity.Core.Objects;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Internal;\n    using System.Data.Entity.Internal.Linq;\n    using System.Data.Entity.Resources;\n    using System.Data.Entity.Utilities;\n    using System.Diagnostics;\n    using System.Diagnostics.CodeAnalysis;\n    using System.Linq;\n    using System.Linq.Expressions;\n    using System.Reflection;\n    using System.Threading;\n    using System.Threading.Tasks;\n\n    /// <summary>\n    /// Useful extension methods for use with Entity Framework LINQ queries.\n    /// </summary>\n    public static class QueryableExtensions\n    {\n        #region Private static fields\n\n#if !NET40\n\n        private static readonly MethodInfo _first = GetMethod(\n            \"First\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _first_Predicate = GetMethod(\n            \"First\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _firstOrDefault = GetMethod(\n            \"FirstOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _firstOrDefault_Predicate = GetMethod(\n            \"FirstOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _single = GetMethod(\n            \"Single\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _single_Predicate = GetMethod(\n            \"Single\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _singleOrDefault = GetMethod(\n            \"SingleOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _singleOrDefault_Predicate = GetMethod(\n            \"SingleOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _contains = GetMethod(\n            \"Contains\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    T\n                });\n\n        private static readonly MethodInfo _any = GetMethod(\n            \"Any\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _any_Predicate = GetMethod(\n            \"Any\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _all_Predicate = GetMethod(\n            \"All\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _count = GetMethod(\n            \"Count\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _count_Predicate = GetMethod(\n            \"Count\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _longCount = GetMethod(\n            \"LongCount\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _longCount_Predicate = GetMethod(\n            \"LongCount\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _min = GetMethod(\n            \"Min\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _min_Selector = GetMethod(\n            \"Min\", (T, U) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, U))\n                });\n\n        private static readonly MethodInfo _max = GetMethod(\n            \"Max\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _max_Selector = GetMethod(\n            \"Max\", (T, U) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, U))\n                });\n\n        private static readonly MethodInfo _sum_Int = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<int>)\n                });\n\n        private static readonly MethodInfo _sum_IntNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<int?>)\n                });\n\n        private static readonly MethodInfo _sum_Long = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<long>)\n                });\n\n        private static readonly MethodInfo _sum_LongNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<long?>)\n                });\n\n        private static readonly MethodInfo _sum_Float = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<float>)\n                });\n\n        private static readonly MethodInfo _sum_FloatNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<float?>)\n                });\n\n        private static readonly MethodInfo _sum_Double = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<double>)\n                });\n\n        private static readonly MethodInfo _sum_DoubleNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<double?>)\n                });\n\n        private static readonly MethodInfo _sum_Decimal = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<decimal>)\n                });\n\n        private static readonly MethodInfo _sum_DecimalNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<decimal?>)\n                });\n\n        private static readonly MethodInfo _sum_Int_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int)))\n                });\n\n        private static readonly MethodInfo _sum_IntNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int?)))\n                });\n\n        private static readonly MethodInfo _sum_Long_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long)))\n                });\n\n        private static readonly MethodInfo _sum_LongNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long?)))\n                });\n\n        private static readonly MethodInfo _sum_Float_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float)))\n                });\n\n        private static readonly MethodInfo _sum_FloatNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float?)))\n                });\n\n        private static readonly MethodInfo _sum_Double_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double)))\n                });\n\n        private static readonly MethodInfo _sum_DoubleNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double?)))\n                });\n\n        private static readonly MethodInfo _sum_Decimal_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal)))\n                });\n\n        private static readonly MethodInfo _sum_DecimalNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal?)))\n                });\n\n        private static readonly MethodInfo _average_Int = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<int>)\n                });\n\n        private static readonly MethodInfo _average_IntNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<int?>)\n                });\n\n        private static readonly MethodInfo _average_Long = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<long>)\n                });\n\n        private static readonly MethodInfo _average_LongNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<long?>)\n                });\n\n        private static readonly MethodInfo _average_Float = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<float>)\n                });\n\n        private static readonly MethodInfo _average_FloatNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<float?>)\n                });\n\n        private static readonly MethodInfo _average_Double = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<double>)\n                });\n\n        private static readonly MethodInfo _average_DoubleNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<double?>)\n                });\n\n        private static readonly MethodInfo _average_Decimal = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<decimal>)\n                });\n\n        private static readonly MethodInfo _average_DecimalNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<decimal?>)\n                });\n\n        private static readonly MethodInfo _average_Int_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int)))\n                });\n\n        private static readonly MethodInfo _average_IntNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int?)))\n                });\n\n        private static readonly MethodInfo _average_Long_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long)))\n                });\n\n        private static readonly MethodInfo _average_LongNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long?)))\n                });\n\n        private static readonly MethodInfo _average_Float_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float)))\n                });\n\n        private static readonly MethodInfo _average_FloatNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float?)))\n                });\n\n        private static readonly MethodInfo _average_Double_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double)))\n                });\n\n        private static readonly MethodInfo _average_DoubleNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double?)))\n                });\n\n        private static readonly MethodInfo _average_Decimal_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal)))\n                });\n\n        private static readonly MethodInfo _average_DecimalNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal?)))\n                });\n\n#endif\n\n        #endregion\n\n        #region Include\n\n        /// <summary>\n        /// Specifies the related objects to include in the query results.\n        /// </summary>\n        /// <remarks>\n        /// This extension method calls the Include(String) method of the source <see cref=\"IQueryable{T}\" /> object,\n        /// if such a method exists. If the source <see cref=\"IQueryable{T}\" /> does not have a matching method,\n        /// then this method does nothing. The <see cref=\"ObjectQuery{T}\" />, <see cref=\"ObjectSet{T}\" />,\n        /// <see cref=\"DbQuery{TResult}\" /> and <see cref=\"DbSet{T}\" /> types all have an appropriate Include method to call.\n        /// Paths are all-inclusive. For example, if an include call indicates Include(\"Orders.OrderLines\"), not only will\n        /// OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on\n        /// the returned instance of the <see cref=\"IQueryable{T}\" />. Other instances of <see cref=\"IQueryable{T}\" />\n        /// and the object context itself are not affected. Because the Include method returns the query object,\n        /// you can call this method multiple times on an <see cref=\"IQueryable{T}\" /> to specify multiple paths for the query.\n        /// </remarks>\n        /// <typeparam name=\"T\"> The type of entity being queried. </typeparam>\n        /// <param name=\"source\">\n        /// The source <see cref=\"IQueryable{T}\" /> on which to call Include.\n        /// </param>\n        /// <param name=\"path\"> The dot-separated list of related objects to return in the query results. </param>\n        /// <returns>\n        /// A new <see cref=\"IQueryable{T}\" /> with the defined query path.\n        /// </returns>\n        public static IQueryable<T> Include<T>(this IQueryable<T> source, string path)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotEmpty(path, \"path\");\n\n            // Explicitly not checking the value of path since we don't care for the extension method.\n\n            // We could use dynamic here, but the problem is that we want to do nothing if the method\n            // isn't found or is somehow incompatible, which appears to involve catching the RuntimeBinderException\n            // and ignoring it, which isn't great.  Also, if only the return type of the Include method is wrong,\n            // then using dynamic will still result in the method being called before the exception is thrown.\n\n            // Special case the types we know about to avoid reflection, then use reflection for any other\n            // IQueryable that has an Include method.\n\n            var asDbQuery = source as DbQuery<T>;\n            if (asDbQuery != null)\n            {\n                return asDbQuery.Include(path);\n            }\n\n            var asObjectQuery = source as ObjectQuery<T>;\n            if (asObjectQuery != null)\n            {\n                return asObjectQuery.Include(path);\n            }\n\n            return CommonInclude(source, path);\n        }\n\n        /// <summary>\n        /// Specifies the related objects to include in the query results.\n        /// </summary>\n        /// <remarks>\n        /// This extension method calls the Include(String) method of the source <see cref=\"IQueryable\" /> object,\n        /// if such a method exists. If the source <see cref=\"IQueryable\" /> does not have a matching method,\n        /// then this method does nothing. The <see cref=\"ObjectQuery\" />, <see cref=\"ObjectSet{T}\" />,\n        /// <see cref=\"DbQuery\" /> and <see cref=\"DbSet\" /> types all have an appropriate Include method to call.\n        /// Paths are all-inclusive. For example, if an include call indicates Include(\"Orders.OrderLines\"), not only will\n        /// OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on\n        /// the returned instance of the <see cref=\"IQueryable\" />. Other instances of <see cref=\"IQueryable\" />\n        /// and the object context itself are not affected. Because the Include method returns the query object,\n        /// you can call this method multiple times on an <see cref=\"IQueryable\" /> to specify multiple paths for the query.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// The source <see cref=\"IQueryable\" /> on which to call Include.\n        /// </param>\n        /// <param name=\"path\"> The dot-separated list of related objects to return in the query results. </param>\n        /// <returns>\n        /// A new <see cref=\"IQueryable\" /> with the defined query path.\n        /// </returns>\n        public static IQueryable Include(this IQueryable source, string path)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotEmpty(path, \"path\");\n\n            // Explicitly not checking the value of path since we don't care for the extension method.\n\n            // We could use dynamic here, but the problem is that we want to do nothing if the method\n            // isn't found or is somehow incompatible, which appears to involve catching the RuntimeBinderException\n            // and ignoring it, which isn't great.  Also, if only the return type of the Include method is wrong,\n            // then using dynamic will still result in the method being called before the exception is thrown.\n\n            // Special case the types we know about to avoid reflection, then use reflection for any other\n            // IQueryable that has an Include method.\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null ? asDbQuery.Include(path) : CommonInclude(source, path);\n        }\n\n        // <summary>\n        // Common code for generic and non-generic string Include.\n        // </summary>\n        private static T CommonInclude<T>(T source, string path)\n        {\n            DebugCheck.NotNull((object)source);\n\n            var includeMethod = source.GetType().GetRuntimeMethod(\n                \"Include\", \n                p => p.IsPublic && !p.IsStatic,\n                new[] { typeof(string) },\n                new[] { typeof(IComparable) },\n                new[] { typeof(ICloneable) },\n                new[] { typeof(IComparable<string>) },\n                new[] { typeof(IEnumerable<char>) },\n                new[] { typeof(IEnumerable) },\n                new[] { typeof(IEquatable<string>) },\n                new[] { typeof(object) });\n\n            if (includeMethod != null\n                && typeof(T).IsAssignableFrom(includeMethod.ReturnType))\n            {\n                return (T)includeMethod.Invoke(source, new object[] { path });\n            }\n            return source;\n        }\n\n        /// <summary>\n        /// Specifies the related objects to include in the query results.\n        /// </summary>\n        /// <remarks>\n        /// The path expression must be composed of simple property access expressions together with calls to Select for\n        /// composing additional includes after including a collection proprty.  Examples of possible include paths are:\n        /// To include a single reference: query.Include(e => e.Level1Reference)\n        /// To include a single collection: query.Include(e => e.Level1Collection)\n        /// To include a reference and then a reference one level down: query.Include(e => e.Level1Reference.Level2Reference)\n        /// To include a reference and then a collection one level down: query.Include(e => e.Level1Reference.Level2Collection)\n        /// To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))\n        /// To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))\n        /// To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))\n        /// To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))\n        /// To include a collection, a reference, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference.Level3Reference))\n        /// To include a collection, a collection, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection.Select(l2 => l2.Level3Reference)))\n        /// This extension method calls the Include(String) method of the source IQueryable object, if such a method exists.\n        /// If the source IQueryable does not have a matching method, then this method does nothing.\n        /// The Entity Framework ObjectQuery, ObjectSet, DbQuery, and DbSet types all have an appropriate Include method to call.\n        /// When you call the Include method, the query path is only valid on the returned instance of the IQueryable&lt;T&gt;. Other\n        /// instances of IQueryable&lt;T&gt; and the object context itself are not affected.  Because the Include method returns the\n        /// query object, you can call this method multiple times on an IQueryable&lt;T&gt; to specify multiple paths for the query.\n        /// </remarks>\n        /// <typeparam name=\"T\"> The type of entity being queried. </typeparam>\n        /// <typeparam name=\"TProperty\"> The type of navigation property being included. </typeparam>\n        /// <param name=\"source\"> The source IQueryable on which to call Include. </param>\n        /// <param name=\"path\"> A lambda expression representing the path to include. </param>\n        /// <returns>\n        /// A new IQueryable&lt;T&gt; with the defined query path.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        public static IQueryable<T> Include<T, TProperty>(\n            this IQueryable<T> source, Expression<Func<T, TProperty>> path)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(path, \"path\");\n\n            string include;\n            if (!DbHelpers.TryParsePath(path.Body, out include)\n                || include == null)\n            {\n                throw new ArgumentException(Strings.DbExtensions_InvalidIncludePathExpression, \"path\");\n            }\n\n            return Include(source, include);\n        }\n\n        #endregion\n\n        #region AsNoTracking\n\n        /// <summary>\n        /// Returns a new query where the entities returned will not be cached in the <see cref=\"DbContext\" />\n        /// or <see cref=\"ObjectContext\" />.  This method works by calling the AsNoTracking method of the\n        /// underlying query object.  If the underlying query object does not have an AsNoTracking method,\n        /// then calling this method will have no affect.\n        /// </summary>\n        /// <typeparam name=\"T\"> The element type. </typeparam>\n        /// <param name=\"source\"> The source query. </param>\n        /// <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>\n        public static IQueryable<T> AsNoTracking<T>(this IQueryable<T> source) where T : class\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery<T>;\n            return asDbQuery != null ? asDbQuery.AsNoTracking() : CommonAsNoTracking(source);\n        }\n\n        /// <summary>\n        /// Returns a new query where the entities returned will not be cached in the <see cref=\"DbContext\" />\n        /// or <see cref=\"ObjectContext\" />.  This method works by calling the AsNoTracking method of the\n        /// underlying query object.  If the underlying query object does not have an AsNoTracking method,\n        /// then calling this method will have no affect.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        /// <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>\n        public static IQueryable AsNoTracking(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null ? asDbQuery.AsNoTracking() : CommonAsNoTracking(source);\n        }\n\n        // <summary>\n        // Common code for generic and non-generic AsNoTracking.\n        // </summary>\n        private static T CommonAsNoTracking<T>(T source) where T : class\n        {\n            DebugCheck.NotNull(source);\n\n            var asObjectQuery = source as ObjectQuery;\n            if (asObjectQuery != null)\n            {\n                return (T)DbHelpers.CreateNoTrackingQuery(asObjectQuery);\n            }\n\n            var noTrackingMethod = source.GetType().GetPublicInstanceMethod(\"AsNoTracking\");\n            if (noTrackingMethod != null\n                && typeof(T).IsAssignableFrom(noTrackingMethod.ReturnType))\n            {\n                return (T)noTrackingMethod.Invoke(source, null);\n            }\n\n            return source;\n        }\n\n        #endregion\n\n        #region AsStreaming\n\n        /// <summary>\n        /// Returns a new query that will stream the results instead of buffering. This method works by calling\n        /// the AsStreaming method of the underlying query object. If the underlying query object does not have\n        /// an AsStreaming method, then calling this method will have no affect.\n        /// </summary>\n        /// <typeparam name=\"T\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to apply AsStreaming to.\n        /// </param>\n        /// <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>\n        [Obsolete(\"LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.\")]\n        public static IQueryable<T> AsStreaming<T>(this IQueryable<T> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery<T>;\n            return asDbQuery != null ? asDbQuery.AsStreaming() : CommonAsStreaming(source);\n        }\n\n        /// <summary>\n        /// Returns a new query that will stream the results instead of buffering. This method works by calling\n        /// the AsStreaming method of the underlying query object. If the underlying query object does not have\n        /// an AsStreaming method, then calling this method will have no affect.\n        /// </summary>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to apply AsStreaming to.\n        /// </param>\n        /// <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>\n        [Obsolete(\"LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.\")]\n        public static IQueryable AsStreaming(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null ? asDbQuery.AsStreaming() : CommonAsStreaming(source);\n        }\n\n        private static T CommonAsStreaming<T>(T source) where T : class\n        {\n            DebugCheck.NotNull(source);\n\n            var asObjectQuery = source as ObjectQuery;\n            if (asObjectQuery != null)\n            {\n                return (T)DbHelpers.CreateStreamingQuery(asObjectQuery);\n            }\n\n            var asStreamingMethod = source.GetType().GetPublicInstanceMethod(\"AsStreaming\");\n            if (asStreamingMethod != null\n                && typeof(T).IsAssignableFrom(asStreamingMethod.ReturnType))\n            {\n                return (T)asStreamingMethod.Invoke(source, null);\n            }\n\n            return source;\n        }\n        \n        #endregion\n\n        #region WithExecutionStrategy\n\n        // These methods allow an internal way to change the execution strategy for a particular query\n        // When making it public all other places where execution strategy is used need to be changed too\n        internal static IQueryable<T> WithExecutionStrategy<T>(this IQueryable<T> source, IDbExecutionStrategy executionStrategy)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery<T>;\n            return asDbQuery != null\n                ? asDbQuery.WithExecutionStrategy(executionStrategy)\n                : CommonWithExecutionStrategy(source, executionStrategy);\n        }\n\n        internal static IQueryable WithExecutionStrategy(this IQueryable source, IDbExecutionStrategy executionStrategy)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null\n                ? asDbQuery.WithExecutionStrategy(executionStrategy)\n                : CommonWithExecutionStrategy(source, executionStrategy);\n        }\n\n        private static T CommonWithExecutionStrategy<T>(T source, IDbExecutionStrategy executionStrategy) where T : class\n        {\n            DebugCheck.NotNull(source);\n\n            var asObjectQuery = source as ObjectQuery;\n            if (asObjectQuery != null)\n            {\n                return (T)DbHelpers.CreateQueryWithExecutionStrategy(asObjectQuery, executionStrategy);\n            }\n\n            var asStreamingMethod = source.GetType().GetPublicInstanceMethod(\"WithExecutionStrategy\");\n            if (asStreamingMethod != null\n                && typeof(T).IsAssignableFrom(asStreamingMethod.ReturnType))\n            {\n                return (T)asStreamingMethod.Invoke(source, new object[] { executionStrategy });\n            }\n\n            return source;\n        }\n\n        #endregion\n\n        #region Load\n\n        /// <summary>\n        /// Enumerates the query such that for server queries such as those of <see cref=\"DbSet{T}\" />,\n        /// <see\n        ///     cref=\"ObjectSet{T}\" />\n        /// ,\n        /// <see cref=\"ObjectQuery{T}\" />, and others the results of the query will be loaded into the associated\n        /// <see\n        ///     cref=\"DbContext\" />\n        /// ,\n        /// <see cref=\"ObjectContext\" /> or other cache on the client.\n        /// This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        public static void Load(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var enumerator = source.GetEnumerator();\n            try\n            {\n                while (enumerator.MoveNext())\n                {\n                }\n            }\n            finally\n            {\n                var asDisposable = enumerator as IDisposable;\n                if (asDisposable != null)\n                {\n                    asDisposable.Dispose();\n                }\n            }\n        }\n\n#if !NET40\n\n        /// <summary>\n        /// Asynchronously enumerates the query such that for server queries such as those of <see cref=\"DbSet{T}\" />,\n        /// <see\n        ///     cref=\"ObjectSet{T}\" />\n        /// ,\n        /// <see cref=\"ObjectQuery{T}\" />, and others the results of the query will be loaded into the associated\n        /// <see\n        ///     cref=\"DbContext\" />\n        /// ,\n        /// <see cref=\"ObjectContext\" /> or other cache on the client.\n        /// This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// </returns>\n        public static Task LoadAsync(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.LoadAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query such that for server queries such as those of <see cref=\"DbSet{T}\" />,\n        /// <see\n        ///     cref=\"ObjectSet{T}\" />\n        /// ,\n        /// <see cref=\"ObjectQuery{T}\" />, and others the results of the query will be loaded into the associated\n        /// <see\n        ///     cref=\"DbContext\" />\n        /// ,\n        /// <see cref=\"ObjectContext\" /> or other cache on the client.\n        /// This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// </returns>\n        public static Task LoadAsync(this IQueryable source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.ForEachAsync(e => { }, cancellationToken);\n        }\n\n#endif\n\n        #endregion\n\n        #region ForEachAsync\n\n#if !NET40\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync(this IQueryable source, Action<object> action)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync(this IQueryable source, Action<object> action, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, cancellationToken);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"T\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"T\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, cancellationToken);\n        }\n\n#endif\n\n        #endregion\n\n        #region Async equivalents of IEnumerable extension methods\n\n#if !NET40\n\n        /// <summary>\n        /// Creates a <see cref=\"List{Object}\" /> from an <see cref=\"IQueryable\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to create a <see cref=\"List{Object}\" /> from.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{Object}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<object>> ToListAsync(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync<object>();\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"List{Object}\" /> from an <see cref=\"IQueryable\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to create a <see cref=\"List{Object}\" /> from.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{Object}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<object>> ToListAsync(this IQueryable source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync<object>(cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"List{T}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"List{T}\" /> from.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{T}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync();\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"List{T}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a list from.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{T}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync(cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates an array from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create an array from.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains an array that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToArrayAsync();\n        }\n\n        /// <summary>\n        /// Creates an array from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create an array from.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains an array that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToArrayAsync(cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function and a comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, comparer);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function and a comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer,\n            CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, comparer, cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector,\n            CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector, cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function, a comparer, and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector,\n            IEqualityComparer<TKey> comparer)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector, comparer);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function, a comparer, and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector,\n            IEqualityComparer<TKey> comparer, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector, comparer, cancellationToken);\n        }\n\n#endif\n\n        #endregion\n\n        #region Async equivalents of IQueryable extension methods\n\n#if !NET40\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" /> is <c>null</c>.\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" /> doesn't implement <see cref=\"IDbAsyncQueryProvider\" />.\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.FirstAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _first.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" /> that passes the test in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.FirstAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" /> that passes the test in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _first_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if\n        /// <paramref name=\"source\" /> is empty; otherwise, the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.FirstOrDefaultAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if\n        /// <paramref name=\"source\" /> is empty; otherwise, the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _firstOrDefault.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition\n        /// or a default value if no such element is found.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if <paramref name=\"source\" />\n        /// is empty or if no element passes the test specified by <paramref name=\"predicate\" /> ; otherwise, the first\n        /// element in <paramref name=\"source\" /> that passes the test specified by <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.FirstOrDefaultAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition\n        /// or a default value if no such element is found.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if <paramref name=\"source\" />\n        /// is empty or if no element passes the test specified by <paramref name=\"predicate\" /> ; otherwise, the first\n        /// element in <paramref name=\"source\" /> that passes the test specified by <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _firstOrDefault_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, and throws an exception\n        /// if there is not exactly one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SingleAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, and throws an exception\n        /// if there is not exactly one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _single.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition,\n        /// and throws an exception if more than one such element exists.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// More than one element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.SingleAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition,\n        /// and throws an exception if more than one such element exists.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// More than one element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _single_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;\n        /// this method throws an exception if there is more than one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name=\"TSource\" />)\n        /// if the sequence contains no elements.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SingleOrDefaultAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;\n        /// this method throws an exception if there is more than one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name=\"TSource\" />)\n        /// if the sequence contains no elements.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _singleOrDefault.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition or\n        /// a default value if no such element exists; this method throws an exception if more than one element\n        /// satisfies the condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />, or <c>default</c> ( <typeparamref name=\"TSource\" /> ) if no such element is found.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.SingleOrDefaultAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition or\n        /// a default value if no such element exists; this method throws an exception if more than one element\n        /// satisfies the condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />, or <c>default</c> ( <typeparamref name=\"TSource\" /> ) if no such element is found.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _singleOrDefault_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"item\"> The object to locate in the sequence. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.ContainsAsync(item, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"item\"> The object to locate in the sequence. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _contains.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Constant(item, typeof(TSource)) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains any elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to check for being empty.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AnyAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains any elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to check for being empty.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _any.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether any element of a sequence satisfies a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AnyAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.AnyAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether any element of a sequence satisfies a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AnyAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _any_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether all the elements of a sequence satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AllAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.AllAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether all the elements of a sequence satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AllAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _all_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.CountAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _count.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> CountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.CountAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> CountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _count_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the total number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.LongCountAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the total number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _longCount.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the number of elements in a sequence\n        /// that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> LongCountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.LongCountAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the number of elements in a sequence\n        /// that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> LongCountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _longCount_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the minimum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.MinAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the minimum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _min.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MinAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.MinAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MinAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TResult>(\n                    Expression.Call(\n                        null,\n                        _min_Selector.MakeGenericMethod(typeof(TSource), typeof(TResult)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the maximum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.MaxAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the maximum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _max.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MaxAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.MaxAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MaxAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TResult>(\n                    Expression.Call(\n                        null,\n                        _max_Selector.MakeGenericMethod(typeof(TSource), typeof(TResult)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains  the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> SumAsync(this IQueryable<int> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> SumAsync(this IQueryable<int> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _sum_Int,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync(this IQueryable<int?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync(this IQueryable<int?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int?>(\n                    Expression.Call(\n                        null,\n                        _sum_IntNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> SumAsync(this IQueryable<long> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> SumAsync(this IQueryable<long> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _sum_Long,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync(this IQueryable<long?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync(this IQueryable<long?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long?>(\n                    Expression.Call(\n                        null,\n                        _sum_LongNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<float> SumAsync(this IQueryable<float> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<float> SumAsync(this IQueryable<float> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _sum_Float,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync(this IQueryable<float?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync(this IQueryable<float?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _sum_FloatNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<double> SumAsync(this IQueryable<double> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<double> SumAsync(this IQueryable<double> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _sum_Double,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync(this IQueryable<double?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync(this IQueryable<double?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _sum_DoubleNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<decimal> SumAsync(this IQueryable<decimal> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<decimal> SumAsync(this IQueryable<decimal> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _sum_Decimal,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync(this IQueryable<decimal?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync(this IQueryable<decimal?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _sum_DecimalNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _sum_Int_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int?>(\n                    Expression.Call(\n                        null,\n                        _sum_IntNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _sum_Long_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long?>(\n                    Expression.Call(\n                        null,\n                        _sum_LongNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _sum_Float_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _sum_FloatNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _sum_Double_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _sum_DoubleNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _sum_Decimal_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _sum_DecimalNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<int> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<int> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Int,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<int?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<int?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_IntNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<long> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<long> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Long,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<long?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<long?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_LongNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<float> AverageAsync(this IQueryable<float> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<float> AverageAsync(this IQueryable<float> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _average_Float,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync(this IQueryable<float?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync(this IQueryable<float?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _average_FloatNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<double> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<double> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Double,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<double?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<double?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_DoubleNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<decimal> AverageAsync(this IQueryable<decimal> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<decimal> AverageAsync(this IQueryable<decimal> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _average_Decimal,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync(this IQueryable<decimal?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync(this IQueryable<decimal?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _average_DecimalNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Int_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_IntNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Long_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_LongNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _average_Float_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _average_FloatNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Double_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_DoubleNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _average_Decimal_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _average_DecimalNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n#endif\n\n        #endregion\n\n        #region Paging\n        private static readonly MethodInfo _skip = GetMethod(\n            \"Skip\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(int)\n                });\n\n        private static readonly MethodInfo _take = GetMethod(\n            \"Take\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(int)\n                });\n\n        /// <summary>\n        /// Bypasses a specified number of elements in a sequence and then returns the remaining elements.\n        /// </summary>\n        /// <typeparam name=\"TSource\">The type of the elements of source.</typeparam>\n        /// <param name=\"source\">A sequence to return elements from.</param>\n        /// <param name=\"countAccessor\">An expression that evaluates to the number of elements to skip.</param>\n        /// <returns>A sequence that contains elements that occur after the specified index in the \n        /// input sequence.</returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static IQueryable<TSource> Skip<TSource>(\n            this IQueryable<TSource> source, Expression<Func<int>> countAccessor)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(countAccessor, \"countAccessor\");\n\n            return source.Provider.CreateQuery<TSource>(\n                Expression.Call(\n                    null,\n                    _skip.MakeGenericMethod(new[] { typeof(TSource) }),\n                    new[] { source.Expression, countAccessor.Body }));\n        }\n\n        /// <summary>\n        /// Returns a specified number of contiguous elements from the start of a sequence.\n        /// </summary>\n        /// <typeparam name=\"TSource\">The type of the elements of source.</typeparam>\n        /// <param name=\"source\">The sequence to return elements from.</param>\n        /// <param name=\"countAccessor\">An expression that evaluates to the number of elements \n        /// to return.</param>\n        /// <returns>A sequence that contains the specified number of elements from the \n        /// start of the input sequence.</returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static IQueryable<TSource> Take<TSource>(\n            this IQueryable<TSource> source, Expression<Func<int>> countAccessor)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(countAccessor, \"countAccessor\");\n\n            return source.Provider.CreateQuery<TSource>(\n                Expression.Call(\n                    null,\n                    _take.MakeGenericMethod(new[] { typeof(TSource) }),\n                    new[] { source.Expression, countAccessor.Body }));\n        }\n        #endregion\n\n        #region Private and internal methods\n\n        internal static ObjectQuery TryGetObjectQuery(this IQueryable source)\n        {\n            if (source == null)\n            {\n                return null;\n            }\n\n            var direct = source as ObjectQuery;\n            if (direct != null)\n            {\n                return direct;\n            }\n\n            var indirect = source as IInternalQueryAdapter;\n            if (indirect != null)\n            {\n                return indirect.InternalQuery.ObjectQuery;\n            }\n\n            return null;\n        }\n\n#if !NET40\n\n        private static IDbAsyncEnumerable AsDbAsyncEnumerable(this IQueryable source)\n        {\n            DebugCheck.NotNull(source);\n\n            var enumerable = source as IDbAsyncEnumerable;\n            if (enumerable != null)\n            {\n                return enumerable;\n            }\n            else\n            {\n                throw Error.IQueryable_Not_Async(string.Empty);\n            }\n        }\n\n        private static IDbAsyncEnumerable<T> AsDbAsyncEnumerable<T>(this IQueryable<T> source)\n        {\n            DebugCheck.NotNull(source);\n\n            var enumerable = source as IDbAsyncEnumerable<T>;\n            if (enumerable != null)\n            {\n                return enumerable;\n            }\n            else\n            {\n                throw Error.IQueryable_Not_Async(\"<\" + typeof(T) + \">\");\n            }\n        }\n\n        private static MethodInfo GetMethod(string methodName, Func<Type[]> getParameterTypes)\n        {\n            return GetMethod(methodName, getParameterTypes.Method, 0);\n        }\n\n        private static MethodInfo GetMethod(string methodName, Func<Type, Type, Type[]> getParameterTypes)\n        {\n            return GetMethod(methodName, getParameterTypes.Method, 2);\n        }\n\n#endif\n\n        private static MethodInfo GetMethod(string methodName, Func<Type, Type[]> getParameterTypes)\n        {\n            return GetMethod(methodName, getParameterTypes.Method, 1);\n        }\n\n        private static MethodInfo GetMethod(string methodName, MethodInfo getParameterTypesMethod, int genericArgumentsCount)\n        {\n            var candidates = typeof(Queryable).GetDeclaredMethods(methodName);\n\n            foreach (MethodInfo candidate in candidates)\n            {\n                var genericArguments = candidate.GetGenericArguments();\n                if (genericArguments.Length == genericArgumentsCount\n                    && Matches(candidate, (Type[])getParameterTypesMethod.Invoke(null, genericArguments)))\n                {\n                    return candidate;\n                }\n            }\n\n            Debug.Assert(\n                false, String.Format(\n                    \"Method '{0}' with parameters '{1}' not found\", methodName, PrettyPrint(getParameterTypesMethod, genericArgumentsCount)));\n\n            return null;\n        }\n\n        private static bool Matches(MethodInfo methodInfo, Type[] parameterTypes)\n        {\n            return methodInfo.GetParameters().Select(p => p.ParameterType).SequenceEqual(parameterTypes);\n        }\n\n        [SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\",\n            Justification = \"Called from an assert\")]\n        private static string PrettyPrint(MethodInfo getParameterTypesMethod, int genericArgumentsCount)\n        {\n            var dummyTypes = new Type[genericArgumentsCount];\n            for (var i = 0; i < genericArgumentsCount; i++)\n            {\n                dummyTypes[i] = typeof(object);\n            }\n\n            var parameterTypes = (Type[])getParameterTypesMethod.Invoke(null, dummyTypes);\n            var textRepresentations = new string[parameterTypes.Length];\n\n            for (var i = 0; i < parameterTypes.Length; i++)\n            {\n                textRepresentations[i] = parameterTypes[i].ToString();\n            }\n\n            return \"(\" + string.Join(\", \", textRepresentations) + \")\";\n        }\n\n        #endregion\n    }\n}\n",
      "Start": 0,
      "Length": 335625,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework5\\EntityFramework\\QueryableExtensions.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework5\\EntityFramework\\QueryableExtensions.cs"
  },
  {
    "Text": "GetMethod(methodName, getParameterTypes.Method, 2)",
    "Start": 333397,
    "Length": 50,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity\n{\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.Data.Entity.Core.Objects;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Internal;\n    using System.Data.Entity.Internal.Linq;\n    using System.Data.Entity.Resources;\n    using System.Data.Entity.Utilities;\n    using System.Diagnostics;\n    using System.Diagnostics.CodeAnalysis;\n    using System.Linq;\n    using System.Linq.Expressions;\n    using System.Reflection;\n    using System.Threading;\n    using System.Threading.Tasks;\n\n    /// <summary>\n    /// Useful extension methods for use with Entity Framework LINQ queries.\n    /// </summary>\n    public static class QueryableExtensions\n    {\n        #region Private static fields\n\n#if !NET40\n\n        private static readonly MethodInfo _first = GetMethod(\n            \"First\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _first_Predicate = GetMethod(\n            \"First\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _firstOrDefault = GetMethod(\n            \"FirstOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _firstOrDefault_Predicate = GetMethod(\n            \"FirstOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _single = GetMethod(\n            \"Single\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _single_Predicate = GetMethod(\n            \"Single\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _singleOrDefault = GetMethod(\n            \"SingleOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _singleOrDefault_Predicate = GetMethod(\n            \"SingleOrDefault\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _contains = GetMethod(\n            \"Contains\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    T\n                });\n\n        private static readonly MethodInfo _any = GetMethod(\n            \"Any\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _any_Predicate = GetMethod(\n            \"Any\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _all_Predicate = GetMethod(\n            \"All\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _count = GetMethod(\n            \"Count\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _count_Predicate = GetMethod(\n            \"Count\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _longCount = GetMethod(\n            \"LongCount\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _longCount_Predicate = GetMethod(\n            \"LongCount\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(bool)))\n                });\n\n        private static readonly MethodInfo _min = GetMethod(\n            \"Min\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _min_Selector = GetMethod(\n            \"Min\", (T, U) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, U))\n                });\n\n        private static readonly MethodInfo _max = GetMethod(\n            \"Max\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T)\n                });\n\n        private static readonly MethodInfo _max_Selector = GetMethod(\n            \"Max\", (T, U) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, U))\n                });\n\n        private static readonly MethodInfo _sum_Int = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<int>)\n                });\n\n        private static readonly MethodInfo _sum_IntNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<int?>)\n                });\n\n        private static readonly MethodInfo _sum_Long = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<long>)\n                });\n\n        private static readonly MethodInfo _sum_LongNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<long?>)\n                });\n\n        private static readonly MethodInfo _sum_Float = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<float>)\n                });\n\n        private static readonly MethodInfo _sum_FloatNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<float?>)\n                });\n\n        private static readonly MethodInfo _sum_Double = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<double>)\n                });\n\n        private static readonly MethodInfo _sum_DoubleNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<double?>)\n                });\n\n        private static readonly MethodInfo _sum_Decimal = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<decimal>)\n                });\n\n        private static readonly MethodInfo _sum_DecimalNullable = GetMethod(\n            \"Sum\", () => new[]\n                {\n                    typeof(IQueryable<decimal?>)\n                });\n\n        private static readonly MethodInfo _sum_Int_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int)))\n                });\n\n        private static readonly MethodInfo _sum_IntNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int?)))\n                });\n\n        private static readonly MethodInfo _sum_Long_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long)))\n                });\n\n        private static readonly MethodInfo _sum_LongNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long?)))\n                });\n\n        private static readonly MethodInfo _sum_Float_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float)))\n                });\n\n        private static readonly MethodInfo _sum_FloatNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float?)))\n                });\n\n        private static readonly MethodInfo _sum_Double_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double)))\n                });\n\n        private static readonly MethodInfo _sum_DoubleNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double?)))\n                });\n\n        private static readonly MethodInfo _sum_Decimal_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal)))\n                });\n\n        private static readonly MethodInfo _sum_DecimalNullable_Selector = GetMethod(\n            \"Sum\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal?)))\n                });\n\n        private static readonly MethodInfo _average_Int = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<int>)\n                });\n\n        private static readonly MethodInfo _average_IntNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<int?>)\n                });\n\n        private static readonly MethodInfo _average_Long = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<long>)\n                });\n\n        private static readonly MethodInfo _average_LongNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<long?>)\n                });\n\n        private static readonly MethodInfo _average_Float = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<float>)\n                });\n\n        private static readonly MethodInfo _average_FloatNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<float?>)\n                });\n\n        private static readonly MethodInfo _average_Double = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<double>)\n                });\n\n        private static readonly MethodInfo _average_DoubleNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<double?>)\n                });\n\n        private static readonly MethodInfo _average_Decimal = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<decimal>)\n                });\n\n        private static readonly MethodInfo _average_DecimalNullable = GetMethod(\n            \"Average\", () => new[]\n                {\n                    typeof(IQueryable<decimal?>)\n                });\n\n        private static readonly MethodInfo _average_Int_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int)))\n                });\n\n        private static readonly MethodInfo _average_IntNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(int?)))\n                });\n\n        private static readonly MethodInfo _average_Long_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long)))\n                });\n\n        private static readonly MethodInfo _average_LongNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(long?)))\n                });\n\n        private static readonly MethodInfo _average_Float_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float)))\n                });\n\n        private static readonly MethodInfo _average_FloatNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(float?)))\n                });\n\n        private static readonly MethodInfo _average_Double_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double)))\n                });\n\n        private static readonly MethodInfo _average_DoubleNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(double?)))\n                });\n\n        private static readonly MethodInfo _average_Decimal_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal)))\n                });\n\n        private static readonly MethodInfo _average_DecimalNullable_Selector = GetMethod(\n            \"Average\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(Expression<>).MakeGenericType(typeof(Func<,>).MakeGenericType(T, typeof(decimal?)))\n                });\n\n#endif\n\n        #endregion\n\n        #region Include\n\n        /// <summary>\n        /// Specifies the related objects to include in the query results.\n        /// </summary>\n        /// <remarks>\n        /// This extension method calls the Include(String) method of the source <see cref=\"IQueryable{T}\" /> object,\n        /// if such a method exists. If the source <see cref=\"IQueryable{T}\" /> does not have a matching method,\n        /// then this method does nothing. The <see cref=\"ObjectQuery{T}\" />, <see cref=\"ObjectSet{T}\" />,\n        /// <see cref=\"DbQuery{TResult}\" /> and <see cref=\"DbSet{T}\" /> types all have an appropriate Include method to call.\n        /// Paths are all-inclusive. For example, if an include call indicates Include(\"Orders.OrderLines\"), not only will\n        /// OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on\n        /// the returned instance of the <see cref=\"IQueryable{T}\" />. Other instances of <see cref=\"IQueryable{T}\" />\n        /// and the object context itself are not affected. Because the Include method returns the query object,\n        /// you can call this method multiple times on an <see cref=\"IQueryable{T}\" /> to specify multiple paths for the query.\n        /// </remarks>\n        /// <typeparam name=\"T\"> The type of entity being queried. </typeparam>\n        /// <param name=\"source\">\n        /// The source <see cref=\"IQueryable{T}\" /> on which to call Include.\n        /// </param>\n        /// <param name=\"path\"> The dot-separated list of related objects to return in the query results. </param>\n        /// <returns>\n        /// A new <see cref=\"IQueryable{T}\" /> with the defined query path.\n        /// </returns>\n        public static IQueryable<T> Include<T>(this IQueryable<T> source, string path)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotEmpty(path, \"path\");\n\n            // Explicitly not checking the value of path since we don't care for the extension method.\n\n            // We could use dynamic here, but the problem is that we want to do nothing if the method\n            // isn't found or is somehow incompatible, which appears to involve catching the RuntimeBinderException\n            // and ignoring it, which isn't great.  Also, if only the return type of the Include method is wrong,\n            // then using dynamic will still result in the method being called before the exception is thrown.\n\n            // Special case the types we know about to avoid reflection, then use reflection for any other\n            // IQueryable that has an Include method.\n\n            var asDbQuery = source as DbQuery<T>;\n            if (asDbQuery != null)\n            {\n                return asDbQuery.Include(path);\n            }\n\n            var asObjectQuery = source as ObjectQuery<T>;\n            if (asObjectQuery != null)\n            {\n                return asObjectQuery.Include(path);\n            }\n\n            return CommonInclude(source, path);\n        }\n\n        /// <summary>\n        /// Specifies the related objects to include in the query results.\n        /// </summary>\n        /// <remarks>\n        /// This extension method calls the Include(String) method of the source <see cref=\"IQueryable\" /> object,\n        /// if such a method exists. If the source <see cref=\"IQueryable\" /> does not have a matching method,\n        /// then this method does nothing. The <see cref=\"ObjectQuery\" />, <see cref=\"ObjectSet{T}\" />,\n        /// <see cref=\"DbQuery\" /> and <see cref=\"DbSet\" /> types all have an appropriate Include method to call.\n        /// Paths are all-inclusive. For example, if an include call indicates Include(\"Orders.OrderLines\"), not only will\n        /// OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on\n        /// the returned instance of the <see cref=\"IQueryable\" />. Other instances of <see cref=\"IQueryable\" />\n        /// and the object context itself are not affected. Because the Include method returns the query object,\n        /// you can call this method multiple times on an <see cref=\"IQueryable\" /> to specify multiple paths for the query.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// The source <see cref=\"IQueryable\" /> on which to call Include.\n        /// </param>\n        /// <param name=\"path\"> The dot-separated list of related objects to return in the query results. </param>\n        /// <returns>\n        /// A new <see cref=\"IQueryable\" /> with the defined query path.\n        /// </returns>\n        public static IQueryable Include(this IQueryable source, string path)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotEmpty(path, \"path\");\n\n            // Explicitly not checking the value of path since we don't care for the extension method.\n\n            // We could use dynamic here, but the problem is that we want to do nothing if the method\n            // isn't found or is somehow incompatible, which appears to involve catching the RuntimeBinderException\n            // and ignoring it, which isn't great.  Also, if only the return type of the Include method is wrong,\n            // then using dynamic will still result in the method being called before the exception is thrown.\n\n            // Special case the types we know about to avoid reflection, then use reflection for any other\n            // IQueryable that has an Include method.\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null ? asDbQuery.Include(path) : CommonInclude(source, path);\n        }\n\n        // <summary>\n        // Common code for generic and non-generic string Include.\n        // </summary>\n        private static T CommonInclude<T>(T source, string path)\n        {\n            DebugCheck.NotNull((object)source);\n\n            var includeMethod = source.GetType().GetRuntimeMethod(\n                \"Include\", \n                p => p.IsPublic && !p.IsStatic,\n                new[] { typeof(string) },\n                new[] { typeof(IComparable) },\n                new[] { typeof(ICloneable) },\n                new[] { typeof(IComparable<string>) },\n                new[] { typeof(IEnumerable<char>) },\n                new[] { typeof(IEnumerable) },\n                new[] { typeof(IEquatable<string>) },\n                new[] { typeof(object) });\n\n            if (includeMethod != null\n                && typeof(T).IsAssignableFrom(includeMethod.ReturnType))\n            {\n                return (T)includeMethod.Invoke(source, new object[] { path });\n            }\n            return source;\n        }\n\n        /// <summary>\n        /// Specifies the related objects to include in the query results.\n        /// </summary>\n        /// <remarks>\n        /// The path expression must be composed of simple property access expressions together with calls to Select for\n        /// composing additional includes after including a collection proprty.  Examples of possible include paths are:\n        /// To include a single reference: query.Include(e => e.Level1Reference)\n        /// To include a single collection: query.Include(e => e.Level1Collection)\n        /// To include a reference and then a reference one level down: query.Include(e => e.Level1Reference.Level2Reference)\n        /// To include a reference and then a collection one level down: query.Include(e => e.Level1Reference.Level2Collection)\n        /// To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))\n        /// To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))\n        /// To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))\n        /// To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))\n        /// To include a collection, a reference, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference.Level3Reference))\n        /// To include a collection, a collection, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection.Select(l2 => l2.Level3Reference)))\n        /// This extension method calls the Include(String) method of the source IQueryable object, if such a method exists.\n        /// If the source IQueryable does not have a matching method, then this method does nothing.\n        /// The Entity Framework ObjectQuery, ObjectSet, DbQuery, and DbSet types all have an appropriate Include method to call.\n        /// When you call the Include method, the query path is only valid on the returned instance of the IQueryable&lt;T&gt;. Other\n        /// instances of IQueryable&lt;T&gt; and the object context itself are not affected.  Because the Include method returns the\n        /// query object, you can call this method multiple times on an IQueryable&lt;T&gt; to specify multiple paths for the query.\n        /// </remarks>\n        /// <typeparam name=\"T\"> The type of entity being queried. </typeparam>\n        /// <typeparam name=\"TProperty\"> The type of navigation property being included. </typeparam>\n        /// <param name=\"source\"> The source IQueryable on which to call Include. </param>\n        /// <param name=\"path\"> A lambda expression representing the path to include. </param>\n        /// <returns>\n        /// A new IQueryable&lt;T&gt; with the defined query path.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        public static IQueryable<T> Include<T, TProperty>(\n            this IQueryable<T> source, Expression<Func<T, TProperty>> path)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(path, \"path\");\n\n            string include;\n            if (!DbHelpers.TryParsePath(path.Body, out include)\n                || include == null)\n            {\n                throw new ArgumentException(Strings.DbExtensions_InvalidIncludePathExpression, \"path\");\n            }\n\n            return Include(source, include);\n        }\n\n        #endregion\n\n        #region AsNoTracking\n\n        /// <summary>\n        /// Returns a new query where the entities returned will not be cached in the <see cref=\"DbContext\" />\n        /// or <see cref=\"ObjectContext\" />.  This method works by calling the AsNoTracking method of the\n        /// underlying query object.  If the underlying query object does not have an AsNoTracking method,\n        /// then calling this method will have no affect.\n        /// </summary>\n        /// <typeparam name=\"T\"> The element type. </typeparam>\n        /// <param name=\"source\"> The source query. </param>\n        /// <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>\n        public static IQueryable<T> AsNoTracking<T>(this IQueryable<T> source) where T : class\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery<T>;\n            return asDbQuery != null ? asDbQuery.AsNoTracking() : CommonAsNoTracking(source);\n        }\n\n        /// <summary>\n        /// Returns a new query where the entities returned will not be cached in the <see cref=\"DbContext\" />\n        /// or <see cref=\"ObjectContext\" />.  This method works by calling the AsNoTracking method of the\n        /// underlying query object.  If the underlying query object does not have an AsNoTracking method,\n        /// then calling this method will have no affect.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        /// <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>\n        public static IQueryable AsNoTracking(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null ? asDbQuery.AsNoTracking() : CommonAsNoTracking(source);\n        }\n\n        // <summary>\n        // Common code for generic and non-generic AsNoTracking.\n        // </summary>\n        private static T CommonAsNoTracking<T>(T source) where T : class\n        {\n            DebugCheck.NotNull(source);\n\n            var asObjectQuery = source as ObjectQuery;\n            if (asObjectQuery != null)\n            {\n                return (T)DbHelpers.CreateNoTrackingQuery(asObjectQuery);\n            }\n\n            var noTrackingMethod = source.GetType().GetPublicInstanceMethod(\"AsNoTracking\");\n            if (noTrackingMethod != null\n                && typeof(T).IsAssignableFrom(noTrackingMethod.ReturnType))\n            {\n                return (T)noTrackingMethod.Invoke(source, null);\n            }\n\n            return source;\n        }\n\n        #endregion\n\n        #region AsStreaming\n\n        /// <summary>\n        /// Returns a new query that will stream the results instead of buffering. This method works by calling\n        /// the AsStreaming method of the underlying query object. If the underlying query object does not have\n        /// an AsStreaming method, then calling this method will have no affect.\n        /// </summary>\n        /// <typeparam name=\"T\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to apply AsStreaming to.\n        /// </param>\n        /// <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>\n        [Obsolete(\"LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.\")]\n        public static IQueryable<T> AsStreaming<T>(this IQueryable<T> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery<T>;\n            return asDbQuery != null ? asDbQuery.AsStreaming() : CommonAsStreaming(source);\n        }\n\n        /// <summary>\n        /// Returns a new query that will stream the results instead of buffering. This method works by calling\n        /// the AsStreaming method of the underlying query object. If the underlying query object does not have\n        /// an AsStreaming method, then calling this method will have no affect.\n        /// </summary>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to apply AsStreaming to.\n        /// </param>\n        /// <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>\n        [Obsolete(\"LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.\")]\n        public static IQueryable AsStreaming(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null ? asDbQuery.AsStreaming() : CommonAsStreaming(source);\n        }\n\n        private static T CommonAsStreaming<T>(T source) where T : class\n        {\n            DebugCheck.NotNull(source);\n\n            var asObjectQuery = source as ObjectQuery;\n            if (asObjectQuery != null)\n            {\n                return (T)DbHelpers.CreateStreamingQuery(asObjectQuery);\n            }\n\n            var asStreamingMethod = source.GetType().GetPublicInstanceMethod(\"AsStreaming\");\n            if (asStreamingMethod != null\n                && typeof(T).IsAssignableFrom(asStreamingMethod.ReturnType))\n            {\n                return (T)asStreamingMethod.Invoke(source, null);\n            }\n\n            return source;\n        }\n        \n        #endregion\n\n        #region WithExecutionStrategy\n\n        // These methods allow an internal way to change the execution strategy for a particular query\n        // When making it public all other places where execution strategy is used need to be changed too\n        internal static IQueryable<T> WithExecutionStrategy<T>(this IQueryable<T> source, IDbExecutionStrategy executionStrategy)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery<T>;\n            return asDbQuery != null\n                ? asDbQuery.WithExecutionStrategy(executionStrategy)\n                : CommonWithExecutionStrategy(source, executionStrategy);\n        }\n\n        internal static IQueryable WithExecutionStrategy(this IQueryable source, IDbExecutionStrategy executionStrategy)\n        {\n            Check.NotNull(source, \"source\");\n\n            var asDbQuery = source as DbQuery;\n            return asDbQuery != null\n                ? asDbQuery.WithExecutionStrategy(executionStrategy)\n                : CommonWithExecutionStrategy(source, executionStrategy);\n        }\n\n        private static T CommonWithExecutionStrategy<T>(T source, IDbExecutionStrategy executionStrategy) where T : class\n        {\n            DebugCheck.NotNull(source);\n\n            var asObjectQuery = source as ObjectQuery;\n            if (asObjectQuery != null)\n            {\n                return (T)DbHelpers.CreateQueryWithExecutionStrategy(asObjectQuery, executionStrategy);\n            }\n\n            var asStreamingMethod = source.GetType().GetPublicInstanceMethod(\"WithExecutionStrategy\");\n            if (asStreamingMethod != null\n                && typeof(T).IsAssignableFrom(asStreamingMethod.ReturnType))\n            {\n                return (T)asStreamingMethod.Invoke(source, new object[] { executionStrategy });\n            }\n\n            return source;\n        }\n\n        #endregion\n\n        #region Load\n\n        /// <summary>\n        /// Enumerates the query such that for server queries such as those of <see cref=\"DbSet{T}\" />,\n        /// <see\n        ///     cref=\"ObjectSet{T}\" />\n        /// ,\n        /// <see cref=\"ObjectQuery{T}\" />, and others the results of the query will be loaded into the associated\n        /// <see\n        ///     cref=\"DbContext\" />\n        /// ,\n        /// <see cref=\"ObjectContext\" /> or other cache on the client.\n        /// This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        public static void Load(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            var enumerator = source.GetEnumerator();\n            try\n            {\n                while (enumerator.MoveNext())\n                {\n                }\n            }\n            finally\n            {\n                var asDisposable = enumerator as IDisposable;\n                if (asDisposable != null)\n                {\n                    asDisposable.Dispose();\n                }\n            }\n        }\n\n#if !NET40\n\n        /// <summary>\n        /// Asynchronously enumerates the query such that for server queries such as those of <see cref=\"DbSet{T}\" />,\n        /// <see\n        ///     cref=\"ObjectSet{T}\" />\n        /// ,\n        /// <see cref=\"ObjectQuery{T}\" />, and others the results of the query will be loaded into the associated\n        /// <see\n        ///     cref=\"DbContext\" />\n        /// ,\n        /// <see cref=\"ObjectContext\" /> or other cache on the client.\n        /// This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// </returns>\n        public static Task LoadAsync(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.LoadAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query such that for server queries such as those of <see cref=\"DbSet{T}\" />,\n        /// <see\n        ///     cref=\"ObjectSet{T}\" />\n        /// ,\n        /// <see cref=\"ObjectQuery{T}\" />, and others the results of the query will be loaded into the associated\n        /// <see\n        ///     cref=\"DbContext\" />\n        /// ,\n        /// <see cref=\"ObjectContext\" /> or other cache on the client.\n        /// This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.\n        /// </summary>\n        /// <param name=\"source\"> The source query. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// </returns>\n        public static Task LoadAsync(this IQueryable source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.ForEachAsync(e => { }, cancellationToken);\n        }\n\n#endif\n\n        #endregion\n\n        #region ForEachAsync\n\n#if !NET40\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync(this IQueryable source, Action<object> action)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync(this IQueryable source, Action<object> action, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, cancellationToken);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"T\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously enumerates the query results and performs the specified action on each element.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"T\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to enumerate.\n        /// </param>\n        /// <param name=\"action\"> The action to perform on each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns> A task that represents the asynchronous operation. </returns>\n        public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(action, \"action\");\n\n            return source.AsDbAsyncEnumerable().ForEachAsync(action, cancellationToken);\n        }\n\n#endif\n\n        #endregion\n\n        #region Async equivalents of IEnumerable extension methods\n\n#if !NET40\n\n        /// <summary>\n        /// Creates a <see cref=\"List{Object}\" /> from an <see cref=\"IQueryable\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to create a <see cref=\"List{Object}\" /> from.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{Object}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<object>> ToListAsync(this IQueryable source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync<object>();\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"List{Object}\" /> from an <see cref=\"IQueryable\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable\" /> to create a <see cref=\"List{Object}\" /> from.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{Object}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<object>> ToListAsync(this IQueryable source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync<object>(cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"List{T}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"List{T}\" /> from.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{T}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync();\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"List{T}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a list from.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"List{T}\" /> that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToListAsync(cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates an array from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create an array from.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains an array that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToArrayAsync();\n        }\n\n        /// <summary>\n        /// Creates an array from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create an array from.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains an array that contains elements from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AsDbAsyncEnumerable().ToArrayAsync(cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function and a comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, comparer);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function and a comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TSource}\" /> that contains selected keys and values.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer,\n            CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, comparer, cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector,\n            CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector, cancellationToken);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function, a comparer, and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector,\n            IEqualityComparer<TKey> comparer)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector, comparer);\n        }\n\n        /// <summary>\n        /// Creates a <see cref=\"Dictionary{TKey, TValue}\" /> from an <see cref=\"IQueryable{T}\" /> by enumerating it asynchronously\n        /// according to a specified key selector function, a comparer, and an element selector function.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TKey\">\n        /// The type of the key returned by <paramref name=\"keySelector\" /> .\n        /// </typeparam>\n        /// <typeparam name=\"TElement\">\n        /// The type of the value returned by <paramref name=\"elementSelector\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to create a <see cref=\"Dictionary{TKey, TValue}\" /> from.\n        /// </param>\n        /// <param name=\"keySelector\"> A function to extract a key from each element. </param>\n        /// <param name=\"elementSelector\"> A transform function to produce a result element value from each element. </param>\n        /// <param name=\"comparer\">\n        /// An <see cref=\"IEqualityComparer{TKey}\" /> to compare keys.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains a <see cref=\"Dictionary{TKey, TElement}\" /> that contains values of type\n        /// <typeparamref name=\"TElement\" /> selected from the input sequence.\n        /// </returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(\n            this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector,\n            IEqualityComparer<TKey> comparer, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(keySelector, \"keySelector\");\n            Check.NotNull(elementSelector, \"elementSelector\");\n\n            return source.AsDbAsyncEnumerable().ToDictionaryAsync(keySelector, elementSelector, comparer, cancellationToken);\n        }\n\n#endif\n\n        #endregion\n\n        #region Async equivalents of IQueryable extension methods\n\n#if !NET40\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" /> is <c>null</c>.\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" /> doesn't implement <see cref=\"IDbAsyncQueryProvider\" />.\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.FirstAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _first.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" /> that passes the test in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.FirstAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the first element in <paramref name=\"source\" /> that passes the test in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _first_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if\n        /// <paramref name=\"source\" /> is empty; otherwise, the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.FirstOrDefaultAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if\n        /// <paramref name=\"source\" /> is empty; otherwise, the first element in <paramref name=\"source\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _firstOrDefault.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition\n        /// or a default value if no such element is found.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if <paramref name=\"source\" />\n        /// is empty or if no element passes the test specified by <paramref name=\"predicate\" /> ; otherwise, the first\n        /// element in <paramref name=\"source\" /> that passes the test specified by <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.FirstOrDefaultAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the first element of a sequence that satisfies a specified condition\n        /// or a default value if no such element is found.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the first element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>default</c> ( <typeparamref name=\"TSource\" /> ) if <paramref name=\"source\" />\n        /// is empty or if no element passes the test specified by <paramref name=\"predicate\" /> ; otherwise, the first\n        /// element in <paramref name=\"source\" /> that passes the test specified by <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> FirstOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _firstOrDefault_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, and throws an exception\n        /// if there is not exactly one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SingleAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, and throws an exception\n        /// if there is not exactly one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">The source sequence is empty.</exception>\n        public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _single.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition,\n        /// and throws an exception if more than one such element exists.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// More than one element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.SingleAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition,\n        /// and throws an exception if more than one such element exists.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// No element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// More than one element satisfies the condition in\n        /// <paramref name=\"predicate\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _single_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;\n        /// this method throws an exception if there is more than one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name=\"TSource\" />)\n        /// if the sequence contains no elements.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SingleOrDefaultAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;\n        /// this method throws an exception if there is more than one element in the sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence, or <c>default</c> (<typeparamref name=\"TSource\" />)\n        /// if the sequence contains no elements.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// has more than one element.\n        /// </exception>\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _singleOrDefault.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition or\n        /// a default value if no such element exists; this method throws an exception if more than one element\n        /// satisfies the condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />, or <c>default</c> ( <typeparamref name=\"TSource\" /> ) if no such element is found.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.SingleOrDefaultAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the only element of a sequence that satisfies a specified condition or\n        /// a default value if no such element exists; this method throws an exception if more than one element\n        /// satisfies the condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test an element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the single element of the input sequence that satisfies the condition in\n        /// <paramref name=\"predicate\" />, or <c>default</c> ( <typeparamref name=\"TSource\" /> ) if no such element is found.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TSource> SingleOrDefaultAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _singleOrDefault_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"item\"> The object to locate in the sequence. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.ContainsAsync(item, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to return the single element of.\n        /// </param>\n        /// <param name=\"item\"> The object to locate in the sequence. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _contains.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Constant(item, typeof(TSource)) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains any elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to check for being empty.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AnyAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether a sequence contains any elements.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> to check for being empty.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _any.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether any element of a sequence satisfies a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AnyAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.AnyAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether any element of a sequence satisfies a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if any elements in the source sequence pass the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AnyAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _any_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether all the elements of a sequence satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AllAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.AllAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously determines whether all the elements of a sequence satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> whose elements to test for a condition.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains <c>true</c> if every element of the source sequence passes the test in the specified predicate; otherwise, <c>false</c>.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<bool> AllAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<bool>(\n                    Expression.Call(\n                        null,\n                        _all_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.CountAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _count.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> CountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.CountAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the number of elements in a sequence that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> CountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _count_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the total number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.LongCountAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the total number of elements in a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the input sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _longCount.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the number of elements in a sequence\n        /// that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> LongCountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            return source.LongCountAsync(predicate, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns an <see cref=\"Int64\" /> that represents the number of elements in a sequence\n        /// that satisfy a condition.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to be counted.\n        /// </param>\n        /// <param name=\"predicate\"> A function to test each element for a condition. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the number of elements in the sequence that satisfy the condition in the predicate function.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"predicate\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// that satisfy the condition in the predicate function\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> LongCountAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(predicate, \"predicate\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _longCount_Predicate.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(predicate) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the minimum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.MinAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the minimum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _min.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MinAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.MinAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the minimum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the minimum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MinAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TResult>(\n                    Expression.Call(\n                        null,\n                        _min_Selector.MakeGenericMethod(typeof(TSource), typeof(TResult)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously returns the maximum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.MaxAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously returns the maximum value of a sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TSource>(\n                    Expression.Call(\n                        null,\n                        _max.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MaxAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.MaxAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" />.\n        /// </typeparam>\n        /// <typeparam name=\"TResult\">\n        /// The type of the value returned by the function represented by <paramref name=\"selector\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// An <see cref=\"IQueryable{T}\" /> that contains the elements to determine the maximum of.\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the maximum value in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<TResult> MaxAsync<TSource, TResult>(\n            this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<TResult>(\n                    Expression.Call(\n                        null,\n                        _max_Selector.MakeGenericMethod(typeof(TSource), typeof(TResult)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains  the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> SumAsync(this IQueryable<int> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<int> SumAsync(this IQueryable<int> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _sum_Int,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync(this IQueryable<int?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync(this IQueryable<int?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int?>(\n                    Expression.Call(\n                        null,\n                        _sum_IntNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> SumAsync(this IQueryable<long> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        public static Task<long> SumAsync(this IQueryable<long> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _sum_Long,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync(this IQueryable<long?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync(this IQueryable<long?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long?>(\n                    Expression.Call(\n                        null,\n                        _sum_LongNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<float> SumAsync(this IQueryable<float> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<float> SumAsync(this IQueryable<float> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _sum_Float,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync(this IQueryable<float?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync(this IQueryable<float?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _sum_FloatNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<double> SumAsync(this IQueryable<double> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<double> SumAsync(this IQueryable<double> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _sum_Double,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync(this IQueryable<double?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync(this IQueryable<double?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _sum_DoubleNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<decimal> SumAsync(this IQueryable<decimal> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        public static Task<decimal> SumAsync(this IQueryable<decimal> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _sum_Decimal,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync(this IQueryable<decimal?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.SumAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the sum of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the values in the sequence.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync(this IQueryable<decimal?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _sum_DecimalNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int>(\n                    Expression.Call(\n                        null,\n                        _sum_Int_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int32.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<int?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<int?>(\n                    Expression.Call(\n                        null,\n                        _sum_IntNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long>(\n                    Expression.Call(\n                        null,\n                        _sum_Long_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Int64.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<long?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<long?>(\n                    Expression.Call(\n                        null,\n                        _sum_LongNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _sum_Float_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _sum_FloatNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _sum_Double_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _sum_DoubleNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _sum_Decimal_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.SumAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the sum of the sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\">\n        /// A sequence of values of type <typeparamref name=\"TSource\" /> .\n        /// </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the sum of the projected values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"OverflowException\">\n        /// The number of elements in\n        /// <paramref name=\"source\" />\n        /// is larger than\n        /// <see cref=\"Decimal.MaxValue\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> SumAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _sum_DecimalNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<int> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<int> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Int,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<int?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int32\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<int?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_IntNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<long> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<long> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Long,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<long?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Int64\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<long?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_LongNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<float> AverageAsync(this IQueryable<float> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<float> AverageAsync(this IQueryable<float> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _average_Float,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync(this IQueryable<float?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Single\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync(this IQueryable<float?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _average_FloatNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<double> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<double> AverageAsync(this IQueryable<double> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Double,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<double?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Double\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync(this IQueryable<double?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_DoubleNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<decimal> AverageAsync(this IQueryable<decimal> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        public static Task<decimal> AverageAsync(this IQueryable<decimal> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _average_Decimal,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync(this IQueryable<decimal?> source)\n        {\n            Check.NotNull(source, \"source\");\n\n            return source.AverageAsync(CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <param name=\"source\">\n        /// A sequence of nullable <see cref=\"Decimal\" /> values to calculate the average of.\n        /// </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync(this IQueryable<decimal?> source, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _average_DecimalNullable,\n                        new[] { source.Expression }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Int_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int32\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_IntNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Long_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Int64\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_LongNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float>(\n                    Expression.Call(\n                        null,\n                        _average_Float_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Single\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<float?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<float?>(\n                    Expression.Call(\n                        null,\n                        _average_FloatNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double>(\n                    Expression.Call(\n                        null,\n                        _average_Double_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Double\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<double?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<double?>(\n                    Expression.Call(\n                        null,\n                        _average_DoubleNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// contains no elements.\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal>(\n                    Expression.Call(\n                        null,\n                        _average_Decimal_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            return source.AverageAsync(selector, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Asynchronously computes the average of a sequence of nullable <see cref=\"Decimal\" /> values that is obtained\n        /// by invoking a projection function on each element of the input sequence.\n        /// </summary>\n        /// <remarks>\n        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n        /// that any asynchronous operations have completed before calling another method on this context.\n        /// </remarks>\n        /// <typeparam name=\"TSource\">\n        /// The type of the elements of <paramref name=\"source\" /> .\n        /// </typeparam>\n        /// <param name=\"source\"> A sequence of values to calculate the average of. </param>\n        /// <param name=\"selector\"> A projection function to apply to each element. </param>\n        /// <param name=\"cancellationToken\">\n        /// A <see cref=\"CancellationToken\" /> to observe while waiting for the task to complete.\n        /// </param>\n        /// <returns>\n        /// A task that represents the asynchronous operation.\n        /// The task result contains the average of the sequence of values.\n        /// </returns>\n        /// <exception cref=\"ArgumentNullException\">\n        /// <paramref name=\"source\" />\n        /// or\n        /// <paramref name=\"selector\" />\n        /// is\n        /// <c>null</c>\n        /// .\n        /// </exception>\n        /// <exception cref=\"InvalidOperationException\">\n        /// <paramref name=\"source\" />\n        /// doesn't implement\n        /// <see cref=\"IDbAsyncQueryProvider\" />\n        /// .\n        /// </exception>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1011:ConsiderPassingBaseTypesAsParameters\")]\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static Task<decimal?> AverageAsync<TSource>(\n            this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(selector, \"selector\");\n\n            cancellationToken.ThrowIfCancellationRequested();\n\n            var provider = source.Provider as IDbAsyncQueryProvider;\n            if (provider != null)\n            {\n                return provider.ExecuteAsync<decimal?>(\n                    Expression.Call(\n                        null,\n                        _average_DecimalNullable_Selector.MakeGenericMethod(typeof(TSource)),\n                        new[] { source.Expression, Expression.Quote(selector) }\n                        ),\n                    cancellationToken);\n            }\n            else\n            {\n                throw Error.IQueryable_Provider_Not_Async();\n            }\n        }\n\n#endif\n\n        #endregion\n\n        #region Paging\n        private static readonly MethodInfo _skip = GetMethod(\n            \"Skip\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(int)\n                });\n\n        private static readonly MethodInfo _take = GetMethod(\n            \"Take\", (T) => new[]\n                {\n                    typeof(IQueryable<>).MakeGenericType(T),\n                    typeof(int)\n                });\n\n        /// <summary>\n        /// Bypasses a specified number of elements in a sequence and then returns the remaining elements.\n        /// </summary>\n        /// <typeparam name=\"TSource\">The type of the elements of source.</typeparam>\n        /// <param name=\"source\">A sequence to return elements from.</param>\n        /// <param name=\"countAccessor\">An expression that evaluates to the number of elements to skip.</param>\n        /// <returns>A sequence that contains elements that occur after the specified index in the \n        /// input sequence.</returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static IQueryable<TSource> Skip<TSource>(\n            this IQueryable<TSource> source, Expression<Func<int>> countAccessor)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(countAccessor, \"countAccessor\");\n\n            return source.Provider.CreateQuery<TSource>(\n                Expression.Call(\n                    null,\n                    _skip.MakeGenericMethod(new[] { typeof(TSource) }),\n                    new[] { source.Expression, countAccessor.Body }));\n        }\n\n        /// <summary>\n        /// Returns a specified number of contiguous elements from the start of a sequence.\n        /// </summary>\n        /// <typeparam name=\"TSource\">The type of the elements of source.</typeparam>\n        /// <param name=\"source\">The sequence to return elements from.</param>\n        /// <param name=\"countAccessor\">An expression that evaluates to the number of elements \n        /// to return.</param>\n        /// <returns>A sequence that contains the specified number of elements from the \n        /// start of the input sequence.</returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\")]\n        public static IQueryable<TSource> Take<TSource>(\n            this IQueryable<TSource> source, Expression<Func<int>> countAccessor)\n        {\n            Check.NotNull(source, \"source\");\n            Check.NotNull(countAccessor, \"countAccessor\");\n\n            return source.Provider.CreateQuery<TSource>(\n                Expression.Call(\n                    null,\n                    _take.MakeGenericMethod(new[] { typeof(TSource) }),\n                    new[] { source.Expression, countAccessor.Body }));\n        }\n        #endregion\n\n        #region Private and internal methods\n\n        internal static ObjectQuery TryGetObjectQuery(this IQueryable source)\n        {\n            if (source == null)\n            {\n                return null;\n            }\n\n            var direct = source as ObjectQuery;\n            if (direct != null)\n            {\n                return direct;\n            }\n\n            var indirect = source as IInternalQueryAdapter;\n            if (indirect != null)\n            {\n                return indirect.InternalQuery.ObjectQuery;\n            }\n\n            return null;\n        }\n\n#if !NET40\n\n        private static IDbAsyncEnumerable AsDbAsyncEnumerable(this IQueryable source)\n        {\n            DebugCheck.NotNull(source);\n\n            var enumerable = source as IDbAsyncEnumerable;\n            if (enumerable != null)\n            {\n                return enumerable;\n            }\n            else\n            {\n                throw Error.IQueryable_Not_Async(string.Empty);\n            }\n        }\n\n        private static IDbAsyncEnumerable<T> AsDbAsyncEnumerable<T>(this IQueryable<T> source)\n        {\n            DebugCheck.NotNull(source);\n\n            var enumerable = source as IDbAsyncEnumerable<T>;\n            if (enumerable != null)\n            {\n                return enumerable;\n            }\n            else\n            {\n                throw Error.IQueryable_Not_Async(\"<\" + typeof(T) + \">\");\n            }\n        }\n\n        private static MethodInfo GetMethod(string methodName, Func<Type[]> getParameterTypes)\n        {\n            return GetMethod(methodName, getParameterTypes.Method, 0);\n        }\n\n        private static MethodInfo GetMethod(string methodName, Func<Type, Type, Type[]> getParameterTypes)\n        {\n            return GetMethod(methodName, getParameterTypes.Method, 2);\n        }\n\n#endif\n\n        private static MethodInfo GetMethod(string methodName, Func<Type, Type[]> getParameterTypes)\n        {\n            return GetMethod(methodName, getParameterTypes.Method, 1);\n        }\n\n        private static MethodInfo GetMethod(string methodName, MethodInfo getParameterTypesMethod, int genericArgumentsCount)\n        {\n            var candidates = typeof(Queryable).GetDeclaredMethods(methodName);\n\n            foreach (MethodInfo candidate in candidates)\n            {\n                var genericArguments = candidate.GetGenericArguments();\n                if (genericArguments.Length == genericArgumentsCount\n                    && Matches(candidate, (Type[])getParameterTypesMethod.Invoke(null, genericArguments)))\n                {\n                    return candidate;\n                }\n            }\n\n            Debug.Assert(\n                false, String.Format(\n                    \"Method '{0}' with parameters '{1}' not found\", methodName, PrettyPrint(getParameterTypesMethod, genericArgumentsCount)));\n\n            return null;\n        }\n\n        private static bool Matches(MethodInfo methodInfo, Type[] parameterTypes)\n        {\n            return methodInfo.GetParameters().Select(p => p.ParameterType).SequenceEqual(parameterTypes);\n        }\n\n        [SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\",\n            Justification = \"Called from an assert\")]\n        private static string PrettyPrint(MethodInfo getParameterTypesMethod, int genericArgumentsCount)\n        {\n            var dummyTypes = new Type[genericArgumentsCount];\n            for (var i = 0; i < genericArgumentsCount; i++)\n            {\n                dummyTypes[i] = typeof(object);\n            }\n\n            var parameterTypes = (Type[])getParameterTypesMethod.Invoke(null, dummyTypes);\n            var textRepresentations = new string[parameterTypes.Length];\n\n            for (var i = 0; i < parameterTypes.Length; i++)\n            {\n                textRepresentations[i] = parameterTypes[i].ToString();\n            }\n\n            return \"(\" + string.Join(\", \", textRepresentations) + \")\";\n        }\n\n        #endregion\n    }\n}\n",
      "Start": 0,
      "Length": 335625,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework5\\EntityFramework\\QueryableExtensions.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework5\\EntityFramework\\QueryableExtensions.cs"
  }
]