[
  {
    "Text": "ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null)",
    "Start": 4340,
    "Length": 134,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.Data.Entity.Resources;\n    using System.Linq;\n    using Xunit;\n\n    public class AssociationSetMappingTests\n    {\n        [Fact]\n        public void Can_initialize_with_entity_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            var associationTypeMapping = associationSetMapping.TypeMappings.Single();\n\n            Assert.NotNull(associationTypeMapping);\n            Assert.Same(associationSet.ElementType, associationTypeMapping.Types.Single());\n            Assert.Same(associationSetMapping, associationTypeMapping.SetMapping);\n\n            var mappingFragment = associationTypeMapping.MappingFragments.Single();\n\n            Assert.Same(entitySet, mappingFragment.TableSet);\n        }\n\n        [Fact]\n        public void Can_get_association_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(associationSet, associationSetMapping.AssociationSet);\n        }\n\n        [Fact]\n        public void Can_get_and_set_store_entity_set()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Same(entitySet1, associationSetMapping.StoreEntitySet);\n\n            var entitySet2 = new EntitySet();\n\n            associationSetMapping.StoreEntitySet = entitySet2;\n\n            Assert.Same(entitySet2, associationSetMapping.StoreEntitySet);\n        }\n\n        [Fact]\n        public void Can_get_table()\n        {\n            var entityType = new EntityType(\"E\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", null, null, null, entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(entityType, associationSetMapping.Table);\n        }\n\n        [Fact]\n        public void Can_get_and_set_source_and_target_end_mappings()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Null(associationSetMapping.SourceEndMapping);\n            Assert.Null(associationSetMapping.TargetEndMapping);\n\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SourceEndMapping = sourceEndMapping;\n\n            Assert.Same(sourceEndMapping, associationSetMapping.SourceEndMapping);\n\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.TargetEndMapping = targetEndMapping;\n\n            Assert.Same(targetEndMapping, associationSetMapping.TargetEndMapping);\n        }\n\n        [Fact]\n        public void Can_add_get_remove_column_conditions()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Empty(associationSetMapping.Conditions);\n\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n\n            Assert.Same(conditionPropertyMapping, associationSetMapping.Conditions.Single());\n\n            associationSetMapping.RemoveCondition(conditionPropertyMapping);\n\n            Assert.Empty(associationSetMapping.Conditions);\n        }\n\n        [Fact]\n        public void Cannot_set_source_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.SourceEndMapping = sourceEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set_target_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.TargetEndMapping = targetEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set__modification_function_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_add_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.AddCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_remove_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.RemoveCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void SetReadOnly_is_called_on_child_mapping_items()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.SSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", \"Q\", entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping = new AssociationSetMapping(associationSet, entitySet, null);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping;\n\n            Assert.False(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.False(modificationFunctionMapping.IsReadOnly);\n            associationSetMapping.SetReadOnly();\n            Assert.True(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.True(modificationFunctionMapping.IsReadOnly);\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 9997,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\AssociationSetMappingTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\AssociationSetMappingTests.cs"
  },
  {
    "Text": "ConditionPropertyMapping(null, column1, 42, null)",
    "Start": 559,
    "Length": 49,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using Xunit;\n\n    public class ConditionPropertyMappingTests\n    {\n        [Fact]\n        public void Can_get_and_set_column_property()\n        {\n            var column1 = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, column1, 42, null);\n\n            Assert.Same(column1, conditionPropertyMapping.Column);\n\n            var column2 = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n\n            conditionPropertyMapping.Column = column2;\n\n            Assert.Same(column2, conditionPropertyMapping.Column);\n        }        \n\n        [Fact]\n        public void Can_get_and_set_Value()\n        {\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n            \n            Assert.Equal(42, conditionPropertyMapping.Value);\n            Assert.Null(conditionPropertyMapping.IsNull);\n        }\n\n        [Fact]\n        public void Can_get_and_set_IsNull()\n        {\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), null, false);\n\n            Assert.Null(conditionPropertyMapping.Value);\n            Assert.False((bool)conditionPropertyMapping.IsNull);\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 1767,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\ConditionPropertyMappingTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\ConditionPropertyMappingTests.cs"
  }
]