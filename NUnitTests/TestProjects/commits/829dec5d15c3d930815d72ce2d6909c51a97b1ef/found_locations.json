[
  {
    "Start": 4340,
    "Length": 134,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\AssociationSetMappingTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.Data.Entity.Resources;\n    using System.Linq;\n    using Xunit;\n\n    public class AssociationSetMappingTests\n    {\n        [Fact]\n        public void Can_initialize_with_entity_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            var associationTypeMapping = associationSetMapping.TypeMappings.Single();\n\n            Assert.NotNull(associationTypeMapping);\n            Assert.Same(associationSet.ElementType, associationTypeMapping.Types.Single());\n            Assert.Same(associationSetMapping, associationTypeMapping.SetMapping);\n\n            var mappingFragment = associationTypeMapping.MappingFragments.Single();\n\n            Assert.Same(entitySet, mappingFragment.TableSet);\n        }\n\n        [Fact]\n        public void Can_get_association_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(associationSet, associationSetMapping.AssociationSet);\n        }\n\n        [Fact]\n        public void Can_get_and_set_store_entity_set()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Same(entitySet1, associationSetMapping.StoreEntitySet);\n\n            var entitySet2 = new EntitySet();\n\n            associationSetMapping.StoreEntitySet = entitySet2;\n\n            Assert.Same(entitySet2, associationSetMapping.StoreEntitySet);\n        }\n\n        [Fact]\n        public void Can_get_table()\n        {\n            var entityType = new EntityType(\"E\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", null, null, null, entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(entityType, associationSetMapping.Table);\n        }\n\n        [Fact]\n        public void Can_get_and_set_source_and_target_end_mappings()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Null(associationSetMapping.SourceEndMapping);\n            Assert.Null(associationSetMapping.TargetEndMapping);\n\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SourceEndMapping = sourceEndMapping;\n\n            Assert.Same(sourceEndMapping, associationSetMapping.SourceEndMapping);\n\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.TargetEndMapping = targetEndMapping;\n\n            Assert.Same(targetEndMapping, associationSetMapping.TargetEndMapping);\n        }\n\n        [Fact]\n        public void Can_add_get_remove_column_conditions()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Empty(associationSetMapping.Conditions);\n\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n\n            Assert.Same(conditionPropertyMapping, associationSetMapping.Conditions.Single());\n\n            associationSetMapping.RemoveCondition(conditionPropertyMapping);\n\n            Assert.Empty(associationSetMapping.Conditions);\n        }\n\n        [Fact]\n        public void Cannot_set_source_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.SourceEndMapping = sourceEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set_target_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.TargetEndMapping = targetEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set__modification_function_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_add_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.AddCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_remove_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.RemoveCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void SetReadOnly_is_called_on_child_mapping_items()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.SSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", \"Q\", entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping = new AssociationSetMapping(associationSet, entitySet, null);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping;\n\n            Assert.False(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.False(modificationFunctionMapping.IsReadOnly);\n            associationSetMapping.SetReadOnly();\n            Assert.True(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.True(modificationFunctionMapping.IsReadOnly);\n        }\n    }\n}\n"
  },
  {
    "Start": 7555,
    "Length": 134,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\AssociationSetMappingTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.Data.Entity.Resources;\n    using System.Linq;\n    using Xunit;\n\n    public class AssociationSetMappingTests\n    {\n        [Fact]\n        public void Can_initialize_with_entity_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            var associationTypeMapping = associationSetMapping.TypeMappings.Single();\n\n            Assert.NotNull(associationTypeMapping);\n            Assert.Same(associationSet.ElementType, associationTypeMapping.Types.Single());\n            Assert.Same(associationSetMapping, associationTypeMapping.SetMapping);\n\n            var mappingFragment = associationTypeMapping.MappingFragments.Single();\n\n            Assert.Same(entitySet, mappingFragment.TableSet);\n        }\n\n        [Fact]\n        public void Can_get_association_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(associationSet, associationSetMapping.AssociationSet);\n        }\n\n        [Fact]\n        public void Can_get_and_set_store_entity_set()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Same(entitySet1, associationSetMapping.StoreEntitySet);\n\n            var entitySet2 = new EntitySet();\n\n            associationSetMapping.StoreEntitySet = entitySet2;\n\n            Assert.Same(entitySet2, associationSetMapping.StoreEntitySet);\n        }\n\n        [Fact]\n        public void Can_get_table()\n        {\n            var entityType = new EntityType(\"E\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", null, null, null, entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(entityType, associationSetMapping.Table);\n        }\n\n        [Fact]\n        public void Can_get_and_set_source_and_target_end_mappings()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Null(associationSetMapping.SourceEndMapping);\n            Assert.Null(associationSetMapping.TargetEndMapping);\n\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SourceEndMapping = sourceEndMapping;\n\n            Assert.Same(sourceEndMapping, associationSetMapping.SourceEndMapping);\n\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.TargetEndMapping = targetEndMapping;\n\n            Assert.Same(targetEndMapping, associationSetMapping.TargetEndMapping);\n        }\n\n        [Fact]\n        public void Can_add_get_remove_column_conditions()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Empty(associationSetMapping.Conditions);\n\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n\n            Assert.Same(conditionPropertyMapping, associationSetMapping.Conditions.Single());\n\n            associationSetMapping.RemoveCondition(conditionPropertyMapping);\n\n            Assert.Empty(associationSetMapping.Conditions);\n        }\n\n        [Fact]\n        public void Cannot_set_source_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.SourceEndMapping = sourceEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set_target_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.TargetEndMapping = targetEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set__modification_function_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_add_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.AddCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_remove_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.RemoveCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void SetReadOnly_is_called_on_child_mapping_items()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.SSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", \"Q\", entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping = new AssociationSetMapping(associationSet, entitySet, null);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping;\n\n            Assert.False(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.False(modificationFunctionMapping.IsReadOnly);\n            associationSetMapping.SetReadOnly();\n            Assert.True(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.True(modificationFunctionMapping.IsReadOnly);\n        }\n    }\n}\n"
  },
  {
    "Start": 8429,
    "Length": 134,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\AssociationSetMappingTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.Data.Entity.Resources;\n    using System.Linq;\n    using Xunit;\n\n    public class AssociationSetMappingTests\n    {\n        [Fact]\n        public void Can_initialize_with_entity_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            var associationTypeMapping = associationSetMapping.TypeMappings.Single();\n\n            Assert.NotNull(associationTypeMapping);\n            Assert.Same(associationSet.ElementType, associationTypeMapping.Types.Single());\n            Assert.Same(associationSetMapping, associationTypeMapping.SetMapping);\n\n            var mappingFragment = associationTypeMapping.MappingFragments.Single();\n\n            Assert.Same(entitySet, mappingFragment.TableSet);\n        }\n\n        [Fact]\n        public void Can_get_association_set()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(associationSet, associationSetMapping.AssociationSet);\n        }\n\n        [Fact]\n        public void Can_get_and_set_store_entity_set()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Same(entitySet1, associationSetMapping.StoreEntitySet);\n\n            var entitySet2 = new EntitySet();\n\n            associationSetMapping.StoreEntitySet = entitySet2;\n\n            Assert.Same(entitySet2, associationSetMapping.StoreEntitySet);\n        }\n\n        [Fact]\n        public void Can_get_table()\n        {\n            var entityType = new EntityType(\"E\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", null, null, null, entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Same(entityType, associationSetMapping.Table);\n        }\n\n        [Fact]\n        public void Can_get_and_set_source_and_target_end_mappings()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Null(associationSetMapping.SourceEndMapping);\n            Assert.Null(associationSetMapping.TargetEndMapping);\n\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SourceEndMapping = sourceEndMapping;\n\n            Assert.Same(sourceEndMapping, associationSetMapping.SourceEndMapping);\n\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.TargetEndMapping = targetEndMapping;\n\n            Assert.Same(targetEndMapping, associationSetMapping.TargetEndMapping);\n        }\n\n        [Fact]\n        public void Can_add_get_remove_column_conditions()\n        {\n            var entitySet1 = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet1);\n\n            Assert.Empty(associationSetMapping.Conditions);\n\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n\n            Assert.Same(conditionPropertyMapping, associationSetMapping.Conditions.Single());\n\n            associationSetMapping.RemoveCondition(conditionPropertyMapping);\n\n            Assert.Empty(associationSetMapping.Conditions);\n        }\n\n        [Fact]\n        public void Cannot_set_source_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var sourceEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.SourceEndMapping = sourceEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set_target_end_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var targetEndMapping = new EndPropertyMapping();\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.TargetEndMapping = targetEndMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_set__modification_function_mapping_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => (associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_add_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.AddCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_remove_condition_when_read_only()\n        {\n            var entitySet = new EntitySet();\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping\n                = new AssociationSetMapping(associationSet, entitySet);\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            associationSetMapping.AddCondition(conditionPropertyMapping);\n            associationSetMapping.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => associationSetMapping.RemoveCondition(conditionPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void SetReadOnly_is_called_on_child_mapping_items()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.SSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", \"Q\", entityType);\n            var associationSet = new AssociationSet(\"AS\", new AssociationType(\"A\", XmlConstants.ModelNamespace_3, false, DataSpace.CSpace));\n            var associationSetMapping = new AssociationSetMapping(associationSet, entitySet, null);\n            var modificationFunctionMapping = new AssociationSetModificationFunctionMapping(associationSet, null, null);\n\n            associationSetMapping.ModificationFunctionMapping = modificationFunctionMapping;\n\n            Assert.False(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.False(modificationFunctionMapping.IsReadOnly);\n            associationSetMapping.SetReadOnly();\n            Assert.True(associationSetMapping.AssociationTypeMapping.IsReadOnly);\n            Assert.True(modificationFunctionMapping.IsReadOnly);\n        }\n    }\n}\n"
  },
  {
    "Start": 559,
    "Length": 49,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\ConditionPropertyMappingTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using Xunit;\n\n    public class ConditionPropertyMappingTests\n    {\n        [Fact]\n        public void Can_get_and_set_column_property()\n        {\n            var column1 = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, column1, 42, null);\n\n            Assert.Same(column1, conditionPropertyMapping.Column);\n\n            var column2 = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n\n            conditionPropertyMapping.Column = column2;\n\n            Assert.Same(column2, conditionPropertyMapping.Column);\n        }        \n\n        [Fact]\n        public void Can_get_and_set_Value()\n        {\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n            \n            Assert.Equal(42, conditionPropertyMapping.Value);\n            Assert.Null(conditionPropertyMapping.IsNull);\n        }\n\n        [Fact]\n        public void Can_get_and_set_IsNull()\n        {\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), null, false);\n\n            Assert.Null(conditionPropertyMapping.Value);\n            Assert.False((bool)conditionPropertyMapping.IsNull);\n        }\n    }\n}\n"
  },
  {
    "Start": 1074,
    "Length": 134,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\ConditionPropertyMappingTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using Xunit;\n\n    public class ConditionPropertyMappingTests\n    {\n        [Fact]\n        public void Can_get_and_set_column_property()\n        {\n            var column1 = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, column1, 42, null);\n\n            Assert.Same(column1, conditionPropertyMapping.Column);\n\n            var column2 = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n\n            conditionPropertyMapping.Column = column2;\n\n            Assert.Same(column2, conditionPropertyMapping.Column);\n        }        \n\n        [Fact]\n        public void Can_get_and_set_Value()\n        {\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n            \n            Assert.Equal(42, conditionPropertyMapping.Value);\n            Assert.Null(conditionPropertyMapping.IsNull);\n        }\n\n        [Fact]\n        public void Can_get_and_set_IsNull()\n        {\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), null, false);\n\n            Assert.Null(conditionPropertyMapping.Value);\n            Assert.False((bool)conditionPropertyMapping.IsNull);\n        }\n    }\n}\n"
  },
  {
    "Start": 15535,
    "Length": 134,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\MappingFragmentTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Collections.Generic;\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.Data.Entity.Resources;\n    using System.Linq;\n    using Xunit;\n\n    public class MappingFragmentTests\n    {\n        [Fact]\n        public void Can_get_flattened_properties_for_nested_mapping()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Empty(mappingFragment.ColumnMappings);\n\n            var columnProperty = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var property1 = EdmProperty.CreateComplex(\"P1\", new ComplexType(\"CT\"));\n            var property2 = new EdmProperty(\"P2\");\n\n            var columnMappingBuilder1 = new ColumnMappingBuilder(columnProperty, new[] { property1, property2 });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder1);\n\n            var columnMappingBuilder2 = new ColumnMappingBuilder(columnProperty, new[] { property2 });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder2);\n\n            var columnMappingBuilders = mappingFragment.FlattenedProperties.ToList();\n\n            Assert.Equal(2, columnMappingBuilders.Count());\n            Assert.True(columnMappingBuilder1.PropertyPath.SequenceEqual(columnMappingBuilders.First().PropertyPath));\n            Assert.True(columnMappingBuilder2.PropertyPath.SequenceEqual(columnMappingBuilders.Last().PropertyPath));\n        }\n\n        [Fact]\n        public void Can_not_create_mapping_fragment_with_null_entity_set()\n        {\n            var entityTypeMapping = \n                new EntityTypeMapping(\n                new EntitySetMapping(\n                    new EntitySet(),\n                    new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace))));\n\n            Assert.Equal(\n                \"storeEntitySet\",\n                Assert.Throws<ArgumentNullException>(\n                    () => new MappingFragment(null, entityTypeMapping, false)).ParamName);\n        }\n\n        [Fact]\n        public void Can_not_create_mapping_fragment_with_null_type_mapping()\n        {\n            Assert.Equal(\n                \"typeMapping\",\n                Assert.Throws<ArgumentNullException>(\n                    () => new MappingFragment(new EntitySet(), null, false)).ParamName);\n        }\n\n        [Fact]\n        public void Can_add_and_remove_properties()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Empty(mappingFragment.PropertyMappings);\n\n            var scalarPropertyMapping = new ScalarPropertyMapping(new EdmProperty(\"P\"), new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })));\n\n            mappingFragment.AddPropertyMapping(scalarPropertyMapping);\n\n            Assert.Same(scalarPropertyMapping, mappingFragment.PropertyMappings.Single());\n\n            mappingFragment.RemovePropertyMapping(scalarPropertyMapping);\n\n            Assert.Empty(mappingFragment.PropertyMappings);\n        }\n\n        [Fact]\n        public void Can_add_scalar_column_mapping()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Empty(mappingFragment.ColumnMappings);\n\n            var columnProperty = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var property = new EdmProperty(\"P\");\n\n            var columnMappingBuilder = new ColumnMappingBuilder(columnProperty, new[] { property });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder);\n\n            Assert.Same(columnMappingBuilder, mappingFragment.ColumnMappings.Single());\n\n            var scalarPropertyMapping = (ScalarPropertyMapping)mappingFragment.PropertyMappings.Single();\n\n            Assert.Same(columnProperty, scalarPropertyMapping.Column);\n            Assert.Same(property, scalarPropertyMapping.Property);\n        }\n\n        [Fact]\n        public void Cannot_add_invalid_column_mapping_builder()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Equal(\n                \"columnMappingBuilder\",\n                Assert.Throws<ArgumentNullException>(\n                    () => mappingFragment.AddColumnMapping(null)).ParamName);\n\n            Assert.Equal(\n                Strings.InvalidColumnBuilderArgument(\"columnBuilderMapping\"),\n                Assert.Throws<ArgumentException>(\n                () => mappingFragment.AddColumnMapping(\n                    new ColumnMappingBuilder(new EdmProperty(\"S\"), new List<EdmProperty>()))).Message);\n\n\n        }\n\n        [Fact]\n        public void Cannot_add_duplicate_column_mapping_builder()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            var columnMappingBuilder =\n                new ColumnMappingBuilder(new EdmProperty(\"S\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), new[] { new EdmProperty(\"S\") });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder);\n\n            Assert.Equal(\n                Strings.InvalidColumnBuilderArgument(\"columnBuilderMapping\"),\n                Assert.Throws<ArgumentException>(\n                () => mappingFragment.AddColumnMapping(columnMappingBuilder)).Message);            \n        }\n\n        [Fact]\n        public void Can_remove_scalar_column_mapping()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Empty(mappingFragment.ColumnMappings);\n\n            var columnProperty = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var property = new EdmProperty(\"P\");\n\n            var columnMappingBuilder = new ColumnMappingBuilder(columnProperty, new[] { property });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder);\n\n            Assert.Same(columnMappingBuilder, mappingFragment.ColumnMappings.Single());\n            Assert.NotEmpty(mappingFragment.PropertyMappings);\n\n            mappingFragment.RemoveColumnMapping(columnMappingBuilder);\n\n            Assert.Empty(mappingFragment.ColumnMappings);\n            Assert.Empty(mappingFragment.PropertyMappings);\n        }\n\n        [Fact]\n        public void Can_update_scalar_column_mapping()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            var property = new EdmProperty(\"P\");\n\n            mappingFragment.AddColumnMapping(new ColumnMappingBuilder(new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), new[] { property }));\n\n            var columnProperty = new EdmProperty(\"C'\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n\n            var columnMappingBuilder = new ColumnMappingBuilder(columnProperty, new[] { property });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder);\n\n            var scalarPropertyMapping = (ScalarPropertyMapping)mappingFragment.PropertyMappings.Single();\n\n            Assert.Same(columnProperty, scalarPropertyMapping.Column);\n            Assert.Same(property, scalarPropertyMapping.Property);\n        }\n\n        [Fact]\n        public void Can_add_complex_column_mapping()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Empty(mappingFragment.ColumnMappings);\n\n            var columnProperty = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var property1 = EdmProperty.CreateComplex(\"P1\", new ComplexType(\"CT\"));\n            var property2 = new EdmProperty(\"P2\");\n\n            var columnMappingBuilder = new ColumnMappingBuilder(columnProperty, new[] { property1, property2 });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder);\n\n            Assert.Same(columnMappingBuilder, mappingFragment.ColumnMappings.Single());\n\n            var complexPropertyMapping = (ComplexPropertyMapping)mappingFragment.PropertyMappings.Single();\n\n            var typeMapping = complexPropertyMapping.TypeMappings.Single();\n\n            var scalarPropertyMapping = (ScalarPropertyMapping)typeMapping.PropertyMappings.Single();\n\n            Assert.Same(columnProperty, scalarPropertyMapping.Column);\n            Assert.Same(property2, scalarPropertyMapping.Property);\n        }\n\n        [Fact]\n        public void Can_remove_complex_column_mapping()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Empty(mappingFragment.ColumnMappings);\n\n            var columnProperty = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            var property1 = EdmProperty.CreateComplex(\"P1\", new ComplexType(\"CT\"));\n            var property2 = new EdmProperty(\"P2\");\n\n            var columnMappingBuilder = new ColumnMappingBuilder(columnProperty, new[] { property1, property2 });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder);\n\n            Assert.Same(columnMappingBuilder, mappingFragment.ColumnMappings.Single());\n            Assert.NotEmpty(mappingFragment.PropertyMappings);\n\n            mappingFragment.RemoveColumnMapping(columnMappingBuilder);\n\n            Assert.Empty(mappingFragment.ColumnMappings);\n            Assert.Empty(mappingFragment.PropertyMappings);\n        }\n\n        [Fact]\n        public void Can_update_complex_column_mapping()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            var property1 = EdmProperty.CreateComplex(\"P1\", new ComplexType(\"CT\"));\n            var property2 = new EdmProperty(\"P2\");\n\n            var columnMappingBuilder1 = new ColumnMappingBuilder(new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), new[] { property1, property2 });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder1);\n\n            var columnProperty = new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n\n            var columnMappingBuilder2 = new ColumnMappingBuilder(columnProperty, new[] { property1, property2 });\n\n            mappingFragment.AddColumnMapping(columnMappingBuilder2);\n\n            var complexPropertyMapping = (ComplexPropertyMapping)mappingFragment.PropertyMappings.Single();\n\n            var typeMapping = complexPropertyMapping.TypeMappings.Single();\n\n            var scalarPropertyMapping = (ScalarPropertyMapping)typeMapping.PropertyMappings.Single();\n\n            Assert.Same(columnProperty, scalarPropertyMapping.Column);\n            Assert.Same(property2, scalarPropertyMapping.Property);\n        }\n\n        [Fact]\n        public void Can_get_and_set_table_set()\n        {\n            var tableSet = new EntitySet();\n\n            var mappingFragment\n                = new MappingFragment(\n                    tableSet,\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Same(tableSet, mappingFragment.TableSet);\n\n            tableSet = new EntitySet();\n\n            mappingFragment.TableSet = tableSet;\n\n            Assert.Same(tableSet, mappingFragment.TableSet);\n        }\n\n        [Fact]\n        public void Can_get_table()\n        {\n            var table = new EntityType(\"E\", \"N\", DataSpace.CSpace);\n\n            var tableSet = new EntitySet(\"ES\", null, null, null, table);\n\n            var mappingFragment\n                = new MappingFragment(\n                    tableSet,\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Same(table, mappingFragment.Table);\n        }\n\n        [Fact]\n        public void Can_add_and_remove_column_conditions()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            Assert.Empty(mappingFragment.ColumnConditions);\n\n            var conditionPropertyMapping\n                = new ConditionPropertyMapping(null, new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })), 42, null);\n\n            mappingFragment.AddConditionProperty(conditionPropertyMapping);\n\n            Assert.Same(conditionPropertyMapping, mappingFragment.ColumnConditions.Single());\n\n            mappingFragment.RemoveConditionProperty(conditionPropertyMapping);\n\n            Assert.Empty(mappingFragment.ColumnConditions);\n        }\n\n        [Fact]\n        public void Cannot_add_property_when_read_only()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            mappingFragment.SetReadOnly();\n\n            var scalarPropertyMapping = new ScalarPropertyMapping(new EdmProperty(\"P\"), new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })));\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => mappingFragment.AddPropertyMapping(scalarPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_remove_property_when_read_only()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n            var scalarPropertyMapping = new ScalarPropertyMapping(new EdmProperty(\"P\"), new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })));\n\n            mappingFragment.AddPropertyMapping(scalarPropertyMapping);\n\n            mappingFragment.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => mappingFragment.RemovePropertyMapping(scalarPropertyMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_add_condition_when_read_only()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n\n            mappingFragment.SetReadOnly();\n\n            var conditionMapping = new IsNullConditionMapping(new EdmProperty(\"P\"), true);\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => mappingFragment.AddCondition(conditionMapping)).Message);\n        }\n\n        [Fact]\n        public void Cannot_remove_condition_when_read_only()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n            var conditionMapping = new IsNullConditionMapping(new EdmProperty(\"P\"), true);\n\n            mappingFragment.AddCondition(conditionMapping);\n\n            mappingFragment.SetReadOnly();\n\n            Assert.Equal(\n                Strings.OperationOnReadOnlyItem,\n                Assert.Throws<InvalidOperationException>(\n                    () => mappingFragment.RemoveCondition(conditionMapping)).Message);\n        }\n\n        [Fact]\n        public void SetReadOnly_is_called_on_child_mapping_items()\n        {\n            var mappingFragment\n                = new MappingFragment(\n                    new EntitySet(),\n                    new EntityTypeMapping(\n                        new EntitySetMapping(\n                            new EntitySet(),\n                            new EntityContainerMapping(new EntityContainer(\"C\", DataSpace.CSpace)))), false);\n            var scalarPropertyMapping = new ScalarPropertyMapping(new EdmProperty(\"P\"), new EdmProperty(\"C\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace })));\n            var conditionMapping = new IsNullConditionMapping(new EdmProperty(\"P\"), true);\n\n            mappingFragment.AddPropertyMapping(scalarPropertyMapping);\n            mappingFragment.AddCondition(conditionMapping);\n\n            Assert.False(scalarPropertyMapping.IsReadOnly);\n            Assert.False(conditionMapping.IsReadOnly);\n            mappingFragment.SetReadOnly();\n            Assert.True(scalarPropertyMapping.IsReadOnly);\n            Assert.True(conditionMapping.IsReadOnly);\n        }\n    }\n}\n"
  },
  {
    "Start": 18643,
    "Length": 52,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\MetadataMappingHasherVisitorTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.IO;\n    using System.Linq;\n    using System.Xml;\n    using Xunit;\n\n    public class MetadataMappingHasherVisitorTests\n    {\n        #region XML\n        const string ssdl1 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel.Store\"\" Provider=\"\"System.Data.SqlClient\"\" ProviderManifestToken=\"\"2008\"\" Alias=\"\"Self\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm/ssdl\"\">\n  <EntityType Name=\"\"Customers\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"false\"\" />\n    <Property Name=\"\"ContactName\"\" Type=\"\"nvarchar\"\" MaxLength=\"\"30\"\" Nullable=\"\"true\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Orders\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"OrderID\"\" Type=\"\"int\"\" StoreGeneratedPattern=\"\"Identity\"\" Nullable=\"\"false\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"true\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customers\"\" Multiplicity=\"\"0..1\"\" />\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Orders\"\" Multiplicity=\"\"*\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindModelStoreContainer\"\">\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customers\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Orders\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string ssdl2 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel.Store\"\" Provider=\"\"System.Data.SqlClient\"\" ProviderManifestToken=\"\"2008\"\" Alias=\"\"Self\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm/ssdl\"\">\n  <EntityType Name=\"\"Orders\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"true\"\" />\n    <Property Name=\"\"OrderID\"\" Type=\"\"int\"\" StoreGeneratedPattern=\"\"Identity\"\" Nullable=\"\"false\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Customers\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"ContactName\"\" Type=\"\"nvarchar\"\" MaxLength=\"\"30\"\" Nullable=\"\"true\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"false\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Orders\"\" Multiplicity=\"\"*\"\" />\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customers\"\" Multiplicity=\"\"0..1\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindModelStoreContainer\"\">\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Orders\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customers\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string csdl1 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel\"\" Alias=\"\"Self\"\" annotation:UseStrongSpatialTypes=\"\"false\"\" xmlns:annotation=\"\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm\"\">\n  <EntityType Name=\"\"Customer\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" Nullable=\"\"false\"\" />\n    <Property Name=\"\"ContactName\"\" Type=\"\"String\"\" MaxLength=\"\"30\"\" FixedLength=\"\"false\"\" Unicode=\"\"true\"\" />\n    <NavigationProperty Name=\"\"Orders\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Customers\"\" ToRole=\"\"Orders\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Order\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"OrderID\"\" Type=\"\"Int32\"\" Nullable=\"\"false\"\" annotation:StoreGeneratedPattern=\"\"Identity\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" />\n    <NavigationProperty Name=\"\"Customer\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Orders\"\" ToRole=\"\"Customers\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customer\"\" Multiplicity=\"\"0..1\"\" />\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Order\"\" Multiplicity=\"\"*\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindEntities\"\" annotation:LazyLoadingEnabled=\"\"true\"\">\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customer\"\" />\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Order\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string csdl2 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel\"\" Alias=\"\"Self\"\" annotation:UseStrongSpatialTypes=\"\"false\"\" xmlns:annotation=\"\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm\"\">\n  <EntityType Name=\"\"Order\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" />\n    <Property Name=\"\"OrderID\"\" Type=\"\"Int32\"\" Nullable=\"\"false\"\" annotation:StoreGeneratedPattern=\"\"Identity\"\" />\n    <NavigationProperty Name=\"\"Customer\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Orders\"\" ToRole=\"\"Customers\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Customer\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"ContactName\"\" Type=\"\"String\"\" MaxLength=\"\"30\"\" FixedLength=\"\"false\"\" Unicode=\"\"true\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" Nullable=\"\"false\"\" />\n    <NavigationProperty Name=\"\"Orders\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Customers\"\" ToRole=\"\"Orders\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Order\"\" Multiplicity=\"\"*\"\" />\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customer\"\" Multiplicity=\"\"0..1\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindEntities\"\" annotation:LazyLoadingEnabled=\"\"true\"\">\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Order\"\" />\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customer\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string msl1 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<Mapping Space=\"\"C-S\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/mapping/cs\"\">\n  <EntityContainerMapping StorageEntityContainer=\"\"NorthwindModelStoreContainer\"\" CdmEntityContainer=\"\"NorthwindEntities\"\">\n    <EntitySetMapping Name=\"\"Customers\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Customer\"\">\n        <MappingFragment StoreEntitySet=\"\"Customers\"\">\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n          <ScalarProperty Name=\"\"ContactName\"\" ColumnName=\"\"ContactName\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n    <EntitySetMapping Name=\"\"Orders\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Order\"\">\n        <MappingFragment StoreEntitySet=\"\"Orders\"\">\n          <ScalarProperty Name=\"\"OrderID\"\" ColumnName=\"\"OrderID\"\" />\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n  </EntityContainerMapping>\n</Mapping>\";\n\n        const string msl2 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<Mapping Space=\"\"C-S\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/mapping/cs\"\">\n  <EntityContainerMapping StorageEntityContainer=\"\"NorthwindModelStoreContainer\"\" CdmEntityContainer=\"\"NorthwindEntities\"\">\n    <EntitySetMapping Name=\"\"Orders\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Order\"\">\n        <MappingFragment StoreEntitySet=\"\"Orders\"\">\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n          <ScalarProperty Name=\"\"OrderID\"\" ColumnName=\"\"OrderID\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n    <EntitySetMapping Name=\"\"Customers\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Customer\"\">\n        <MappingFragment StoreEntitySet=\"\"Customers\"\">\n          <ScalarProperty Name=\"\"ContactName\"\" ColumnName=\"\"ContactName\"\" />\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n  </EntityContainerMapping>\n</Mapping>\";\n        #endregion\n\n        [Fact]\n        public static void GetMappingClosureHash_is_impacted_by_the_order_of_elements_if_sortSequence_is_false()\n        {\n            var hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: false);\n            var hash2 = GetMappingClosureHash(ssdl2, csdl1, msl1, sortSequence: false);\n            Assert.NotEqual(hash1, hash2);\n\n            hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: false);\n            hash2 = GetMappingClosureHash(ssdl1, csdl2, msl1, sortSequence: false);\n            Assert.NotEqual(hash1, hash2);\n\n            hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: false);\n            hash2 = GetMappingClosureHash(ssdl1, csdl1, msl2, sortSequence: false);\n            Assert.NotEqual(hash1, hash2);\n        }\n\n        [Fact]\n        public static void GetMappingClosureHash_is_not_impacted_by_the_order_of_elements_if_sortSequence_is_true()\n        {\n            var hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: true);\n            var hash2 = GetMappingClosureHash(ssdl2, csdl2, msl2, sortSequence: true);\n            Assert.Equal(hash1, hash2);\n        }\n\n        private static string GetMappingClosureHash(string ssdl, string csdl, string msl, bool sortSequence)\n        {\n            var mappingCollection = \n                StorageMappingItemCollectionTests.CreateStorageMappingItemCollection(ssdl, csdl, msl);\n\n            return MetadataMappingHasherVisitor.GetMappingClosureHash(\n                3.0, mappingCollection.GetItems<EntityContainerMapping>().Single(), sortSequence);\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageSetMapping_returns_expected_value()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", null, entityType);\n            var associationType = new AssociationType(\"AT\", \"N\", false, DataSpace.CSpace);\n            var associationSet = new AssociationSet(\"AS\", associationType);\n            var entitySetMapping = new EntitySetMapping(entitySet, null);\n            var associationSetMapping = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Equal(entitySet.Identity, \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(entitySetMapping));\n            Assert.Equal(associationSet.Identity, \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(associationSetMapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageEntityTypeMapping_returns_expected_value()\n        {\n            var entityType1 = new EntityType(\"ET1\", \"N\", DataSpace.CSpace);\n            var entityType2 = new EntityType(\"ET2\", \"N\", DataSpace.CSpace);\n            var entityType3 = new EntityType(\"ET3\", \"N\", DataSpace.CSpace);\n            var entityType4 = new EntityType(\"ET4\", \"N\", DataSpace.CSpace);\n            var mapping = new EntityTypeMapping(null);\n            mapping.AddType(entityType2);\n            mapping.AddType(entityType1);\n            mapping.AddIsOfType(entityType4);\n            mapping.AddIsOfType(entityType3);\n\n            Assert.Equal(\"N.ET1,N.ET2,N.ET3,N.ET4\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity((TypeMapping)mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageAssociationTypeMapping_returns_expected_value()\n        {\n            var associationType = new AssociationType(\"AT\", \"N\", false, DataSpace.CSpace);\n            TypeMapping mapping = new AssociationTypeMapping(associationType, null);\n\n            Assert.Equal(associationType.Identity, BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageComplexTypeMapping_returns_expected_value()\n        {\n            var complexType1 = new ComplexType(\"CT1\", \"N\", DataSpace.CSpace);\n            var complexType2 = new ComplexType(\"CT2\", \"N\", DataSpace.CSpace);\n            var complexType3 = new ComplexType(\"CT3\", \"N\", DataSpace.CSpace);\n            var complexType4 = new ComplexType(\"CT4\", \"N\", DataSpace.CSpace);\n            var property1 = new EdmProperty(\"A\", TypeUsage.Create(complexType1));\n            var property2 = new EdmProperty(\"B\", TypeUsage.Create(complexType2));\n            var propertyMapping1 = new ComplexPropertyMapping(property1);\n            var propertyMapping2 = new ComplexPropertyMapping(property2);\n\n            var mapping = new ComplexTypeMapping(false);\n            mapping.AddType(complexType2);\n            mapping.AddType(complexType1);\n            mapping.AddIsOfType(complexType4);\n            mapping.AddIsOfType(complexType3);\n            mapping.AddPropertyMapping(propertyMapping2);\n            mapping.AddPropertyMapping(propertyMapping1);\n\n            Assert.Equal(\"ComplexProperty(Identity=A),ComplexProperty(Identity=B),N.CT1,N.CT2,N.CT3,N.CT4\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageMappingFragment_returns_expected_value()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", null, entityType);\n            var entityTypeMapping = new EntityTypeMapping(null);\n            entityTypeMapping.AddType(entityType);\n            var mappingFragment = new MappingFragment(entitySet, entityTypeMapping, false);\n\n            Assert.Equal(entitySet.Identity,\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mappingFragment));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageScalarPropertyMapping_returns_expected_value()\n        {\n            var typeUsage = TypeUsage.Create(PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String));\n            var property1 = new EdmProperty(\"A\", typeUsage);\n            var property2 = new EdmProperty(\"B\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            PropertyMapping mapping = new ScalarPropertyMapping(property1, property2);\n\n            Assert.Equal(\"ScalarProperty(Identity=A,ColumnIdentity=B)\", \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageComplexPropertyMapping_returns_expected_value()\n        {\n            var complexType = new ComplexType(\"CT\", \"N\", DataSpace.CSpace);\n            var property = new EdmProperty(\"A\", TypeUsage.Create(complexType));\n            PropertyMapping mapping = new ComplexPropertyMapping(property);\n\n            Assert.Equal(\"ComplexProperty(Identity=A)\", \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageEndPropertyMapping_returns_expected_value()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.CSpace);\n            PropertyMapping mapping = new EndPropertyMapping()\n            {\n                AssociationEnd = new AssociationEndMember(\"AEM\", entityType)\n            };\n\n            Assert.Equal(\"EndProperty(Identity=AEM)\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageConditionPropertyMapping_returns_expected_value()\n        {\n            var typeUsage = TypeUsage.Create(PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String));\n            var property1 = new EdmProperty(\"A\", typeUsage);\n            var property2 = new EdmProperty(\"B\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n\n            PropertyMapping mapping = new ConditionPropertyMapping(property1, null, \"V\", null);\n\n            Assert.Equal(\"ConditionProperty(Identity=A)\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n\n            mapping = new ConditionPropertyMapping(null, property2, \"V\", null);\n\n            Assert.Equal(\"ConditionProperty(ColumnIdentity=B)\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n    }\n}\n"
  },
  {
    "Start": 18864,
    "Length": 52,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\EntityFramework7\\EntityFramework\\UnitTests\\Core\\Mapping\\MetadataMappingHasherVisitorTests.cs",
    "SourceCode": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Core.Mapping\n{\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.IO;\n    using System.Linq;\n    using System.Xml;\n    using Xunit;\n\n    public class MetadataMappingHasherVisitorTests\n    {\n        #region XML\n        const string ssdl1 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel.Store\"\" Provider=\"\"System.Data.SqlClient\"\" ProviderManifestToken=\"\"2008\"\" Alias=\"\"Self\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm/ssdl\"\">\n  <EntityType Name=\"\"Customers\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"false\"\" />\n    <Property Name=\"\"ContactName\"\" Type=\"\"nvarchar\"\" MaxLength=\"\"30\"\" Nullable=\"\"true\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Orders\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"OrderID\"\" Type=\"\"int\"\" StoreGeneratedPattern=\"\"Identity\"\" Nullable=\"\"false\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"true\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customers\"\" Multiplicity=\"\"0..1\"\" />\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Orders\"\" Multiplicity=\"\"*\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindModelStoreContainer\"\">\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customers\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Orders\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string ssdl2 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel.Store\"\" Provider=\"\"System.Data.SqlClient\"\" ProviderManifestToken=\"\"2008\"\" Alias=\"\"Self\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm/ssdl\"\">\n  <EntityType Name=\"\"Orders\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"true\"\" />\n    <Property Name=\"\"OrderID\"\" Type=\"\"int\"\" StoreGeneratedPattern=\"\"Identity\"\" Nullable=\"\"false\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Customers\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"ContactName\"\" Type=\"\"nvarchar\"\" MaxLength=\"\"30\"\" Nullable=\"\"true\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"nchar\"\" MaxLength=\"\"5\"\" Nullable=\"\"false\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Orders\"\" Multiplicity=\"\"*\"\" />\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customers\"\" Multiplicity=\"\"0..1\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindModelStoreContainer\"\">\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Orders\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customers\"\" Schema=\"\"dbo\"\" p3:Type=\"\"Tables\"\" xmlns:p3=\"\"http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string csdl1 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel\"\" Alias=\"\"Self\"\" annotation:UseStrongSpatialTypes=\"\"false\"\" xmlns:annotation=\"\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm\"\">\n  <EntityType Name=\"\"Customer\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" Nullable=\"\"false\"\" />\n    <Property Name=\"\"ContactName\"\" Type=\"\"String\"\" MaxLength=\"\"30\"\" FixedLength=\"\"false\"\" Unicode=\"\"true\"\" />\n    <NavigationProperty Name=\"\"Orders\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Customers\"\" ToRole=\"\"Orders\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Order\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"OrderID\"\" Type=\"\"Int32\"\" Nullable=\"\"false\"\" annotation:StoreGeneratedPattern=\"\"Identity\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" />\n    <NavigationProperty Name=\"\"Customer\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Orders\"\" ToRole=\"\"Customers\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customer\"\" Multiplicity=\"\"0..1\"\" />\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Order\"\" Multiplicity=\"\"*\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindEntities\"\" annotation:LazyLoadingEnabled=\"\"true\"\">\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customer\"\" />\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Order\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string csdl2 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<Schema Namespace=\"\"NorthwindModel\"\" Alias=\"\"Self\"\" annotation:UseStrongSpatialTypes=\"\"false\"\" xmlns:annotation=\"\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/edm\"\">\n  <EntityType Name=\"\"Order\"\">\n    <Key>\n      <PropertyRef Name=\"\"OrderID\"\" />\n    </Key>\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" />\n    <Property Name=\"\"OrderID\"\" Type=\"\"Int32\"\" Nullable=\"\"false\"\" annotation:StoreGeneratedPattern=\"\"Identity\"\" />\n    <NavigationProperty Name=\"\"Customer\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Orders\"\" ToRole=\"\"Customers\"\" />\n  </EntityType>\n  <EntityType Name=\"\"Customer\"\">\n    <Key>\n      <PropertyRef Name=\"\"CustomerID\"\" />\n    </Key>\n    <Property Name=\"\"ContactName\"\" Type=\"\"String\"\" MaxLength=\"\"30\"\" FixedLength=\"\"false\"\" Unicode=\"\"true\"\" />\n    <Property Name=\"\"CustomerID\"\" Type=\"\"String\"\" MaxLength=\"\"5\"\" FixedLength=\"\"true\"\" Unicode=\"\"true\"\" Nullable=\"\"false\"\" />\n    <NavigationProperty Name=\"\"Orders\"\" Relationship=\"\"Self.FK_Orders_Customers\"\" FromRole=\"\"Customers\"\" ToRole=\"\"Orders\"\" />\n  </EntityType>\n  <Association Name=\"\"FK_Orders_Customers\"\">\n    <End Role=\"\"Orders\"\" Type=\"\"Self.Order\"\" Multiplicity=\"\"*\"\" />\n    <End Role=\"\"Customers\"\" Type=\"\"Self.Customer\"\" Multiplicity=\"\"0..1\"\" />\n    <ReferentialConstraint>\n      <Principal Role=\"\"Customers\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Principal>\n      <Dependent Role=\"\"Orders\"\">\n        <PropertyRef Name=\"\"CustomerID\"\" />\n      </Dependent>\n    </ReferentialConstraint>\n  </Association>\n  <EntityContainer Name=\"\"NorthwindEntities\"\" annotation:LazyLoadingEnabled=\"\"true\"\">\n    <EntitySet Name=\"\"Orders\"\" EntityType=\"\"Self.Order\"\" />\n    <EntitySet Name=\"\"Customers\"\" EntityType=\"\"Self.Customer\"\" />\n    <AssociationSet Name=\"\"FK_Orders_Customers\"\" Association=\"\"Self.FK_Orders_Customers\"\">\n      <End Role=\"\"Orders\"\" EntitySet=\"\"Orders\"\" />\n      <End Role=\"\"Customers\"\" EntitySet=\"\"Customers\"\" />\n    </AssociationSet>\n  </EntityContainer>\n</Schema>\";\n\n        const string msl1 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<Mapping Space=\"\"C-S\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/mapping/cs\"\">\n  <EntityContainerMapping StorageEntityContainer=\"\"NorthwindModelStoreContainer\"\" CdmEntityContainer=\"\"NorthwindEntities\"\">\n    <EntitySetMapping Name=\"\"Customers\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Customer\"\">\n        <MappingFragment StoreEntitySet=\"\"Customers\"\">\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n          <ScalarProperty Name=\"\"ContactName\"\" ColumnName=\"\"ContactName\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n    <EntitySetMapping Name=\"\"Orders\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Order\"\">\n        <MappingFragment StoreEntitySet=\"\"Orders\"\">\n          <ScalarProperty Name=\"\"OrderID\"\" ColumnName=\"\"OrderID\"\" />\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n  </EntityContainerMapping>\n</Mapping>\";\n\n        const string msl2 =\n@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n<Mapping Space=\"\"C-S\"\" xmlns=\"\"http://schemas.microsoft.com/ado/2009/11/mapping/cs\"\">\n  <EntityContainerMapping StorageEntityContainer=\"\"NorthwindModelStoreContainer\"\" CdmEntityContainer=\"\"NorthwindEntities\"\">\n    <EntitySetMapping Name=\"\"Orders\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Order\"\">\n        <MappingFragment StoreEntitySet=\"\"Orders\"\">\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n          <ScalarProperty Name=\"\"OrderID\"\" ColumnName=\"\"OrderID\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n    <EntitySetMapping Name=\"\"Customers\"\">\n      <EntityTypeMapping TypeName=\"\"NorthwindModel.Customer\"\">\n        <MappingFragment StoreEntitySet=\"\"Customers\"\">\n          <ScalarProperty Name=\"\"ContactName\"\" ColumnName=\"\"ContactName\"\" />\n          <ScalarProperty Name=\"\"CustomerID\"\" ColumnName=\"\"CustomerID\"\" />\n        </MappingFragment>\n      </EntityTypeMapping>\n    </EntitySetMapping>\n  </EntityContainerMapping>\n</Mapping>\";\n        #endregion\n\n        [Fact]\n        public static void GetMappingClosureHash_is_impacted_by_the_order_of_elements_if_sortSequence_is_false()\n        {\n            var hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: false);\n            var hash2 = GetMappingClosureHash(ssdl2, csdl1, msl1, sortSequence: false);\n            Assert.NotEqual(hash1, hash2);\n\n            hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: false);\n            hash2 = GetMappingClosureHash(ssdl1, csdl2, msl1, sortSequence: false);\n            Assert.NotEqual(hash1, hash2);\n\n            hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: false);\n            hash2 = GetMappingClosureHash(ssdl1, csdl1, msl2, sortSequence: false);\n            Assert.NotEqual(hash1, hash2);\n        }\n\n        [Fact]\n        public static void GetMappingClosureHash_is_not_impacted_by_the_order_of_elements_if_sortSequence_is_true()\n        {\n            var hash1 = GetMappingClosureHash(ssdl1, csdl1, msl1, sortSequence: true);\n            var hash2 = GetMappingClosureHash(ssdl2, csdl2, msl2, sortSequence: true);\n            Assert.Equal(hash1, hash2);\n        }\n\n        private static string GetMappingClosureHash(string ssdl, string csdl, string msl, bool sortSequence)\n        {\n            var mappingCollection = \n                StorageMappingItemCollectionTests.CreateStorageMappingItemCollection(ssdl, csdl, msl);\n\n            return MetadataMappingHasherVisitor.GetMappingClosureHash(\n                3.0, mappingCollection.GetItems<EntityContainerMapping>().Single(), sortSequence);\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageSetMapping_returns_expected_value()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", null, entityType);\n            var associationType = new AssociationType(\"AT\", \"N\", false, DataSpace.CSpace);\n            var associationSet = new AssociationSet(\"AS\", associationType);\n            var entitySetMapping = new EntitySetMapping(entitySet, null);\n            var associationSetMapping = new AssociationSetMapping(associationSet, entitySet);\n\n            Assert.Equal(entitySet.Identity, \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(entitySetMapping));\n            Assert.Equal(associationSet.Identity, \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(associationSetMapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageEntityTypeMapping_returns_expected_value()\n        {\n            var entityType1 = new EntityType(\"ET1\", \"N\", DataSpace.CSpace);\n            var entityType2 = new EntityType(\"ET2\", \"N\", DataSpace.CSpace);\n            var entityType3 = new EntityType(\"ET3\", \"N\", DataSpace.CSpace);\n            var entityType4 = new EntityType(\"ET4\", \"N\", DataSpace.CSpace);\n            var mapping = new EntityTypeMapping(null);\n            mapping.AddType(entityType2);\n            mapping.AddType(entityType1);\n            mapping.AddIsOfType(entityType4);\n            mapping.AddIsOfType(entityType3);\n\n            Assert.Equal(\"N.ET1,N.ET2,N.ET3,N.ET4\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity((TypeMapping)mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageAssociationTypeMapping_returns_expected_value()\n        {\n            var associationType = new AssociationType(\"AT\", \"N\", false, DataSpace.CSpace);\n            TypeMapping mapping = new AssociationTypeMapping(associationType, null);\n\n            Assert.Equal(associationType.Identity, BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageComplexTypeMapping_returns_expected_value()\n        {\n            var complexType1 = new ComplexType(\"CT1\", \"N\", DataSpace.CSpace);\n            var complexType2 = new ComplexType(\"CT2\", \"N\", DataSpace.CSpace);\n            var complexType3 = new ComplexType(\"CT3\", \"N\", DataSpace.CSpace);\n            var complexType4 = new ComplexType(\"CT4\", \"N\", DataSpace.CSpace);\n            var property1 = new EdmProperty(\"A\", TypeUsage.Create(complexType1));\n            var property2 = new EdmProperty(\"B\", TypeUsage.Create(complexType2));\n            var propertyMapping1 = new ComplexPropertyMapping(property1);\n            var propertyMapping2 = new ComplexPropertyMapping(property2);\n\n            var mapping = new ComplexTypeMapping(false);\n            mapping.AddType(complexType2);\n            mapping.AddType(complexType1);\n            mapping.AddIsOfType(complexType4);\n            mapping.AddIsOfType(complexType3);\n            mapping.AddPropertyMapping(propertyMapping2);\n            mapping.AddPropertyMapping(propertyMapping1);\n\n            Assert.Equal(\"ComplexProperty(Identity=A),ComplexProperty(Identity=B),N.CT1,N.CT2,N.CT3,N.CT4\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageMappingFragment_returns_expected_value()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.CSpace);\n            var entitySet = new EntitySet(\"ES\", \"S\", \"T\", null, entityType);\n            var entityTypeMapping = new EntityTypeMapping(null);\n            entityTypeMapping.AddType(entityType);\n            var mappingFragment = new MappingFragment(entitySet, entityTypeMapping, false);\n\n            Assert.Equal(entitySet.Identity,\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mappingFragment));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageScalarPropertyMapping_returns_expected_value()\n        {\n            var typeUsage = TypeUsage.Create(PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String));\n            var property1 = new EdmProperty(\"A\", typeUsage);\n            var property2 = new EdmProperty(\"B\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n            PropertyMapping mapping = new ScalarPropertyMapping(property1, property2);\n\n            Assert.Equal(\"ScalarProperty(Identity=A,ColumnIdentity=B)\", \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageComplexPropertyMapping_returns_expected_value()\n        {\n            var complexType = new ComplexType(\"CT\", \"N\", DataSpace.CSpace);\n            var property = new EdmProperty(\"A\", TypeUsage.Create(complexType));\n            PropertyMapping mapping = new ComplexPropertyMapping(property);\n\n            Assert.Equal(\"ComplexProperty(Identity=A)\", \n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageEndPropertyMapping_returns_expected_value()\n        {\n            var entityType = new EntityType(\"ET\", \"N\", DataSpace.CSpace);\n            PropertyMapping mapping = new EndPropertyMapping()\n            {\n                AssociationEnd = new AssociationEndMember(\"AEM\", entityType)\n            };\n\n            Assert.Equal(\"EndProperty(Identity=AEM)\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n\n        [Fact]\n        public static void GetIdentity_of_StorageConditionPropertyMapping_returns_expected_value()\n        {\n            var typeUsage = TypeUsage.Create(PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String));\n            var property1 = new EdmProperty(\"A\", typeUsage);\n            var property2 = new EdmProperty(\"B\", TypeUsage.Create(new PrimitiveType() { DataSpace = DataSpace.SSpace }));\n\n            PropertyMapping mapping = new ConditionPropertyMapping(property1, null, \"V\", null);\n\n            Assert.Equal(\"ConditionProperty(Identity=A)\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n\n            mapping = new ConditionPropertyMapping(null, property2, \"V\", null);\n\n            Assert.Equal(\"ConditionProperty(ColumnIdentity=B)\",\n                BaseMetadataMappingVisitor.IdentityHelper.GetIdentity(mapping));\n        }\n    }\n}\n"
  }
]