[
  {
    "Start": 2621,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 7710,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 12808,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 17843,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 20028,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 22030,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 25454,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 27803,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 29340,
    "Length": 83,
    "SourcePath": "C:\\Users\\SPG-04\\Documents\\Visual Studio 2013\\Projects\\intellimeta\\NUnitTests\\TestProjects\\Projects\\Core.Test2\\Core.Test\\PackageSourceProviderTest.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing Moq;\r\nusing NuGet.Test.Mocks;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace NuGet.Test\r\n{\r\n    public class PackageSourceProviderTest\r\n    {\r\n        [Fact]\r\n        public void TestNoPackageSourcesAreReturnedIfUserSettingsIsEmpty()\r\n        {\r\n            // Arrange\r\n            var provider = CreatePackageSourceProvider();\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(0, values.Count);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsNull()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsEmptySequenceIfDefaultPackageSourceIsEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new PackageSource[] { });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.False(values.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnsDefaultSourcesIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n            var provider = CreatePackageSourceProvider(settings, providerDefaultSources: new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"A\", values.First().Source);\r\n            Assert.Equal(\"B\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereAMigratedSourceIsAlsoADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"AOld\", \"urlA\", false), new SettingValue(\"userDefinedSource\", \"userDefinedSourceUrl\", false) });\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            \r\n            var defaultPackageSourceA = new PackageSource(\"urlA\", \"ANew\");\r\n            var defaultPackageSourceB = new PackageSource(\"urlB\", \"B\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: new[] { defaultPackageSourceA, defaultPackageSourceB }, \r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                        {\r\n                                            { new PackageSource(\"urlA\", \"AOld\"), defaultPackageSourceA },\r\n                                        });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            // Package Source AOld will be migrated to ANew. B will simply get added\r\n            // Since default source B got added when there are other package sources it will be disabled\r\n            // However, package source ANew must stay enabled\r\n            // PackageSource userDefinedSource is a user package source and is untouched\r\n            Assert.Equal(3, values.Count);\r\n            Assert.Equal(\"urlA\", values[0].Source);\r\n            Assert.Equal(\"ANew\", values[0].Name);\r\n            Assert.True(values[0].IsEnabled);\r\n            Assert.Equal(\"userDefinedSourceUrl\", values[1].Source);\r\n            Assert.Equal(\"userDefinedSource\", values[1].Name);\r\n            Assert.True(values[1].IsEnabled);\r\n            Assert.Equal(\"urlB\", values[2].Source);\r\n            Assert.Equal(\"B\", values[2].Name);\r\n            Assert.False(values[2].IsEnabled);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesPerformMigrationIfSpecified()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true)).Returns(\r\n                new[] { \r\n                    new SettingValue(\"one\", \"onesource\", false),\r\n                    new SettingValue(\"two\", \"twosource\", false),\r\n                    new SettingValue(\"three\", \"threesource\", false),\r\n                }\r\n            );\r\n\r\n            // disable package \"three\"\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"three\", \"true\" ) });\r\n\r\n            IList<KeyValuePair<string, string>> savedSettingValues = null;\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback<string, IList<KeyValuePair<string, string>>>((_, savedVals) => { savedSettingValues = savedVals; })\r\n                    .Verifiable();            \r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object,\r\n                null,\r\n                new Dictionary<PackageSource, PackageSource> {\r\n                    { new PackageSource(\"onesource\", \"one\"), new PackageSource(\"goodsource\", \"good\") },\r\n                    { new PackageSource(\"foo\", \"bar\"), new PackageSource(\"foo\", \"bar\") },\r\n                    { new PackageSource(\"threesource\", \"three\"), new PackageSource(\"awesomesource\", \"awesome\") }\r\n                }\r\n            );\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n            savedSettingValues = savedSettingValues.ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"good\", \"goodsource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[2], \"awesome\", \"awesomesource\", false);\r\n\r\n            Assert.Equal(3, savedSettingValues.Count);\r\n            Assert.Equal(\"good\", savedSettingValues[0].Key);\r\n            Assert.Equal(\"goodsource\", savedSettingValues[0].Value);\r\n            Assert.Equal(\"two\", savedSettingValues[1].Key);\r\n            Assert.Equal(\"twosource\", savedSettingValues[1].Value);\r\n            Assert.Equal(\"awesome\", savedSettingValues[2].Key);\r\n            Assert.Equal(\"awesomesource\", savedSettingValues[2].Value);\r\n        }\r\n\r\n        [Fact]\r\n        public void CallSaveMethodAndLoadMethodShouldReturnTheSamePackageSet()\r\n        {\r\n            // Arrange\r\n            var expectedSources = new[] { new PackageSource(\"one\", \"one\"), new PackageSource(\"two\", \"two\"), new PackageSource(\"three\", \"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", false), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    Assert.Empty(values);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n            Assert.Equal(3, sources.Count);\r\n            for (int i = 0; i < sources.Count; i++)\r\n            {\r\n                AssertPackageSource(expectedSources[i], sources[i].Name, sources[i].Source, true);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void WithMachineWideSources()\r\n        {\r\n            // Arrange           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"one\", true), \r\n                                     new SettingValue(\"two\", \"two\", false), \r\n                                     new SettingValue(\"three\", \"three\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        // verifies that only sources \"two\" and \"three\" are passed.\r\n                        // the machine wide source \"one\" is not.\r\n                        Assert.Equal(2, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"two\", values[0].Value);\r\n                        Assert.Equal(\"three\", values[1].Key);\r\n                        Assert.Equal(\"three\", values[1].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                {\r\n                    // verifies that the machine wide source \"one\" is passed here\r\n                    // since it is disabled.                    \r\n                    Assert.Equal(1, values.Count);\r\n                    Assert.Equal(\"one\", values[0].Key);\r\n                    Assert.Equal(\"true\", values[0].Value);\r\n                })\r\n                .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var sources = provider.LoadPackageSources().ToList();\r\n\r\n            // disable the machine wide source \"one\", and save the result in provider.\r\n            Assert.Equal(\"one\", sources[2].Name);\r\n            sources[2].IsEnabled = false;    \r\n            provider.SavePackageSources(sources); \r\n   \r\n            // Assert\r\n            // all assertions are done inside Callback()'s\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", true), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                })\r\n                    .Verifiable();\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"three\", \"threesource\", true);\r\n            AssertPackageSource(values[2], \"one\", \"onesource\", true, true);            \r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReturnCorrectDataFromSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"two\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[0], \"one\", \"onesource\", true);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", false);\r\n            AssertPackageSource(values[2], \"three\", \"threesource\", true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 1 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 1. Default Package Source is already present matching both feed source and the feed name\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameAndSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false)});\r\n\r\n            // Disable package source one\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new[] { new KeyValuePair<string, string>(\"one\", \"true\") });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='one' value='onesource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'one' represents case 1. No real change takes place. IsOfficial will become true though. IsEnabled remains false as it is ISettings\r\n            AssertPackageSource(values.First(), \"one\", \"onesource\", false, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 2 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 2. Default Package Source is already present matching feed source but with a different feed name. DO NOTHING\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInSourceButNotInName()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"two\", \"twosource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='twodefault' value='twosource' />\r\n    </packageSources>\r\n    <disabledPackageSources>\r\n        <add key='twodefault' value='true' />\r\n    </disabledPackageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'two' represents case 2. No Change effected. The existing feed will not be official\r\n            AssertPackageSource(values.First(), \"two\", \"twosource\", true, false, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 3. Default Package Source is not present, but there is another feed source with the same feed name. Override that feed entirely\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereALoadedSourceMatchesDefaultSourceInNameButNotInSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"three\", \"threesource\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='three' value='threedefaultsource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'three' represents case 3. Completely overwritten. Noticeably, Feed Source will match Configuration Default settings\r\n            AssertPackageSource(values.First(), \"three\", \"threedefaultsource\", true, false, true);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The following test tests case 3 listed in PackageSourceProvider.SetDefaultPackageSources(...)\r\n        /// Case 4. Default Package Source is not present, simply, add it\r\n        /// </summary>\r\n        [Fact]\r\n        public void LoadPackageSourcesWhereNoLoadedSourceMatchesADefaultSource()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>());\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='four' value='foursource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null, migratePackageSources: null, configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count());\r\n            // Package source 'four' represents case 4. Simply Added to the list increasing the count by 1. ISettings only has 3 package sources. But, LoadPackageSources returns 4\r\n            AssertPackageSource(values.First(), \"four\", \"foursource\", true, false, true);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotReturnProviderDefaultsWhenConfigurationDefaultPackageSourcesIsNotEmpty()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>().Object;\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='configurationDefaultOne' value='configurationDefaultOneSource' />\r\n        <add key='configurationDefaultTwo' value='configurationDefaultTwoSource' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings,\r\n                providerDefaultSources: new[] { new PackageSource(\"providerDefaultA\"), new PackageSource(\"providerDefaultB\") },\r\n                migratePackageSources: null,\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count());\r\n            Assert.Equal(\"configurationDefaultOneSource\", values.First().Source);\r\n            Assert.Equal(\"configurationDefaultTwoSource\", values.Last().Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesAddsAConfigurationDefaultBackEvenAfterMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            string configurationDefaultsFileContent = @\"\r\n<configuration>\r\n    <packageSources>\r\n        <add key='NuGet official package source' value='https://nuget.org/api/v2' />\r\n    </packageSources>\r\n</configuration>\";\r\n\r\n            var mockFileSystem = new MockFileSystem();\r\n            var configurationDefaultsPath = \"NuGetDefaults.config\";\r\n            mockFileSystem.AddFile(configurationDefaultsPath, configurationDefaultsFileContent);\r\n            ConfigurationDefaults configurationDefaults = new ConfigurationDefaults(mockFileSystem, configurationDefaultsPath);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       },\r\n                configurationDefaultSources: configurationDefaults.DefaultPackageSources);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            Assert.Equal(\"NuGet official package source\", values[1].Name);\r\n            Assert.Equal(\"https://nuget.org/api/v2\", values[1].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigration()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesDoesNotDuplicateFeedsOnMigrationAndSavesIt()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new List<SettingValue>() { new SettingValue(\"NuGet official package source\", \"https://nuget.org/api/v2\", false),\r\n                    new SettingValue(\"nuget.org\", \"https://www.nuget.org/api/v2\", false) });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", It.IsAny<string>())).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.GetValues(\"disabledPackageSources\")).Returns(new KeyValuePair<string, string>[0]);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> valuePairs) =>\r\n                    {\r\n                        Assert.Equal(1, valuePairs.Count);\r\n                        Assert.Equal(\"nuget.org\", valuePairs[0].Key);\r\n                        Assert.Equal(\"https://www.nuget.org/api/v2\", valuePairs[0].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, providerDefaultSources: null,\r\n                migratePackageSources: new Dictionary<PackageSource, PackageSource>\r\n                                       {\r\n                                           { new PackageSource(\"https://nuget.org/api/v2\", \"NuGet official package source\"), new PackageSource(\"https://www.nuget.org/api/v2\", \"nuget.org\")  }\r\n                                       });\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n\r\n            // Assert\r\n            Assert.Equal(1, values.Count);\r\n            Assert.Equal(\"nuget.org\", values[0].Name);\r\n            Assert.Equal(\"https://www.nuget.org/api/v2\", values[0].Source);\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void DisablePackageSourceAddEntryToSettings()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.SetValue(\"disabledPackageSources\", \"A\", \"true\")).Verifiable();\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.DisablePackageSource(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void IsPackageSourceEnabledReturnsFalseIfTheSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(\"sdfds\");\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.False(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData((string)null)]\r\n        [InlineData(\"\")]\r\n        public void IsPackageSourceEnabledReturnsTrueIfTheSourceIsNotDisabled(string returnValue)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.GetValue(\"disabledPackageSources\", \"A\")).Returns(returnValue);\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            bool isEnabled = provider.IsPackageSourceEnabled(new PackageSource(\"source\", \"A\"));\r\n\r\n            // Assert\r\n            Assert.True(isEnabled);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(new object[] { null, \"abcd\" })]\r\n        [InlineData(new object[] { \"\", \"abcd\" })]\r\n        [InlineData(new object[] { \"abcd\", null })]\r\n        [InlineData(new object[] { \"abcd\", \"\" })]\r\n        public void LoadPackageSourcesIgnoresInvalidCredentialPairsFromSettings(string userName, string password)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new [] { new KeyValuePair<string, string>(\"Username\", userName), new KeyValuePair<string, string>(\"Password\", password) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            string encryptedPassword = EncryptionUtility.EncryptString(\"topsecret\");\r\n           \r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"Password\", encryptedPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n            Assert.False(values[1].IsPasswordClearText);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesReadsClearTextCredentialPairsFromSettings()\r\n        {\r\n            // Arrange\r\n            const string clearTextPassword = \"topsecret\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"user1\"), new KeyValuePair<string, string>(\"ClearTextPassword\", clearTextPassword) });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"user1\", values[1].UserName);\r\n            Assert.True(values[1].IsPasswordClearText);\r\n            Assert.Equal(\"topsecret\", values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Username=john;Password=johnspassword\")]\r\n        [InlineData(\"uSerName=john;PASSWOrD=johnspassword\")]\r\n        [InlineData(\" Username=john;  Password=johnspassword   \")]\r\n        public void LoadPackageSourcesLoadsCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            const string userName = \"john\";\r\n            const string password = \"johnspassword\";\r\n\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment:environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(userName, values[1].UserName);\r\n            Assert.Equal(password, values[1].Password);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"uername=john;Password=johnspassword\")]\r\n        [InlineData(\".Username=john;Password=johnspasswordf\")]\r\n        [InlineData(\"What is this I don't even\")]\r\n        public void LoadPackageSourcesIgnoresMalformedCredentialPairsFromEnvironmentVariables(string rawCredentials)\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(rawCredentials);\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Null(values[1].UserName);\r\n            Assert.Null(values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesEnvironmentCredentialsTakePrecedenceOverSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"Username=envirouser;Password=enviropassword\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"envirouser\", values[1].UserName);\r\n            Assert.Equal(\"enviropassword\", values[1].Password);\r\n        }\r\n\r\n        [Fact]\r\n        public void LoadPackageSourcesWhenEnvironmentCredentialsAreMalformedFallsbackToSettingsCredentials()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"three\", \"threesource\", false)\r\n                                });\r\n            settings.Setup(s => s.GetNestedValues(\"packageSourceCredentials\", \"two\"))\r\n                    .Returns(new[] { new KeyValuePair<string, string>(\"Username\", \"settinguser\"), new KeyValuePair<string, string>(\"ClearTextPassword\", \"settingpassword\") });\r\n\r\n\r\n            var environment = new Mock<IEnvironmentVariableReader>();\r\n            environment.Setup(e => e.GetEnvironmentVariable(\"NuGetPackageSourceCredentials_two\"))\r\n                .Returns(\"I for one don't understand environment variables\");\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object, environment: environment.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(3, values.Count);\r\n            AssertPackageSource(values[1], \"two\", \"twosource\", true);\r\n            Assert.Equal(\"settinguser\", values[1].UserName);\r\n            Assert.Equal(\"settingpassword\", values[1].Password);\r\n        }\r\n\r\n\r\n        // Test that when there are duplicate sources, i.e. sources with the same name,\r\n        // then the source specified in one Settings with the highest priority is used.\r\n        [Fact]\r\n        public void DuplicatePackageSources()\r\n        {\r\n            // Arrange\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.GetSettingValues(\"packageSources\", true))\r\n                    .Returns(new[] { new SettingValue(\"one\", \"onesource\", false), \r\n                                     new SettingValue(\"two\", \"twosource\", false), \r\n                                     new SettingValue(\"one\", \"threesource\", false)\r\n                                });\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            var values = provider.LoadPackageSources().ToList();\r\n\r\n            // Assert\r\n            Assert.Equal(2, values.Count);\r\n            AssertPackageSource(values[0], \"two\", \"twosource\", true);\r\n            AssertPackageSource(values[1], \"one\", \"threesource\", true);\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettings()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\"), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>(MockBehavior.Strict);\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"packageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(3, values.Count);\r\n                        Assert.Equal(\"one\", values[0].Key);\r\n                        Assert.Equal(\"one\", values[0].Value);\r\n                        Assert.Equal(\"two\", values[1].Key);\r\n                        Assert.Equal(\"two\", values[1].Value);\r\n                        Assert.Equal(\"three\", values[2].Key);\r\n                        Assert.Equal(\"three\", values[2].Value);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Empty(values);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSaveCorrectDataToSettingsWhenSomePackageSourceIsDisabled()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), new PackageSource(\"two\", \"two\", isEnabled: false), new PackageSource(\"three\") };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"disabledPackageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.SetValues(\"disabledPackageSources\", It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(1, values.Count);\r\n                        Assert.Equal(\"two\", values[0].Key);\r\n                        Assert.Equal(\"true\", values[0].Value, StringComparer.OrdinalIgnoreCase);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesCredentials()\r\n        {\r\n            // Arrange\r\n            var entropyBytes = Encoding.UTF8.GetBytes(\"NuGet\");\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\" }, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        string decryptedPassword = Encoding.UTF8.GetString(\r\n                            ProtectedData.Unprotect(Convert.FromBase64String(values[1].Value), entropyBytes, DataProtectionScope.CurrentUser));\r\n                        Assert.Equal(\"Password\", values[1].Key);\r\n                        Assert.Equal(\"password\", decryptedPassword);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void SavePackageSourcesSavesClearTextCredentials()\r\n        {\r\n            // Arrange\r\n            var sources = new[] { new PackageSource(\"one\"), \r\n                                  new PackageSource(\"twosource\", \"twoname\") { UserName = \"User\", Password = \"password\", IsPasswordClearText = true}, \r\n                                  new PackageSource(\"three\") \r\n            };\r\n            var settings = new Mock<ISettings>();\r\n            settings.Setup(s => s.DeleteSection(\"packageSources\")).Returns(true).Verifiable();\r\n            settings.Setup(s => s.DeleteSection(\"packageSourceCredentials\")).Returns(true).Verifiable();\r\n\r\n            settings.Setup(s => s.SetNestedValues(\"packageSourceCredentials\", It.IsAny<string>(), It.IsAny<IList<KeyValuePair<string, string>>>()))\r\n                    .Callback((string section, string key, IList<KeyValuePair<string, string>> values) =>\r\n                    {\r\n                        Assert.Equal(\"twoname\", key);\r\n                        Assert.Equal(2, values.Count);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"Username\", \"User\"), values[0]);\r\n                        AssertKVP(new KeyValuePair<string, string>(\"ClearTextPassword\", \"password\"), values[1]);\r\n                    })\r\n                    .Verifiable();\r\n\r\n            var provider = CreatePackageSourceProvider(settings.Object);\r\n\r\n            // Act\r\n            provider.SavePackageSources(sources);\r\n\r\n            // Assert\r\n            settings.Verify();\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateReturnsAggregateRepositoryForAllSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryB.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsInvalidSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.Equal(2, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n            Assert.Equal(repositoryC.Object, repo.Repositories.Last());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSkipsDisabledSources()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryB = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Returns(repositoryB.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Throws(new Exception());\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"A\"), new PackageSource(\"B\", \"B\", isEnabled: false), new PackageSource(\"C\", \"C\", isEnabled: false) });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false);\r\n\r\n            // Assert\r\n            Assert.Equal(1, repo.Repositories.Count());\r\n            Assert.Equal(repositoryA.Object, repo.Repositories.First());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateHandlesInvalidUriSources()\r\n        {\r\n            // Arrange\r\n            var factory = PackageRepositoryFactory.Default;\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { \r\n                new PackageSource(\"Bad 1\"), \r\n                new PackageSource(@\"x:sjdkfjhsdjhfgjdsgjglhjk\"), \r\n                new PackageSource(@\"http:\\\\//\") \r\n            });\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory, ignoreFailingRepositories: true);\r\n\r\n            // Assert\r\n            Assert.False(repo.Repositories.Any());\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateSetsIgnoreInvalidRepositoryProperty()\r\n        {\r\n            // Arrange\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            bool ignoreRepository = true;\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(Enumerable.Empty<PackageSource>());\r\n\r\n            // Act\r\n            var repo = (AggregateRepository)sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: ignoreRepository);\r\n\r\n            // Assert\r\n            Assert.True(repo.IgnoreFailingRepositories);\r\n        }\r\n\r\n        [Fact]\r\n        public void GetAggregateWithInvalidSourcesThrows()\r\n        {\r\n            // Arrange\r\n            var repositoryA = new Mock<IPackageRepository>();\r\n            var repositoryC = new Mock<IPackageRepository>();\r\n            var factory = new Mock<IPackageRepositoryFactory>();\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"A\")))).Returns(repositoryA.Object);\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"B\")))).Throws(new InvalidOperationException());\r\n            factory.Setup(c => c.CreateRepository(It.Is<string>(a => a.Equals(\"C\")))).Returns(repositoryC.Object);\r\n\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource(\"A\"), new PackageSource(\"B\"), new PackageSource(\"C\") });\r\n\r\n            // Act and Assert\r\n            ExceptionAssert.Throws<InvalidOperationException>(() => sources.Object.CreateAggregateRepository(factory.Object, ignoreFailingRepositories: false));\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceLooksUpNameAndSource()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(source2.Source, result1);\r\n            Assert.Equal(source2.Source, result2);\r\n            Assert.Equal(source1.Source, result3);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceIgnoreDisabledSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\");\r\n            PackageSource source2 = new PackageSource(\"http://www.test.com\", \"Baz\", isEnabled: false);\r\n            PackageSource source3 = new PackageSource(\"http://www.bing.com\", \"Foo\", isEnabled: false);\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2, source3 });\r\n\r\n            // Act\r\n            var result1 = sources.Object.ResolveSource(\"http://www.test.com\");\r\n            var result2 = sources.Object.ResolveSource(\"Baz\");\r\n            var result3 = sources.Object.ResolveSource(\"Foo\");\r\n            var result4 = sources.Object.ResolveSource(\"SourceName\");\r\n\r\n            // Assert\r\n            Assert.Equal(\"http://www.test.com\", result1);\r\n            Assert.Equal(\"Baz\", result2);\r\n            Assert.Equal(\"Foo\", result3);\r\n            Assert.Equal(\"Source\", result4);\r\n        }\r\n\r\n        [Fact]\r\n        public void ResolveSourceReturnsOriginalValueIfNotFoundInSources()\r\n        {\r\n            // Arrange\r\n            var sources = new Mock<IPackageSourceProvider>();\r\n            PackageSource source1 = new PackageSource(\"Source\", \"SourceName\"), source2 = new PackageSource(\"http://www.test.com\", \"Baz\");\r\n            sources.Setup(c => c.LoadPackageSources()).Returns(new[] { source1, source2 });\r\n            var source = \"http://www.does-not-exist.com\";\r\n\r\n            // Act\r\n            var result = sources.Object.ResolveSource(source);\r\n\r\n            // Assert\r\n            Assert.Equal(source, result);\r\n        }\r\n\r\n        private void AssertPackageSource(PackageSource ps, string name, string source, bool isEnabled, bool isMachineWide = false, bool isOfficial = false)\r\n        {\r\n            Assert.Equal(name, ps.Name);\r\n            Assert.Equal(source, ps.Source);\r\n            Assert.True(ps.IsEnabled == isEnabled);\r\n            Assert.True(ps.IsMachineWide == isMachineWide);\r\n            Assert.True(ps.IsOfficial == isOfficial);\r\n        }\r\n\r\n        private IPackageSourceProvider CreatePackageSourceProvider(\r\n            ISettings settings = null,\r\n            IEnumerable<PackageSource> providerDefaultSources = null,\r\n            IDictionary<PackageSource, PackageSource> migratePackageSources = null,\r\n            IEnumerable<PackageSource> configurationDefaultSources = null,\r\n            IEnvironmentVariableReader environment = null)\r\n        {\r\n            settings = settings ?? new Mock<ISettings>().Object;\r\n            environment = environment ?? new Mock<IEnvironmentVariableReader>().Object;\r\n            return new PackageSourceProvider(settings, providerDefaultSources, migratePackageSources, configurationDefaultSources, environment);\r\n        }\r\n\r\n        private static void AssertKVP(KeyValuePair<string, string> expected, KeyValuePair<string, string> actual)\r\n        {\r\n            Assert.Equal(expected.Key, actual.Key);\r\n            Assert.Equal(expected.Value, actual.Value);\r\n        }\r\n    }\r\n}"
  }
]