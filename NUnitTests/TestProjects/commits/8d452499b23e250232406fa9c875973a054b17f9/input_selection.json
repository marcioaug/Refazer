[
  {
    "Text": "Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);",
    "Start": 5110,
    "Length": 73,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\n#if !NET40\n\nnamespace ProductivityApiTests\n{\n    using System;\n    using System.Data.Entity;\n    using System.Data.Entity.Infrastructure;\n    using System.IO;\n    using System.Linq;\n    using System.Transactions;\n    using SimpleModel;\n    using Xunit;\n\n    public class SimpleScenariosForLocalDb : FunctionalTestBase, IDisposable\n    {\n        #region Infrastructure/setup\n\n        private readonly object _previousDataDirectory;\n\n        public SimpleScenariosForLocalDb()\n        {\n            _previousDataDirectory = AppDomain.CurrentDomain.GetData(\"DataDirectory\");\n\n            AppDomain.CurrentDomain.SetData(\"DataDirectory\", Path.GetTempPath());\n            MutableResolver.AddResolver<IDbConnectionFactory>(k => new LocalDbConnectionFactory(\"v11.0\"));\n        }\n\n        public void Dispose()\n        {\n            try\n            {\n                // Ensure LocalDb databases are deleted after use so that LocalDb doesn't throw if\n                // the temp location in which they are stored is later cleaned.\n                using (var context = new SimpleLocalDbModelContext())\n                {\n                    context.Database.Delete();\n                }\n\n                using (var context = new LocalDbLoginsContext())\n                {\n                    context.Database.Delete();\n                }\n\n                using (var context = new ModelWithWideProperties())\n                {\n                    context.Database.Delete();\n                }\n\n                Database.Delete(\"Scenario_CodeFirstWithModelBuilder\");\n                Database.Delete(\"Scenario_Use_AppConfig_LocalDb_connection_string\");\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n                AppDomain.CurrentDomain.SetData(\"DataDirectory\", _previousDataDirectory);\n            }\n        }\n\n        #endregion\n\n        #region Scenarios for SQL Server LocalDb using LocalDbConnectionFactory\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted()\n        {\n            EnsureDatabaseInitialized(() => new ModelWithWideProperties());\n\n            using (new TransactionScope())\n            {\n                using (var context = new ModelWithWideProperties())\n                {\n                    var entity = new EntityWithExplicitWideProperties\n                    {\n                        Property1 = new String('1', 1000),\n                        Property2 = new String('2', 1000),\n                        Property3 = new String('3', 1000),\n                        Property4 = new String('4', 1000),\n                    };\n\n                    context.ExplicitlyWide.Add(entity);\n\n                    context.SaveChanges();\n\n                    entity.Property1 = new String('A', 4000);\n                    entity.Property2 = new String('B', 4000);\n\n                    context.SaveChanges();\n                }\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted()\n        {\n            EnsureDatabaseInitialized(() => new ModelWithWideProperties());\n\n            using (new TransactionScope())\n            {\n                using (var context = new ModelWithWideProperties())\n                {\n                    var entity = new EntityWithImplicitWideProperties\n                    {\n                        Property1 = new String('1', 1000),\n                        Property2 = new String('2', 1000),\n                        Property3 = new String('3', 1000),\n                        Property4 = new String('4', 1000),\n                    };\n\n                    context.ImplicitlyWide.Add(entity);\n\n                    context.SaveChanges();\n\n                    entity.Property1 = new String('A', 4000);\n                    entity.Property2 = new String('B', 4000);\n\n                    context.SaveChanges();\n                }\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Find()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = context.Products.Find(1);\n                var category = context.Categories.Find(\"Foods\");\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotNull(product);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.NotNull(category);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n\n                Assert.Equal(\"Foods\", product.CategoryId);\n                Assert.Same(category, product.Category);\n                Assert.True(category.Products.Contains(product));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Insert()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = new Product\n                    {\n                        Name = \"Vegemite\"\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotEqual(0, product.Id);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Update()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = context.Products.Find(1);\n                product.Name = \"iSnack 2.0\";\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Equal(\"iSnack 2.0\", product.Name);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Query()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var products = context.Products.ToList();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Equal(7, products.Count);\n                Assert.True(products.TrueForAll(p => GetStateEntry(context, p).State == EntityState.Unchanged));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Relate_using_query()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var category = context.Categories.Find(\"Foods\");\n                var product = new Product\n                    {\n                        Name = \"Bovril\",\n                        Category = category\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotNull(product);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.NotNull(category);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n\n                Assert.Equal(\"Foods\", product.CategoryId);\n                Assert.Same(category, product.Category);\n                Assert.True(category.Products.Contains(product));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Relate_using_FK()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = new Product\n                    {\n                        Name = \"Bovril\",\n                        CategoryId = \"Foods\"\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotNull(product);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n                Assert.Equal(\"Foods\", product.CategoryId);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_CodeFirst_with_ModelBuilder()\n        {\n            Database.Delete(\"Scenario_CodeFirstWithModelBuilder\");\n\n            var builder = new DbModelBuilder();\n\n            builder.Entity<Product>();\n            builder.Entity<Category>();\n\n            var model = builder.Build(ProviderRegistry.Sql2008_ProviderInfo).Compile();\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_CodeFirstWithModelBuilder\", model))\n            {\n                InsertIntoCleanContext(context);\n            }\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_CodeFirstWithModelBuilder\", model))\n            {\n                ValidateFromCleanContext(context);\n            }\n        }\n\n        private void ValidateFromCleanContext(SimpleLocalDbModelContextWithNoData context)\n        {\n            var product = context.Products.Find(1);\n            var category = context.Categories.Find(\"Large Hadron Collider\");\n\n            // Scenario ends; simple validation of final state follows\n            Assert.NotNull(product);\n            Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n            Assert.NotNull(category);\n            Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n\n            Assert.Equal(\"Large Hadron Collider\", product.CategoryId);\n            Assert.Same(category, product.Category);\n            Assert.True(category.Products.Contains(product));\n\n            Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n        }\n\n        private void InsertIntoCleanContext(SimpleLocalDbModelContextWithNoData context)\n        {\n            context.Categories.Add(\n                new Category\n                    {\n                        Id = \"Large Hadron Collider\"\n                    });\n            context.Products.Add(\n                new Product\n                    {\n                        Name = \"Higgs Boson\",\n                        CategoryId = \"Large Hadron Collider\"\n                    });\n            context.SaveChanges();\n\n            Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Using_two_databases()\n        {\n            EnsureDatabaseInitialized(() => new LocalDbLoginsContext());\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new LocalDbLoginsContext())\n            {\n                var login = new Login\n                    {\n                        Id = Guid.NewGuid(),\n                        Username = \"elmo\"\n                    };\n                context.Logins.Add(login);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Same(login, context.Logins.Find(login.Id));\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, login).State);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var category = new Category\n                    {\n                        Id = \"Books\"\n                    };\n                var product = new Product\n                    {\n                        Name = \"The Unbearable Lightness of Being\",\n                        Category = category\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n                Assert.Equal(\"Books\", product.CategoryId);\n                Assert.Same(category, product.Category);\n                Assert.True(category.Products.Contains(product));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Use_AppConfig_connection_string()\n        {\n            Database.Delete(\"Scenario_Use_AppConfig_LocalDb_connection_string\");\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_Use_AppConfig_LocalDb_connection_string\"))\n            {\n                Assert.Equal(\"Scenario_Use_AppConfig_LocalDb\", context.Database.Connection.Database);\n                InsertIntoCleanContext(context);\n            }\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_Use_AppConfig_LocalDb_connection_string\"))\n            {\n                ValidateFromCleanContext(context);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Include()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                context.Configuration.LazyLoadingEnabled = false;\n\n                var products = context.Products.Where(p => p != null).Include(\"Category\").ToList();\n\n                foreach (var product in products)\n                {\n                    Assert.NotNull(product.Category);\n                }\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_IncludeWithLambda()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                context.Configuration.LazyLoadingEnabled = false;\n\n                var products = context.Products.Where(p => p != null).Include(p => p.Category).ToList();\n\n                foreach (var product in products)\n                {\n                    Assert.NotNull(product.Category);\n                }\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        #endregion\n    }\n}\n\n#endif\n",
      "Start": 0,
      "Length": 15680,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-02\\Documents\\Visual Studio 2013\\Projects\\IntelliMeta\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests\\FunctionalTests\\ProductivityApi\\SimpleScenariosForLocalDb.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-02\\Documents\\Visual Studio 2013\\Projects\\IntelliMeta\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests\\FunctionalTests\\ProductivityApi\\SimpleScenariosForLocalDb.cs"
  },
  {
    "Text": "Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);",
    "Start": 5911,
    "Length": 73,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\n#if !NET40\n\nnamespace ProductivityApiTests\n{\n    using System;\n    using System.Data.Entity;\n    using System.Data.Entity.Infrastructure;\n    using System.IO;\n    using System.Linq;\n    using System.Transactions;\n    using SimpleModel;\n    using Xunit;\n\n    public class SimpleScenariosForLocalDb : FunctionalTestBase, IDisposable\n    {\n        #region Infrastructure/setup\n\n        private readonly object _previousDataDirectory;\n\n        public SimpleScenariosForLocalDb()\n        {\n            _previousDataDirectory = AppDomain.CurrentDomain.GetData(\"DataDirectory\");\n\n            AppDomain.CurrentDomain.SetData(\"DataDirectory\", Path.GetTempPath());\n            MutableResolver.AddResolver<IDbConnectionFactory>(k => new LocalDbConnectionFactory(\"v11.0\"));\n        }\n\n        public void Dispose()\n        {\n            try\n            {\n                // Ensure LocalDb databases are deleted after use so that LocalDb doesn't throw if\n                // the temp location in which they are stored is later cleaned.\n                using (var context = new SimpleLocalDbModelContext())\n                {\n                    context.Database.Delete();\n                }\n\n                using (var context = new LocalDbLoginsContext())\n                {\n                    context.Database.Delete();\n                }\n\n                using (var context = new ModelWithWideProperties())\n                {\n                    context.Database.Delete();\n                }\n\n                Database.Delete(\"Scenario_CodeFirstWithModelBuilder\");\n                Database.Delete(\"Scenario_Use_AppConfig_LocalDb_connection_string\");\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n                AppDomain.CurrentDomain.SetData(\"DataDirectory\", _previousDataDirectory);\n            }\n        }\n\n        #endregion\n\n        #region Scenarios for SQL Server LocalDb using LocalDbConnectionFactory\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted()\n        {\n            EnsureDatabaseInitialized(() => new ModelWithWideProperties());\n\n            using (new TransactionScope())\n            {\n                using (var context = new ModelWithWideProperties())\n                {\n                    var entity = new EntityWithExplicitWideProperties\n                    {\n                        Property1 = new String('1', 1000),\n                        Property2 = new String('2', 1000),\n                        Property3 = new String('3', 1000),\n                        Property4 = new String('4', 1000),\n                    };\n\n                    context.ExplicitlyWide.Add(entity);\n\n                    context.SaveChanges();\n\n                    entity.Property1 = new String('A', 4000);\n                    entity.Property2 = new String('B', 4000);\n\n                    context.SaveChanges();\n                }\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted()\n        {\n            EnsureDatabaseInitialized(() => new ModelWithWideProperties());\n\n            using (new TransactionScope())\n            {\n                using (var context = new ModelWithWideProperties())\n                {\n                    var entity = new EntityWithImplicitWideProperties\n                    {\n                        Property1 = new String('1', 1000),\n                        Property2 = new String('2', 1000),\n                        Property3 = new String('3', 1000),\n                        Property4 = new String('4', 1000),\n                    };\n\n                    context.ImplicitlyWide.Add(entity);\n\n                    context.SaveChanges();\n\n                    entity.Property1 = new String('A', 4000);\n                    entity.Property2 = new String('B', 4000);\n\n                    context.SaveChanges();\n                }\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Find()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = context.Products.Find(1);\n                var category = context.Categories.Find(\"Foods\");\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotNull(product);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.NotNull(category);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n\n                Assert.Equal(\"Foods\", product.CategoryId);\n                Assert.Same(category, product.Category);\n                Assert.True(category.Products.Contains(product));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Insert()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = new Product\n                    {\n                        Name = \"Vegemite\"\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotEqual(0, product.Id);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Update()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = context.Products.Find(1);\n                product.Name = \"iSnack 2.0\";\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Equal(\"iSnack 2.0\", product.Name);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Query()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var products = context.Products.ToList();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Equal(7, products.Count);\n                Assert.True(products.TrueForAll(p => GetStateEntry(context, p).State == EntityState.Unchanged));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Relate_using_query()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var category = context.Categories.Find(\"Foods\");\n                var product = new Product\n                    {\n                        Name = \"Bovril\",\n                        Category = category\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotNull(product);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n                Assert.NotNull(category);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n\n                Assert.Equal(\"Foods\", product.CategoryId);\n                Assert.Same(category, product.Category);\n                Assert.True(category.Products.Contains(product));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Relate_using_FK()\n        {\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var product = new Product\n                    {\n                        Name = \"Bovril\",\n                        CategoryId = \"Foods\"\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.NotNull(product);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n                Assert.Equal(\"Foods\", product.CategoryId);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_CodeFirst_with_ModelBuilder()\n        {\n            Database.Delete(\"Scenario_CodeFirstWithModelBuilder\");\n\n            var builder = new DbModelBuilder();\n\n            builder.Entity<Product>();\n            builder.Entity<Category>();\n\n            var model = builder.Build(ProviderRegistry.Sql2008_ProviderInfo).Compile();\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_CodeFirstWithModelBuilder\", model))\n            {\n                InsertIntoCleanContext(context);\n            }\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_CodeFirstWithModelBuilder\", model))\n            {\n                ValidateFromCleanContext(context);\n            }\n        }\n\n        private void ValidateFromCleanContext(SimpleLocalDbModelContextWithNoData context)\n        {\n            var product = context.Products.Find(1);\n            var category = context.Categories.Find(\"Large Hadron Collider\");\n\n            // Scenario ends; simple validation of final state follows\n            Assert.NotNull(product);\n            Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n\n            Assert.NotNull(category);\n            Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n\n            Assert.Equal(\"Large Hadron Collider\", product.CategoryId);\n            Assert.Same(category, product.Category);\n            Assert.True(category.Products.Contains(product));\n\n            Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n        }\n\n        private void InsertIntoCleanContext(SimpleLocalDbModelContextWithNoData context)\n        {\n            context.Categories.Add(\n                new Category\n                    {\n                        Id = \"Large Hadron Collider\"\n                    });\n            context.Products.Add(\n                new Product\n                    {\n                        Name = \"Higgs Boson\",\n                        CategoryId = \"Large Hadron Collider\"\n                    });\n            context.SaveChanges();\n\n            Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Using_two_databases()\n        {\n            EnsureDatabaseInitialized(() => new LocalDbLoginsContext());\n            EnsureDatabaseInitialized(() => new SimpleLocalDbModelContext());\n\n            using (var context = new LocalDbLoginsContext())\n            {\n                var login = new Login\n                    {\n                        Id = Guid.NewGuid(),\n                        Username = \"elmo\"\n                    };\n                context.Logins.Add(login);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Same(login, context.Logins.Find(login.Id));\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, login).State);\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                var category = new Category\n                    {\n                        Id = \"Books\"\n                    };\n                var product = new Product\n                    {\n                        Name = \"The Unbearable Lightness of Being\",\n                        Category = category\n                    };\n                context.Products.Add(product);\n                context.SaveChanges();\n\n                // Scenario ends; simple validation of final state follows\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, product).State);\n                Assert.Equal(EntityState.Unchanged, GetStateEntry(context, category).State);\n                Assert.Equal(\"Books\", product.CategoryId);\n                Assert.Same(category, product.Category);\n                Assert.True(category.Products.Contains(product));\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Use_AppConfig_connection_string()\n        {\n            Database.Delete(\"Scenario_Use_AppConfig_LocalDb_connection_string\");\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_Use_AppConfig_LocalDb_connection_string\"))\n            {\n                Assert.Equal(\"Scenario_Use_AppConfig_LocalDb\", context.Database.Connection.Database);\n                InsertIntoCleanContext(context);\n            }\n\n            using (var context = new SimpleLocalDbModelContextWithNoData(\"Scenario_Use_AppConfig_LocalDb_connection_string\"))\n            {\n                ValidateFromCleanContext(context);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_Include()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                context.Configuration.LazyLoadingEnabled = false;\n\n                var products = context.Products.Where(p => p != null).Include(\"Category\").ToList();\n\n                foreach (var product in products)\n                {\n                    Assert.NotNull(product.Category);\n                }\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        [ExtendedFact(SkipForSqlAzure = true)]\n        public void Scenario_IncludeWithLambda()\n        {\n            using (var context = new SimpleLocalDbModelContext())\n            {\n                context.Configuration.LazyLoadingEnabled = false;\n\n                var products = context.Products.Where(p => p != null).Include(p => p.Category).ToList();\n\n                foreach (var product in products)\n                {\n                    Assert.NotNull(product.Category);\n                }\n\n                Assert.Equal(@\"(localdb)\\v11.0\", context.Database.Connection.DataSource);\n            }\n        }\n\n        #endregion\n    }\n}\n\n#endif\n",
      "Start": 0,
      "Length": 15680,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG-02\\Documents\\Visual Studio 2013\\Projects\\IntelliMeta\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests\\FunctionalTests\\ProductivityApi\\SimpleScenariosForLocalDb.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG-02\\Documents\\Visual Studio 2013\\Projects\\IntelliMeta\\intellimeta\\NUnitTests\\TestProjects\\Projects\\FunctionalTests\\FunctionalTests\\ProductivityApi\\SimpleScenariosForLocalDb.cs"
  }
]