[
  {
    "Text": "context.GetModel()",
    "Start": 7410,
    "Length": 18,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Migrations.History\n{\n    using System.Data.Entity.Core.Common;\n    using System.Data.Entity.Core.Common.CommandTrees;\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Internal;\n    using System.Data.Entity.Migrations.Edm;\n    using System.Data.Entity.Migrations.Infrastructure;\n    using System.Data.Entity.Migrations.Model;\n    using System.Data.Entity.Resources;\n    using System.Data.Entity.SqlServer;\n    using System.Data.Entity.Utilities;\n    using System.Data.SqlClient;\n    using System.Linq;\n    using System.Text;\n    using System.Xml;\n    using System.Xml.Linq;\n    using Moq;\n    using Xunit;\n\n    [Variant(DatabaseProvider.SqlClient, ProgrammingLanguage.CSharp)]\n    [Variant(DatabaseProvider.SqlServerCe, ProgrammingLanguage.CSharp)]\n    public class HistoryRepositoryTests : DbTestCase\n    {\n        [Fact]\n        public void Members_are_found_by_Reflection()\n        {\n            Assert.NotNull(HistoryRepository.ContextKeyProperty);\n            Assert.NotNull(HistoryRepository.MigrationIdProperty);\n        }\n\n        [MigrationsTheory]\n        public void Should_throw_when_upgrading_5_6_and_custom_history_context_factory_specified()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(\n                    Mock.Of<InternalContextForMock>(),\n                    ConnectionString,\n                    ProviderFactory,\n                    \"MyKey\",\n                    null,\n                    historyContextFactory: (c, s) => new HistoryContext(c, s));\n\n            var createTableOperation = GetCreateHistoryTableOperation();\n\n            createTableOperation.Columns.Remove(createTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n            createTableOperation.PrimaryKey.Columns.RemoveAt(1);\n\n            ExecuteOperations(createTableOperation);\n\n            Assert.Equal(\n                Strings.UnableToUpgradeHistoryWhenCustomFactory,\n                Assert.Throws<MigrationsException>(() => historyRepository.GetUpgradeOperations().ToList()).Message);\n        }\n\n        [MigrationsTheory]\n        public void GetUpgradeOperations_should_return_alter_migration_id_column_when_5_to_6()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var createTableOperation = GetCreateHistoryTableOperation();\n\n            createTableOperation.Columns.Remove(createTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n            createTableOperation.PrimaryKey.Columns.RemoveAt(1);\n\n            ExecuteOperations(createTableOperation);\n\n            var alterColumnOperation = historyRepository.GetUpgradeOperations().OfType<AlterColumnOperation>().Single();\n\n            Assert.Equal(\"MigrationId\", alterColumnOperation.Column.Name);\n            Assert.Equal(150, alterColumnOperation.Column.MaxLength);\n        }\n\n        [MigrationsTheory]\n        public void Should_discover_column_max_lengths_from_model()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.Equal(150, historyRepository.MigrationIdMaxLength);\n            Assert.Equal(300, historyRepository.ContextKeyMaxLength);\n        }\n\n        [MigrationsTheory]\n        public void Can_create_count_query_command_tree()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var commandTrees = historyRepository.CreateDiscoveryQueryTrees();\n\n            foreach (var commandTree in commandTrees)\n            {\n                Assert.NotNull(commandTree);\n                Assert.Equal(DataSpace.SSpace, commandTree.DataSpace);\n                Assert.Equal(0, commandTree.Parameters.Count());\n            }\n        }\n\n        [MigrationsTheory]\n        public void Can_create_count_query_command_trees_when_sql_azure_execution_strategy()\n        {\n            ResetDatabase();\n\n            try\n            {\n                MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(\n                    key => (Func<IDbExecutionStrategy>)(() => new SqlAzureExecutionStrategy()));\n\n                var historyRepository\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n                var commandTrees = historyRepository.CreateDiscoveryQueryTrees();\n\n                foreach (var commandTree in commandTrees)\n                {\n                    Assert.NotNull(commandTree);\n                    Assert.Equal(DataSpace.SSpace, commandTree.DataSpace);\n                    Assert.Equal(0, commandTree.Parameters.Count());\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetUpgradeOperations_should_return_context_key_column_when_not_present()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var createTableOperation = GetCreateHistoryTableOperation();\n\n            createTableOperation.Columns.Remove(createTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n            createTableOperation.PrimaryKey.Columns.RemoveAt(1);\n            ExecuteOperations(createTableOperation);\n\n            var addColumnOperation = historyRepository.GetUpgradeOperations().OfType<AddColumnOperation>().Single();\n\n            Assert.Equal(\"ContextKey\", addColumnOperation.Column.Name);\n            Assert.Equal(\"MyKey\", addColumnOperation.Column.DefaultValue);\n            Assert.Equal(300, addColumnOperation.Column.MaxLength);\n            Assert.False(addColumnOperation.Column.IsNullable.Value);\n        }\n\n        [MigrationsTheory]\n        public void GetUpgradeOperations_should_return_nothing_when_table_not_present()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetUpgradeOperations().Any());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_all_migrations_when_target_is_empty()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository.GetMigrationsSince(DbMigrator.InitialDatabase);\n\n            Assert.Equal(2, migrations.Count());\n            Assert.Equal(\"Migration2\", migrations.First());\n        }\n\n        [MigrationsTheory]\n        public void HasMigrations_should_return_true_when_table_has_migrations_for_key()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository.CreateInsertOperation(\"Migration1\", model)\n                        });\n            }\n\n            Assert.True(historyRepository.HasMigrations());\n        }\n\n        [MigrationsTheory]\n        public void HasMigrations_should_return_false_when_context_key_not_matching()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n\n            var historyRepository2\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository2.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            Assert.False(historyRepository1.HasMigrations());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_match_on_name()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository.CreateInsertOperation(\"201109192032331_Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"201109192032332_Migration2\", model)\n                        });\n            }\n\n            var migrationId = historyRepository.GetMigrationId(\"Migration1\");\n\n            Assert.Equal(\"201109192032331_Migration1\", migrationId);\n\n            migrationId = historyRepository.GetMigrationId(\"migrATIon2\");\n\n            Assert.Equal(\"201109192032332_Migration2\", migrationId);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_match_by_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n\n            var historyRepository2\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository1.CreateInsertOperation(\"201109192032331_Migration1\", model),\n                            historyRepository1.CreateInsertOperation(\"201109192032332_Migration2\", model),\n                            historyRepository2.CreateInsertOperation(\"201109192032331_Migration1\", model),\n                            historyRepository2.CreateInsertOperation(\"201109192032332_Migration2\", model)\n                        });\n            }\n\n            var migrationId = historyRepository1.GetMigrationId(\"Migration1\");\n\n            Assert.Equal(\"201109192032331_Migration1\", migrationId);\n\n            migrationId = historyRepository1.GetMigrationId(\"migrATIon2\");\n\n            Assert.Equal(\"201109192032332_Migration2\", migrationId);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_throw_when_name_ambiguous()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository.CreateInsertOperation(\"201109192032331_Migration\", model),\n                            historyRepository.CreateInsertOperation(\"201109192032332_Migration\", model)\n                        });\n            }\n\n            Assert.Equal(\n                Strings.AmbiguousMigrationName(\"Migration\"),\n                Assert.Throws<MigrationsException>(() => historyRepository.GetMigrationId(\"Migration\")).Message);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_return_null_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"), \n                    ProviderFactory, \n                    \"MyKey\",\n                    null, \n                    HistoryContext.DefaultFactory);\n\n            Assert.Null(historyRepository.GetMigrationId(DbMigrator.InitialDatabase));\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_subset_when_target_valid()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository.GetMigrationsSince(\"Migration1\");\n\n            Assert.Equal(1, migrations.Count());\n            Assert.Equal(\"Migration2\", migrations.Single());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_subset_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n\n            var historyRepository2\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository1.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository1.CreateInsertOperation(\"Migration2\", model),\n                            historyRepository2.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository2.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository1.GetMigrationsSince(\"Migration1\");\n\n            Assert.Equal(1, migrations.Count());\n            Assert.Equal(\"Migration2\", migrations.Single());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_empty_when_target_valid_but_is_latest()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository.GetMigrationsSince(\"Migration2\");\n\n            Assert.Equal(0, migrations.Count());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_empty_set_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"),\n                    ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetPendingMigrations(Enumerable.Empty<string>()).Any());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_empty_set_when_no_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetPendingMigrations(Enumerable.Empty<string>()).Any());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_empty_set_when_no_data()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetPendingMigrations(Enumerable.Empty<string>()).Any());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_migrations_not_in_input_set()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository.CreateInsertOperation(\"Migration 1\", model),\n                    historyRepository.CreateInsertOperation(\"Migration 3\", model),\n                    historyRepository.CreateInsertOperation(\"Migration 5\", model));\n            }\n\n            var pendingMigrations =\n                historyRepository.GetPendingMigrations(\n                    new[] { \"Migration 1\", \"Migration 2\", \"Migration 3\", \"Migration 4\", \"Migration 5\" });\n\n            Assert.Equal(\"Migration 2\", pendingMigrations.First());\n            Assert.Equal(\"Migration 4\", pendingMigrations.Last());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_migrations_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1 = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n            var historyRepository2 = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model),\n                    historyRepository2.CreateInsertOperation(\"Migration 1\", model),\n                    historyRepository1.CreateInsertOperation(\"Migration 3\", model),\n                    historyRepository1.CreateInsertOperation(\"Migration 5\", model));\n            }\n\n            var pendingMigrations =\n                historyRepository1.GetPendingMigrations(\n                    new[] { \"Migration 1\", \"Migration 2\", \"Migration 3\", \"Migration 4\", \"Migration 5\" });\n\n            Assert.Equal(\"Migration 2\", pendingMigrations.First());\n            Assert.Equal(\"Migration 4\", pendingMigrations.Last());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_ignore_InitialCreate_timestamps()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository.CreateInsertOperation(\"000000000000001_InitialCreate\", model));\n            }\n\n            var pendingMigrations = historyRepository.GetPendingMigrations(\n                new[] { \"000000000000002_InitialCreate\", \"Migration 1\" });\n\n            Assert.Equal(\"Migration 1\", pendingMigrations.Single());\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_null_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"),\n                    ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var modelBuilder = new DbModelBuilder();\n\n            modelBuilder.Entity<MigrationsCustomer>();\n\n            string _;\n            Assert.Null(historyRepository.GetLastModel(out _, out _));\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_null_when_no_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n            var modelBuilder = new DbModelBuilder();\n\n            modelBuilder.Entity<MigrationsCustomer>();\n\n            string _;\n            Assert.Null(historyRepository.GetLastModel(out _, out _));\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_null_when_no_data()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n            var modelBuilder = new DbModelBuilder();\n\n            modelBuilder.Entity<MigrationsCustomer>();\n\n            string _;\n            Assert.Null(historyRepository.GetLastModel(out _, out _));\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_when_row()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model1 = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository.CreateInsertOperation(\"Migration 1\", model1));\n\n                ExecuteOperations(\n                    new[] { historyRepository.CreateInsertOperation(\"Migration 2\", model1) });\n\n                string migrationId, productVersion;\n                var model2 = historyRepository.GetLastModel(out migrationId, out productVersion);\n\n                Assert.NotNull(model2);\n                Assert.True(XNode.DeepEquals(model1, model2));\n                Assert.Equal(\"Migration 2\", migrationId);\n                Assert.Equal(typeof(DbContext).Assembly().GetInformationalVersion(), productVersion);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key1\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model));\n\n                var historyRepository2\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key2\", null, HistoryContext.DefaultFactory);\n\n                ExecuteOperations(\n                    new[] { historyRepository2.CreateInsertOperation(\"Migration 2\", model) });\n\n                string migrationId, _;\n                model = historyRepository1.GetLastModel(out migrationId, out _);\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration 1\", migrationId);\n\n                model = historyRepository2.GetLastModel(out migrationId, out _);\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration 2\", migrationId);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_based_on_passed_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key1\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model));\n\n                var historyRepository2\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key2\", null, HistoryContext.DefaultFactory);\n\n                ExecuteOperations(\n                    new[] { historyRepository2.CreateInsertOperation(\"Migration 2\", model) });\n\n                string migrationId, _;\n                model = historyRepository1.GetLastModel(out migrationId, out _, \"Key2\");\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration 2\", migrationId);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_based_on_passed_context_key_when_custom_default_schema()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"LegacyKey\", null, HistoryContext.DefaultFactory)\n                      {\n                          CurrentSchema = \"foo\"\n                      };\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(historyRepository.CurrentSchema),\n                    historyRepository.CreateInsertOperation(\"Migration\", model));\n\n                historyRepository\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                        ConnectionString,\n                        ProviderFactory,\n                        \"NewKey\",\n                        null,\n                        HistoryContext.DefaultFactory,\n                        schemas: new[] { \"foo\" });\n\n                string migrationId, _;\n                model = historyRepository.GetLastModel(out migrationId, out _, \"LegacyKey\");\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration\", migrationId);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetModel_should_return_model_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key1\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model));\n\n                var historyRepository2\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key2\", null, HistoryContext.DefaultFactory);\n\n                ExecuteOperations(\n                    new[] { historyRepository2.CreateInsertOperation(\"Migration 2\", model) });\n\n                string productVersion;\n                model = historyRepository1.GetModel(\"Migration 1\", out productVersion);\n\n                Assert.NotNull(model);\n                Assert.Equal(typeof(DbContext).Assembly().GetInformationalVersion(), productVersion);\n\n                string _;\n                model = historyRepository2.GetModel(\"Migration 2\", out _);\n\n                Assert.NotNull(model);\n            }\n        }\n\n        [MigrationsTheory]\n        public void Exists_should_return_false_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"),\n                    ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.Exists());\n        }\n\n        [MigrationsTheory]\n        public void Exists_should_return_false_when_no_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.Exists());\n        }\n\n        [MigrationsTheory]\n        public void Exists_should_return_true_when_database_and_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            Assert.True(historyRepository.Exists());\n        }\n\n        [MigrationsTheory]\n        public void IsShared_should_return_true_when_rows_with_other_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            Assert.False(historyRepository.IsShared());\n\n            ExecuteOperations(\n                new SqlOperation(\n                    @\"INSERT INTO [__MigrationHistory] ([MigrationId], [ContextKey], [ProductVersion], [Model]) \n                                  VALUES ('000000000000000_ExistingMigration', \n                                          'MyKey',\n                                          '1.0',\n                                          0xn\n            Assert.False(historyRepository.IsShared());\n\n            ExecuteOperations(\n                new SqlOperation(\n                    @\"INSERT INTO [__MigrationHistory] ([MigrationId], [ContextKey], [ProductVersion], [Model]) \n                                  VALUES ('000000000000000_ExistingMigration', \n                                          'MyOtherKey',\n                                          '1.0',\n                                          0xn\n            Assert.True(historyRepository.IsShared());\n        }\n\n        [MigrationsTheory]\n        public void Repository_should_work_gracefully_when_no_context_key_column()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var createHistoryTableOperation = GetCreateHistoryTableOperation();\n\n            createHistoryTableOperation.Columns.Remove(\n                createHistoryTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n\n            createHistoryTableOperation.PrimaryKey.Columns.Remove(\"ContextKey\");\n\n            ExecuteOperations(\n                createHistoryTableOperation,\n                new SqlOperation(\n                    @\"INSERT INTO [__MigrationHistory] ([MigrationId], [ProductVersion], [Model]) \n                                  VALUES ('000000000000000_ExistingMigration', \n                                          '1.0',\n                                          0xn\n            Assert.True(historyRepository.Exists());\n            string _;\n            Assert.NotNull(historyRepository.GetLastModel(out _, out _));\n            Assert.NotEmpty(historyRepository.GetMigrationsSince(\"0\"));\n            Assert.NotNull(historyRepository.GetModel(\"000000000000000_ExistingMigration\", out _));\n            Assert.Equal(\"000000000000000_ExistingMigration\", historyRepository.GetMigrationId(\"ExistingMigration\"));\n        }\n\n        [MigrationsTheory]\n        public void CreateInsertOperation_should_return_valid_history_operation()\n        {\n            var modelBuilder = new DbModelBuilder();\n            var model = modelBuilder.Build(ProviderInfo);\n            var edmxString = new StringBuilder();\n\n            using (var xmlWriter = XmlWriter.Create(\n                edmxString, new XmlWriterSettings\n                                {\n                                    Indent = true\n                                }))\n            {\n                EdmxWriter.WriteEdmx(model, xmlWriter);\n            }\n\n            var modelDocument = model.GetModel();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var historyOperation\n                = (HistoryOperation)historyRepository.CreateInsertOperation(\"Migration1\", modelDocument);\n\n            Assert.NotEmpty(historyOperation.CommandTrees);\n            Assert.Equal(DbCommandTreeKind.Insert, historyOperation.CommandTrees.Single().CommandTreeKind);\n        }\n\n        [MigrationsTheory]\n        public void CreateDeleteOperation_should_return_valid_history_operation()\n        {\n            var modelBuilder = new DbModelBuilder();\n            var model = modelBuilder.Build(ProviderInfo);\n            var edmxString = new StringBuilder();\n\n            using (var xmlWriter = XmlWriter.Create(\n                edmxString, new XmlWriterSettings\n                                {\n                                    Indent = true\n                                }))\n            {\n                EdmxWriter.WriteEdmx(model, xmlWriter);\n            }\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var historyOperation\n                = (HistoryOperation)historyRepository.CreateDeleteOperation(\"Migration1\");\n\n            Assert.NotEmpty(historyOperation.CommandTrees);\n            Assert.Equal(DbCommandTreeKind.Delete, historyOperation.CommandTrees.Single().CommandTreeKind);\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_gets_latest_based_on_MigrationId()\n        {\n            var historyRepository = SetupHistoryRepositoryForOrderingTest();\n\n            string migrationId, _;\n            historyRepository.GetLastModel(out migrationId, out _);\n\n            Assert.Equal(\"227309030010001_Migration1\", migrationId);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_gets_migrations_based_on_MigrationId()\n        {\n            var historyRepository = SetupHistoryRepositoryForOrderingTest();\n\n            var migrations = historyRepository.GetMigrationsSince(\"227209030010001_Migration2\");\n\n            Assert.Equal(1, migrations.Count());\n            Assert.Equal(\"227309030010001_Migration1\", migrations.Single());\n        }\n\n        private HistoryRepository SetupHistoryRepositoryForOrderingTest()\n        {\n            ResetDatabase();\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                var clonedConnection = DbProviderServices.GetProviderFactory(context.Database.Connection).CreateConnection();\n                clonedConnection.ConnectionString = context.Database.Connection.ConnectionString;\n\n                using (var historyContext = new HistoryContext(clonedConnection, defaultSchema: null))\n                {\n                    context.InternalContext.MarkDatabaseInitialized();\n\n                    context.Database.ExecuteSqlCommand(\n                        ((IObjectContextAdapter)historyContext).ObjectContext.CreateDatabaseScript());\n\n                    historyContext.History.Add(\n                        new HistoryRow\n                            {\n                                MigrationId = \"227309030010001_Migration1\",\n                                ContextKey = \"MyKey\",\n                                Model = new ModelCompressor().Compress(model),\n                                ProductVersion = \"\",\n                            });\n\n                    historyContext.History.Add(\n                        new HistoryRow\n                            {\n                                MigrationId = \"227209030010001_Migration2\",\n                                ContextKey = \"MyKey\",\n                                Model = new ModelCompressor().Compress(model),\n                                ProductVersion = \"\",\n                            });\n\n                    historyContext.SaveChanges();\n                }\n            }\n\n            return new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n        }\n\n        [MigrationsTheory]\n        public void HistoryRepository_sets_timeout_onto_HistoryContext()\n        {\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", 77, HistoryContext.DefaultFactory);\n\n            using (var connection = new SqlConnection())\n            {\n                using (var context = historyRepository.CreateContext(connection))\n                {\n                    Assert.Equal(77, context.Database.CommandTimeout);\n                }\n            }\n        }\n\n        [MigrationsTheory]\n        public void HistoryRepository_updates_interception_context()\n        {\n            var owner = new Mock<DbContext>().Object;\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                ConnectionString, \n                ProviderFactory, \n                \"MyKey\", \n                null, \n                HistoryContext.DefaultFactory,\n                schemas: null, \n                contextForInterception: owner);\n\n            using (var connection = ProviderFactory.CreateConnection())\n            {\n                connection.ConnectionString = ConnectionString;\n\n                using (var context = historyRepository.CreateContext(connection))\n                {\n                    var interceptionContext = context.InternalContext.ObjectContext.InterceptionContext;\n                    Assert.Contains(context, interceptionContext.DbContexts);\n                    Assert.Contains(owner, interceptionContext.DbContexts);\n                }\n            }\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 45688,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\UnitTests2\\UnitTests\\Migrations\\History\\HistoryRepositoryTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\UnitTests2\\UnitTests\\Migrations\\History\\HistoryRepositoryTests.cs"
  },
  {
    "Text": "context.GetModel()",
    "Start": 8474,
    "Length": 18,
    "Parent": {
      "Text": "// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.\n\nnamespace System.Data.Entity.Migrations.History\n{\n    using System.Data.Entity.Core.Common;\n    using System.Data.Entity.Core.Common.CommandTrees;\n    using System.Data.Entity.Core.Metadata.Edm;\n    using System.Data.Entity.Infrastructure;\n    using System.Data.Entity.Internal;\n    using System.Data.Entity.Migrations.Edm;\n    using System.Data.Entity.Migrations.Infrastructure;\n    using System.Data.Entity.Migrations.Model;\n    using System.Data.Entity.Resources;\n    using System.Data.Entity.SqlServer;\n    using System.Data.Entity.Utilities;\n    using System.Data.SqlClient;\n    using System.Linq;\n    using System.Text;\n    using System.Xml;\n    using System.Xml.Linq;\n    using Moq;\n    using Xunit;\n\n    [Variant(DatabaseProvider.SqlClient, ProgrammingLanguage.CSharp)]\n    [Variant(DatabaseProvider.SqlServerCe, ProgrammingLanguage.CSharp)]\n    public class HistoryRepositoryTests : DbTestCase\n    {\n        [Fact]\n        public void Members_are_found_by_Reflection()\n        {\n            Assert.NotNull(HistoryRepository.ContextKeyProperty);\n            Assert.NotNull(HistoryRepository.MigrationIdProperty);\n        }\n\n        [MigrationsTheory]\n        public void Should_throw_when_upgrading_5_6_and_custom_history_context_factory_specified()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(\n                    Mock.Of<InternalContextForMock>(),\n                    ConnectionString,\n                    ProviderFactory,\n                    \"MyKey\",\n                    null,\n                    historyContextFactory: (c, s) => new HistoryContext(c, s));\n\n            var createTableOperation = GetCreateHistoryTableOperation();\n\n            createTableOperation.Columns.Remove(createTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n            createTableOperation.PrimaryKey.Columns.RemoveAt(1);\n\n            ExecuteOperations(createTableOperation);\n\n            Assert.Equal(\n                Strings.UnableToUpgradeHistoryWhenCustomFactory,\n                Assert.Throws<MigrationsException>(() => historyRepository.GetUpgradeOperations().ToList()).Message);\n        }\n\n        [MigrationsTheory]\n        public void GetUpgradeOperations_should_return_alter_migration_id_column_when_5_to_6()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var createTableOperation = GetCreateHistoryTableOperation();\n\n            createTableOperation.Columns.Remove(createTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n            createTableOperation.PrimaryKey.Columns.RemoveAt(1);\n\n            ExecuteOperations(createTableOperation);\n\n            var alterColumnOperation = historyRepository.GetUpgradeOperations().OfType<AlterColumnOperation>().Single();\n\n            Assert.Equal(\"MigrationId\", alterColumnOperation.Column.Name);\n            Assert.Equal(150, alterColumnOperation.Column.MaxLength);\n        }\n\n        [MigrationsTheory]\n        public void Should_discover_column_max_lengths_from_model()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.Equal(150, historyRepository.MigrationIdMaxLength);\n            Assert.Equal(300, historyRepository.ContextKeyMaxLength);\n        }\n\n        [MigrationsTheory]\n        public void Can_create_count_query_command_tree()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var commandTrees = historyRepository.CreateDiscoveryQueryTrees();\n\n            foreach (var commandTree in commandTrees)\n            {\n                Assert.NotNull(commandTree);\n                Assert.Equal(DataSpace.SSpace, commandTree.DataSpace);\n                Assert.Equal(0, commandTree.Parameters.Count());\n            }\n        }\n\n        [MigrationsTheory]\n        public void Can_create_count_query_command_trees_when_sql_azure_execution_strategy()\n        {\n            ResetDatabase();\n\n            try\n            {\n                MutableResolver.AddResolver<Func<IDbExecutionStrategy>>(\n                    key => (Func<IDbExecutionStrategy>)(() => new SqlAzureExecutionStrategy()));\n\n                var historyRepository\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n                var commandTrees = historyRepository.CreateDiscoveryQueryTrees();\n\n                foreach (var commandTree in commandTrees)\n                {\n                    Assert.NotNull(commandTree);\n                    Assert.Equal(DataSpace.SSpace, commandTree.DataSpace);\n                    Assert.Equal(0, commandTree.Parameters.Count());\n                }\n            }\n            finally\n            {\n                MutableResolver.ClearResolvers();\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetUpgradeOperations_should_return_context_key_column_when_not_present()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var createTableOperation = GetCreateHistoryTableOperation();\n\n            createTableOperation.Columns.Remove(createTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n            createTableOperation.PrimaryKey.Columns.RemoveAt(1);\n            ExecuteOperations(createTableOperation);\n\n            var addColumnOperation = historyRepository.GetUpgradeOperations().OfType<AddColumnOperation>().Single();\n\n            Assert.Equal(\"ContextKey\", addColumnOperation.Column.Name);\n            Assert.Equal(\"MyKey\", addColumnOperation.Column.DefaultValue);\n            Assert.Equal(300, addColumnOperation.Column.MaxLength);\n            Assert.False(addColumnOperation.Column.IsNullable.Value);\n        }\n\n        [MigrationsTheory]\n        public void GetUpgradeOperations_should_return_nothing_when_table_not_present()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetUpgradeOperations().Any());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_all_migrations_when_target_is_empty()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository.GetMigrationsSince(DbMigrator.InitialDatabase);\n\n            Assert.Equal(2, migrations.Count());\n            Assert.Equal(\"Migration2\", migrations.First());\n        }\n\n        [MigrationsTheory]\n        public void HasMigrations_should_return_true_when_table_has_migrations_for_key()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository.CreateInsertOperation(\"Migration1\", model)\n                        });\n            }\n\n            Assert.True(historyRepository.HasMigrations());\n        }\n\n        [MigrationsTheory]\n        public void HasMigrations_should_return_false_when_context_key_not_matching()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n\n            var historyRepository2\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository2.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            Assert.False(historyRepository1.HasMigrations());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_match_on_name()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository.CreateInsertOperation(\"201109192032331_Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"201109192032332_Migration2\", model)\n                        });\n            }\n\n            var migrationId = historyRepository.GetMigrationId(\"Migration1\");\n\n            Assert.Equal(\"201109192032331_Migration1\", migrationId);\n\n            migrationId = historyRepository.GetMigrationId(\"migrATIon2\");\n\n            Assert.Equal(\"201109192032332_Migration2\", migrationId);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_match_by_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n\n            var historyRepository2\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            GetCreateHistoryTableOperation(),\n                            historyRepository1.CreateInsertOperation(\"201109192032331_Migration1\", model),\n                            historyRepository1.CreateInsertOperation(\"201109192032332_Migration2\", model),\n                            historyRepository2.CreateInsertOperation(\"201109192032331_Migration1\", model),\n                            historyRepository2.CreateInsertOperation(\"201109192032332_Migration2\", model)\n                        });\n            }\n\n            var migrationId = historyRepository1.GetMigrationId(\"Migration1\");\n\n            Assert.Equal(\"201109192032331_Migration1\", migrationId);\n\n            migrationId = historyRepository1.GetMigrationId(\"migrATIon2\");\n\n            Assert.Equal(\"201109192032332_Migration2\", migrationId);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_throw_when_name_ambiguous()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository.CreateInsertOperation(\"201109192032331_Migration\", model),\n                            historyRepository.CreateInsertOperation(\"201109192032332_Migration\", model)\n                        });\n            }\n\n            Assert.Equal(\n                Strings.AmbiguousMigrationName(\"Migration\"),\n                Assert.Throws<MigrationsException>(() => historyRepository.GetMigrationId(\"Migration\")).Message);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationId_should_return_null_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"), \n                    ProviderFactory, \n                    \"MyKey\",\n                    null, \n                    HistoryContext.DefaultFactory);\n\n            Assert.Null(historyRepository.GetMigrationId(DbMigrator.InitialDatabase));\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_subset_when_target_valid()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository.GetMigrationsSince(\"Migration1\");\n\n            Assert.Equal(1, migrations.Count());\n            Assert.Equal(\"Migration2\", migrations.Single());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_subset_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n\n            var historyRepository2\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository1.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository1.CreateInsertOperation(\"Migration2\", model),\n                            historyRepository2.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository2.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository1.GetMigrationsSince(\"Migration1\");\n\n            Assert.Equal(1, migrations.Count());\n            Assert.Equal(\"Migration2\", migrations.Single());\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_should_return_empty_when_target_valid_but_is_latest()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    new[]\n                        {\n                            historyRepository.CreateInsertOperation(\"Migration1\", model),\n                            historyRepository.CreateInsertOperation(\"Migration2\", model)\n                        });\n            }\n\n            var migrations = historyRepository.GetMigrationsSince(\"Migration2\");\n\n            Assert.Equal(0, migrations.Count());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_empty_set_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"),\n                    ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetPendingMigrations(Enumerable.Empty<string>()).Any());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_empty_set_when_no_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetPendingMigrations(Enumerable.Empty<string>()).Any());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_empty_set_when_no_data()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.GetPendingMigrations(Enumerable.Empty<string>()).Any());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_migrations_not_in_input_set()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository.CreateInsertOperation(\"Migration 1\", model),\n                    historyRepository.CreateInsertOperation(\"Migration 3\", model),\n                    historyRepository.CreateInsertOperation(\"Migration 5\", model));\n            }\n\n            var pendingMigrations =\n                historyRepository.GetPendingMigrations(\n                    new[] { \"Migration 1\", \"Migration 2\", \"Migration 3\", \"Migration 4\", \"Migration 5\" });\n\n            Assert.Equal(\"Migration 2\", pendingMigrations.First());\n            Assert.Equal(\"Migration 4\", pendingMigrations.Last());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_return_migrations_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1 = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey1\", null, HistoryContext.DefaultFactory);\n            var historyRepository2 = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey2\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model),\n                    historyRepository2.CreateInsertOperation(\"Migration 1\", model),\n                    historyRepository1.CreateInsertOperation(\"Migration 3\", model),\n                    historyRepository1.CreateInsertOperation(\"Migration 5\", model));\n            }\n\n            var pendingMigrations =\n                historyRepository1.GetPendingMigrations(\n                    new[] { \"Migration 1\", \"Migration 2\", \"Migration 3\", \"Migration 4\", \"Migration 5\" });\n\n            Assert.Equal(\"Migration 2\", pendingMigrations.First());\n            Assert.Equal(\"Migration 4\", pendingMigrations.Last());\n        }\n\n        [MigrationsTheory]\n        public void GetPendingMigrations_should_ignore_InitialCreate_timestamps()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository.CreateInsertOperation(\"000000000000001_InitialCreate\", model));\n            }\n\n            var pendingMigrations = historyRepository.GetPendingMigrations(\n                new[] { \"000000000000002_InitialCreate\", \"Migration 1\" });\n\n            Assert.Equal(\"Migration 1\", pendingMigrations.Single());\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_null_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"),\n                    ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var modelBuilder = new DbModelBuilder();\n\n            modelBuilder.Entity<MigrationsCustomer>();\n\n            string _;\n            Assert.Null(historyRepository.GetLastModel(out _, out _));\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_null_when_no_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n            var modelBuilder = new DbModelBuilder();\n\n            modelBuilder.Entity<MigrationsCustomer>();\n\n            string _;\n            Assert.Null(historyRepository.GetLastModel(out _, out _));\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_null_when_no_data()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n            var modelBuilder = new DbModelBuilder();\n\n            modelBuilder.Entity<MigrationsCustomer>();\n\n            string _;\n            Assert.Null(historyRepository.GetLastModel(out _, out _));\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_when_row()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model1 = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository.CreateInsertOperation(\"Migration 1\", model1));\n\n                ExecuteOperations(\n                    new[] { historyRepository.CreateInsertOperation(\"Migration 2\", model1) });\n\n                string migrationId, productVersion;\n                var model2 = historyRepository.GetLastModel(out migrationId, out productVersion);\n\n                Assert.NotNull(model2);\n                Assert.True(XNode.DeepEquals(model1, model2));\n                Assert.Equal(\"Migration 2\", migrationId);\n                Assert.Equal(typeof(DbContext).Assembly().GetInformationalVersion(), productVersion);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key1\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model));\n\n                var historyRepository2\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key2\", null, HistoryContext.DefaultFactory);\n\n                ExecuteOperations(\n                    new[] { historyRepository2.CreateInsertOperation(\"Migration 2\", model) });\n\n                string migrationId, _;\n                model = historyRepository1.GetLastModel(out migrationId, out _);\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration 1\", migrationId);\n\n                model = historyRepository2.GetLastModel(out migrationId, out _);\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration 2\", migrationId);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_based_on_passed_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key1\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model));\n\n                var historyRepository2\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key2\", null, HistoryContext.DefaultFactory);\n\n                ExecuteOperations(\n                    new[] { historyRepository2.CreateInsertOperation(\"Migration 2\", model) });\n\n                string migrationId, _;\n                model = historyRepository1.GetLastModel(out migrationId, out _, \"Key2\");\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration 2\", migrationId);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_should_return_model_based_on_passed_context_key_when_custom_default_schema()\n        {\n            ResetDatabase();\n\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"LegacyKey\", null, HistoryContext.DefaultFactory)\n                      {\n                          CurrentSchema = \"foo\"\n                      };\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(historyRepository.CurrentSchema),\n                    historyRepository.CreateInsertOperation(\"Migration\", model));\n\n                historyRepository\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                        ConnectionString,\n                        ProviderFactory,\n                        \"NewKey\",\n                        null,\n                        HistoryContext.DefaultFactory,\n                        schemas: new[] { \"foo\" });\n\n                string migrationId, _;\n                model = historyRepository.GetLastModel(out migrationId, out _, \"LegacyKey\");\n\n                Assert.NotNull(model);\n                Assert.Equal(\"Migration\", migrationId);\n            }\n        }\n\n        [MigrationsTheory]\n        public void GetModel_should_return_model_based_on_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository1\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key1\", null, HistoryContext.DefaultFactory);\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                ExecuteOperations(\n                    GetCreateHistoryTableOperation(),\n                    historyRepository1.CreateInsertOperation(\"Migration 1\", model));\n\n                var historyRepository2\n                    = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"Key2\", null, HistoryContext.DefaultFactory);\n\n                ExecuteOperations(\n                    new[] { historyRepository2.CreateInsertOperation(\"Migration 2\", model) });\n\n                string productVersion;\n                model = historyRepository1.GetModel(\"Migration 1\", out productVersion);\n\n                Assert.NotNull(model);\n                Assert.Equal(typeof(DbContext).Assembly().GetInformationalVersion(), productVersion);\n\n                string _;\n                model = historyRepository2.GetModel(\"Migration 2\", out _);\n\n                Assert.NotNull(model);\n            }\n        }\n\n        [MigrationsTheory]\n        public void Exists_should_return_false_when_no_database()\n        {\n            var historyRepository\n                = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                    ConnectionString.Replace(DatabaseProviderFixture.DefaultDatabaseName, \"NoSuchDatabase\"),\n                    ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.Exists());\n        }\n\n        [MigrationsTheory]\n        public void Exists_should_return_false_when_no_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            Assert.False(historyRepository.Exists());\n        }\n\n        [MigrationsTheory]\n        public void Exists_should_return_true_when_database_and_table()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            Assert.True(historyRepository.Exists());\n        }\n\n        [MigrationsTheory]\n        public void IsShared_should_return_true_when_rows_with_other_context_key()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            ExecuteOperations(GetCreateHistoryTableOperation());\n\n            Assert.False(historyRepository.IsShared());\n\n            ExecuteOperations(\n                new SqlOperation(\n                    @\"INSERT INTO [__MigrationHistory] ([MigrationId], [ContextKey], [ProductVersion], [Model]) \n                                  VALUES ('000000000000000_ExistingMigration', \n                                          'MyKey',\n                                          '1.0',\n                                          0xn\n            Assert.False(historyRepository.IsShared());\n\n            ExecuteOperations(\n                new SqlOperation(\n                    @\"INSERT INTO [__MigrationHistory] ([MigrationId], [ContextKey], [ProductVersion], [Model]) \n                                  VALUES ('000000000000000_ExistingMigration', \n                                          'MyOtherKey',\n                                          '1.0',\n                                          0xn\n            Assert.True(historyRepository.IsShared());\n        }\n\n        [MigrationsTheory]\n        public void Repository_should_work_gracefully_when_no_context_key_column()\n        {\n            ResetDatabase();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var createHistoryTableOperation = GetCreateHistoryTableOperation();\n\n            createHistoryTableOperation.Columns.Remove(\n                createHistoryTableOperation.Columns.Single(c => c.Name == \"ContextKey\"));\n\n            createHistoryTableOperation.PrimaryKey.Columns.Remove(\"ContextKey\");\n\n            ExecuteOperations(\n                createHistoryTableOperation,\n                new SqlOperation(\n                    @\"INSERT INTO [__MigrationHistory] ([MigrationId], [ProductVersion], [Model]) \n                                  VALUES ('000000000000000_ExistingMigration', \n                                          '1.0',\n                                          0xn\n            Assert.True(historyRepository.Exists());\n            string _;\n            Assert.NotNull(historyRepository.GetLastModel(out _, out _));\n            Assert.NotEmpty(historyRepository.GetMigrationsSince(\"0\"));\n            Assert.NotNull(historyRepository.GetModel(\"000000000000000_ExistingMigration\", out _));\n            Assert.Equal(\"000000000000000_ExistingMigration\", historyRepository.GetMigrationId(\"ExistingMigration\"));\n        }\n\n        [MigrationsTheory]\n        public void CreateInsertOperation_should_return_valid_history_operation()\n        {\n            var modelBuilder = new DbModelBuilder();\n            var model = modelBuilder.Build(ProviderInfo);\n            var edmxString = new StringBuilder();\n\n            using (var xmlWriter = XmlWriter.Create(\n                edmxString, new XmlWriterSettings\n                                {\n                                    Indent = true\n                                }))\n            {\n                EdmxWriter.WriteEdmx(model, xmlWriter);\n            }\n\n            var modelDocument = model.GetModel();\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var historyOperation\n                = (HistoryOperation)historyRepository.CreateInsertOperation(\"Migration1\", modelDocument);\n\n            Assert.NotEmpty(historyOperation.CommandTrees);\n            Assert.Equal(DbCommandTreeKind.Insert, historyOperation.CommandTrees.Single().CommandTreeKind);\n        }\n\n        [MigrationsTheory]\n        public void CreateDeleteOperation_should_return_valid_history_operation()\n        {\n            var modelBuilder = new DbModelBuilder();\n            var model = modelBuilder.Build(ProviderInfo);\n            var edmxString = new StringBuilder();\n\n            using (var xmlWriter = XmlWriter.Create(\n                edmxString, new XmlWriterSettings\n                                {\n                                    Indent = true\n                                }))\n            {\n                EdmxWriter.WriteEdmx(model, xmlWriter);\n            }\n\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n\n            var historyOperation\n                = (HistoryOperation)historyRepository.CreateDeleteOperation(\"Migration1\");\n\n            Assert.NotEmpty(historyOperation.CommandTrees);\n            Assert.Equal(DbCommandTreeKind.Delete, historyOperation.CommandTrees.Single().CommandTreeKind);\n        }\n\n        [MigrationsTheory]\n        public void GetLastModel_gets_latest_based_on_MigrationId()\n        {\n            var historyRepository = SetupHistoryRepositoryForOrderingTest();\n\n            string migrationId, _;\n            historyRepository.GetLastModel(out migrationId, out _);\n\n            Assert.Equal(\"227309030010001_Migration1\", migrationId);\n        }\n\n        [MigrationsTheory]\n        public void GetMigrationsSince_gets_migrations_based_on_MigrationId()\n        {\n            var historyRepository = SetupHistoryRepositoryForOrderingTest();\n\n            var migrations = historyRepository.GetMigrationsSince(\"227209030010001_Migration2\");\n\n            Assert.Equal(1, migrations.Count());\n            Assert.Equal(\"227309030010001_Migration1\", migrations.Single());\n        }\n\n        private HistoryRepository SetupHistoryRepositoryForOrderingTest()\n        {\n            ResetDatabase();\n\n            using (var context = CreateContext<ShopContext_v1>())\n            {\n                var model = context.GetModel();\n\n                var clonedConnection = DbProviderServices.GetProviderFactory(context.Database.Connection).CreateConnection();\n                clonedConnection.ConnectionString = context.Database.Connection.ConnectionString;\n\n                using (var historyContext = new HistoryContext(clonedConnection, defaultSchema: null))\n                {\n                    context.InternalContext.MarkDatabaseInitialized();\n\n                    context.Database.ExecuteSqlCommand(\n                        ((IObjectContextAdapter)historyContext).ObjectContext.CreateDatabaseScript());\n\n                    historyContext.History.Add(\n                        new HistoryRow\n                            {\n                                MigrationId = \"227309030010001_Migration1\",\n                                ContextKey = \"MyKey\",\n                                Model = new ModelCompressor().Compress(model),\n                                ProductVersion = \"\",\n                            });\n\n                    historyContext.History.Add(\n                        new HistoryRow\n                            {\n                                MigrationId = \"227209030010001_Migration2\",\n                                ContextKey = \"MyKey\",\n                                Model = new ModelCompressor().Compress(model),\n                                ProductVersion = \"\",\n                            });\n\n                    historyContext.SaveChanges();\n                }\n            }\n\n            return new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", null, HistoryContext.DefaultFactory);\n        }\n\n        [MigrationsTheory]\n        public void HistoryRepository_sets_timeout_onto_HistoryContext()\n        {\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), ConnectionString, ProviderFactory, \"MyKey\", 77, HistoryContext.DefaultFactory);\n\n            using (var connection = new SqlConnection())\n            {\n                using (var context = historyRepository.CreateContext(connection))\n                {\n                    Assert.Equal(77, context.Database.CommandTimeout);\n                }\n            }\n        }\n\n        [MigrationsTheory]\n        public void HistoryRepository_updates_interception_context()\n        {\n            var owner = new Mock<DbContext>().Object;\n            var historyRepository = new HistoryRepository(Mock.Of<InternalContextForMock>(), \n                ConnectionString, \n                ProviderFactory, \n                \"MyKey\", \n                null, \n                HistoryContext.DefaultFactory,\n                schemas: null, \n                contextForInterception: owner);\n\n            using (var connection = ProviderFactory.CreateConnection())\n            {\n                connection.ConnectionString = ConnectionString;\n\n                using (var context = historyRepository.CreateContext(connection))\n                {\n                    var interceptionContext = context.InternalContext.ObjectContext.InterceptionContext;\n                    Assert.Contains(context, interceptionContext.DbContexts);\n                    Assert.Contains(owner, interceptionContext.DbContexts);\n                }\n            }\n        }\n    }\n}\n",
      "Start": 0,
      "Length": 45688,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "..\\..\\TestProjects\\Projects\\UnitTests2\\UnitTests\\Migrations\\History\\HistoryRepositoryTests.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "..\\..\\TestProjects\\Projects\\UnitTests2\\UnitTests\\Migrations\\History\\HistoryRepositoryTests.cs"
  }
]