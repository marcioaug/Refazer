[
  {
    "Start": 598,
    "Length": 48,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 856,
    "Length": 46,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 991,
    "Length": 55,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 1136,
    "Length": 56,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 1281,
    "Length": 55,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 1551,
    "Length": 56,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 1696,
    "Length": 55,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 1842,
    "Length": 57,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  },
  {
    "Start": 1989,
    "Length": 56,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.ParameterChangeIf.API\\ParameterChangeOnIf.cs",
    "SourceCode": "using ExampleProject.Company.ParameterChangeIf.API;\r\nusing System;\r\n\r\nnamespace Microsoft.CodeAnalysis.CSharp\r\n{\r\n    internal static class ObjectDisplay\r\n    {\r\n        public static string FormatPrimitive(object obj, ObjectDisplayOptions options)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                return NullLiteral;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            if (type.GetType().IsEnum)\r\n            {\r\n                type = Enum.GetUnderlyingType(type);\r\n            }\r\n\r\n            if (type == typeof(string))\r\n            {\r\n                return FormatLiteral((string)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(bool))\r\n            {\r\n                return FormatLiteral((bool)obj);\r\n            }\r\n\r\n            if (type == typeof(char))\r\n            {\r\n                return FormatLiteral((char)obj, quoteStrings);\r\n            }\r\n\r\n            if (type == typeof(byte))\r\n            {\r\n                return FormatLiteral((byte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(short))\r\n            {\r\n                return FormatLiteral((short)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(long))\r\n            {\r\n                return FormatLiteral((long)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(double))\r\n            {\r\n                return FormatLiteral((double)obj);\r\n            }\r\n\r\n            if (type == typeof(ulong))\r\n            {\r\n                return FormatLiteral((ulong)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(uint))\r\n            {\r\n                return FormatLiteral((uint)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(ushort))\r\n            {\r\n                return FormatLiteral((ushort)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(sbyte))\r\n            {\r\n                return FormatLiteral((sbyte)obj, useHexadecimalNumbers);\r\n            }\r\n\r\n            if (type == typeof(float))\r\n            {\r\n                return FormatLiteral((float)obj);\r\n            }\r\n\r\n            if (type == typeof(decimal))\r\n            {\r\n                return FormatLiteral((decimal)obj);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private static string FormatLiteral(object p, object useHexadecimalNumbers)\r\n        {\r\n            throw new System.NotImplementedException();\r\n        }\r\n\r\n        public static string FormatLiteral(object obj)\r\n        {\r\n            return \"obj\";\r\n        }\r\n\r\n        public static object useHexadecimalNumbers\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static object quoteStrings\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        public static string NullLiteral\r\n        {\r\n            get;\r\n            set;\r\n        }\r\n\r\n        internal static int FormatLiteral(int value, bool useHexadecimalNumbers)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}"
  }
]