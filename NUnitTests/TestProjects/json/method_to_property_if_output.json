[
  {
    "Start": 417,
    "Length": 34,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.MethodToPropertyOnIf\\MethodToPropertyOnIf.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\n//1113fd3db14fd23fc081e90f27f4ddafad7b244d\r\n\r\nnamespace ExampleProject.Company.MethodToPropertyOnIf\r\n{\r\n    public class MethodToPropertyOnIf\r\n    {\r\n        internal int GetMethodDefOrRefCodedIndex(IMethodReference methodReference)\r\n        {\r\n            if (!treatRefAsPotentialTypeSpec || !IsTypeSpecification(typeReference))\r\n            {\r\n                 return (this.GetTypeRefIndex(typeReference) << 2) | 1;\r\n            }\r\n\r\n            if (!IsTypeSpecification(typeReference))        \r\n            {\r\n                 this.GetTypeRefIndex(typeReference);\r\n            }\r\n\r\n            if (!IsTypeSpecification(typeReference))\r\n             {\r\n                 return 0x01000000 | this.GetTypeRefIndex(typeReference);\r\n             }\r\n            return -1;\r\n        }\r\n\r\n        private int GetTypeRefIndex(object typeReference)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        private bool IsTypeSpecification(object typeReference)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public bool treatRefAsPotentialTypeSpec { get; set; }\r\n        public TypeReference typeReference { get; set; }\r\n    }\r\n}\r\n\r\n\r\n"
  },
  {
    "Start": 576,
    "Length": 34,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.MethodToPropertyOnIf\\MethodToPropertyOnIf.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\n//1113fd3db14fd23fc081e90f27f4ddafad7b244d\r\n\r\nnamespace ExampleProject.Company.MethodToPropertyOnIf\r\n{\r\n    public class MethodToPropertyOnIf\r\n    {\r\n        internal int GetMethodDefOrRefCodedIndex(IMethodReference methodReference)\r\n        {\r\n            if (!treatRefAsPotentialTypeSpec || !IsTypeSpecification(typeReference))\r\n            {\r\n                 return (this.GetTypeRefIndex(typeReference) << 2) | 1;\r\n            }\r\n\r\n            if (!IsTypeSpecification(typeReference))        \r\n            {\r\n                 this.GetTypeRefIndex(typeReference);\r\n            }\r\n\r\n            if (!IsTypeSpecification(typeReference))\r\n             {\r\n                 return 0x01000000 | this.GetTypeRefIndex(typeReference);\r\n             }\r\n            return -1;\r\n        }\r\n\r\n        private int GetTypeRefIndex(object typeReference)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        private bool IsTypeSpecification(object typeReference)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public bool treatRefAsPotentialTypeSpec { get; set; }\r\n        public TypeReference typeReference { get; set; }\r\n    }\r\n}\r\n\r\n\r\n"
  },
  {
    "Start": 725,
    "Length": 34,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.MethodToPropertyOnIf\\MethodToPropertyOnIf.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\n//1113fd3db14fd23fc081e90f27f4ddafad7b244d\r\n\r\nnamespace ExampleProject.Company.MethodToPropertyOnIf\r\n{\r\n    public class MethodToPropertyOnIf\r\n    {\r\n        internal int GetMethodDefOrRefCodedIndex(IMethodReference methodReference)\r\n        {\r\n            if (!treatRefAsPotentialTypeSpec || !IsTypeSpecification(typeReference))\r\n            {\r\n                 return (this.GetTypeRefIndex(typeReference) << 2) | 1;\r\n            }\r\n\r\n            if (!IsTypeSpecification(typeReference))        \r\n            {\r\n                 this.GetTypeRefIndex(typeReference);\r\n            }\r\n\r\n            if (!IsTypeSpecification(typeReference))\r\n             {\r\n                 return 0x01000000 | this.GetTypeRefIndex(typeReference);\r\n             }\r\n            return -1;\r\n        }\r\n\r\n        private int GetTypeRefIndex(object typeReference)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        private bool IsTypeSpecification(object typeReference)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public bool treatRefAsPotentialTypeSpec { get; set; }\r\n        public TypeReference typeReference { get; set; }\r\n    }\r\n}\r\n\r\n\r\n"
  }
]