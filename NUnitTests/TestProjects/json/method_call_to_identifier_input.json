[
  {
    "Text": "modifiers.ToTokenList()",
    "Start": 1185,
    "Length": 23,
    "Parent": {
      "Text": "using Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.ExampleProject.MethodCallToIdentifier\r\n{\r\n    internal class LanguageParser\r\n    {\r\n        private SyntaxNode classOrStructOrInterface;\r\n        private SyntaxFactory syntaxFactory;\r\n        private object name;\r\n        private object typeParameters;\r\n        private List<object> parameterList;\r\n        private object baseList;\r\n        private object constraints;\r\n        private object openBrace;\r\n        private object members;\r\n        private object closeBrace;\r\n        private object semicolon;\r\n        private object tokenList;\r\n\r\n        private TypeDeclarationSyntax ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder<AttributeListSyntax> attributes, SyntaxListBuilder modifiers)\r\n        {\r\n            switch (classOrStructOrInterface.CSharpKind())\r\n            {\r\n                case SyntaxKind.ClassKeyword:\r\n                    return syntaxFactory.ClassDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        parameterList,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                case SyntaxKind.StructKeyword:\r\n                    return syntaxFactory.StructDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        parameterList,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                case SyntaxKind.InterfaceKeyword:\r\n                    return syntaxFactory.InterfaceDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                default:\r\n                    throw new Exception(\"Exception\");\r\n            }\r\n        }\r\n    }\r\n}\r\n",
      "Start": 0,
      "Length": 2832,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\Company.ExampleProject.MethodCallToIdentifier\\LanguageParser.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\Company.ExampleProject.MethodCallToIdentifier\\LanguageParser.cs"
  },
  {
    "Text": "modifiers.ToTokenList()",
    "Start": 1763,
    "Length": 23,
    "Parent": {
      "Text": "using Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.ExampleProject.MethodCallToIdentifier\r\n{\r\n    internal class LanguageParser\r\n    {\r\n        private SyntaxNode classOrStructOrInterface;\r\n        private SyntaxFactory syntaxFactory;\r\n        private object name;\r\n        private object typeParameters;\r\n        private List<object> parameterList;\r\n        private object baseList;\r\n        private object constraints;\r\n        private object openBrace;\r\n        private object members;\r\n        private object closeBrace;\r\n        private object semicolon;\r\n        private object tokenList;\r\n\r\n        private TypeDeclarationSyntax ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder<AttributeListSyntax> attributes, SyntaxListBuilder modifiers)\r\n        {\r\n            switch (classOrStructOrInterface.CSharpKind())\r\n            {\r\n                case SyntaxKind.ClassKeyword:\r\n                    return syntaxFactory.ClassDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        parameterList,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                case SyntaxKind.StructKeyword:\r\n                    return syntaxFactory.StructDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        parameterList,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                case SyntaxKind.InterfaceKeyword:\r\n                    return syntaxFactory.InterfaceDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                default:\r\n                    throw new Exception(\"Exception\");\r\n            }\r\n        }\r\n    }\r\n}\r\n",
      "Start": 0,
      "Length": 2832,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\Company.ExampleProject.MethodCallToIdentifier\\LanguageParser.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\Company.ExampleProject.MethodCallToIdentifier\\LanguageParser.cs"
  },
  {
    "Text": "modifiers.ToTokenList()",
    "Start": 2347,
    "Length": 23,
    "Parent": {
      "Text": "using Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.ExampleProject.MethodCallToIdentifier\r\n{\r\n    internal class LanguageParser\r\n    {\r\n        private SyntaxNode classOrStructOrInterface;\r\n        private SyntaxFactory syntaxFactory;\r\n        private object name;\r\n        private object typeParameters;\r\n        private List<object> parameterList;\r\n        private object baseList;\r\n        private object constraints;\r\n        private object openBrace;\r\n        private object members;\r\n        private object closeBrace;\r\n        private object semicolon;\r\n        private object tokenList;\r\n\r\n        private TypeDeclarationSyntax ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder<AttributeListSyntax> attributes, SyntaxListBuilder modifiers)\r\n        {\r\n            switch (classOrStructOrInterface.CSharpKind())\r\n            {\r\n                case SyntaxKind.ClassKeyword:\r\n                    return syntaxFactory.ClassDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        parameterList,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                case SyntaxKind.StructKeyword:\r\n                    return syntaxFactory.StructDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        parameterList,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                case SyntaxKind.InterfaceKeyword:\r\n                    return syntaxFactory.InterfaceDeclaration(\r\n                        attributes,\r\n                        modifiers.ToTokenList(),\r\n                        classOrStructOrInterface,\r\n                        name,\r\n                        typeParameters,\r\n                        baseList,\r\n                        constraints,\r\n                        openBrace,\r\n                        members,\r\n                        closeBrace,\r\n                        semicolon);\r\n\r\n                default:\r\n                    throw new Exception(\"Exception\");\r\n            }\r\n        }\r\n    }\r\n}\r\n",
      "Start": 0,
      "Length": 2832,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\Company.ExampleProject.MethodCallToIdentifier\\LanguageParser.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\Company.ExampleProject.MethodCallToIdentifier\\LanguageParser.cs"
  }
]