[
  {
    "Start": 533,
    "Length": 105,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.AddContextParam\\AddContextParam.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.AddContextParam\r\n{\r\n    public class AddContextParam\r\n    {\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified, EmitContext context)\r\n        {\r\n            INestedTypeReference nestedType = typeReference.AsNestedTypeReference;\r\n            if (nestedType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, nestedType.GetContainingType(Context), out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IGenericTypeInstanceReference genInst = typeReference.AsGenericTypeInstanceReference;\r\n            if (genInst != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, genInst.GenericType, out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IArrayTypeReference arrType = typeReference as IArrayTypeReference;\r\n            if (arrType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, arrType.GetElementType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IPointerTypeReference pointer = typeReference as IPointerTypeReference;\r\n            if (pointer != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IManagedPointerTypeReference reference = typeReference as IManagedPointerTypeReference;\r\n            if (reference != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n            isAssemQualified = false;\r\n        }\r\n\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public object Context { get; set; }\r\n    }\r\n}"
  },
  {
    "Start": 846,
    "Length": 87,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.AddContextParam\\AddContextParam.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.AddContextParam\r\n{\r\n    public class AddContextParam\r\n    {\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified, EmitContext context)\r\n        {\r\n            INestedTypeReference nestedType = typeReference.AsNestedTypeReference;\r\n            if (nestedType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, nestedType.GetContainingType(Context), out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IGenericTypeInstanceReference genInst = typeReference.AsGenericTypeInstanceReference;\r\n            if (genInst != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, genInst.GenericType, out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IArrayTypeReference arrType = typeReference as IArrayTypeReference;\r\n            if (arrType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, arrType.GetElementType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IPointerTypeReference pointer = typeReference as IPointerTypeReference;\r\n            if (pointer != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IManagedPointerTypeReference reference = typeReference as IManagedPointerTypeReference;\r\n            if (reference != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n            isAssemQualified = false;\r\n        }\r\n\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public object Context { get; set; }\r\n    }\r\n}"
  },
  {
    "Start": 1123,
    "Length": 99,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.AddContextParam\\AddContextParam.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.AddContextParam\r\n{\r\n    public class AddContextParam\r\n    {\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified, EmitContext context)\r\n        {\r\n            INestedTypeReference nestedType = typeReference.AsNestedTypeReference;\r\n            if (nestedType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, nestedType.GetContainingType(Context), out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IGenericTypeInstanceReference genInst = typeReference.AsGenericTypeInstanceReference;\r\n            if (genInst != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, genInst.GenericType, out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IArrayTypeReference arrType = typeReference as IArrayTypeReference;\r\n            if (arrType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, arrType.GetElementType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IPointerTypeReference pointer = typeReference as IPointerTypeReference;\r\n            if (pointer != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IManagedPointerTypeReference reference = typeReference as IManagedPointerTypeReference;\r\n            if (reference != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n            isAssemQualified = false;\r\n        }\r\n\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public object Context { get; set; }\r\n    }\r\n}"
  },
  {
    "Start": 1393,
    "Length": 98,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.AddContextParam\\AddContextParam.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.AddContextParam\r\n{\r\n    public class AddContextParam\r\n    {\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified, EmitContext context)\r\n        {\r\n            INestedTypeReference nestedType = typeReference.AsNestedTypeReference;\r\n            if (nestedType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, nestedType.GetContainingType(Context), out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IGenericTypeInstanceReference genInst = typeReference.AsGenericTypeInstanceReference;\r\n            if (genInst != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, genInst.GenericType, out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IArrayTypeReference arrType = typeReference as IArrayTypeReference;\r\n            if (arrType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, arrType.GetElementType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IPointerTypeReference pointer = typeReference as IPointerTypeReference;\r\n            if (pointer != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IManagedPointerTypeReference reference = typeReference as IManagedPointerTypeReference;\r\n            if (reference != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n            isAssemQualified = false;\r\n        }\r\n\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public object Context { get; set; }\r\n    }\r\n}"
  },
  {
    "Start": 1680,
    "Length": 98,
    "SourcePath": "..\\..\\TestProjects\\ExampleProject\\ExampleProject\\Company.AddContextParam\\AddContextParam.cs",
    "SourceCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.Company.AddContextParam\r\n{\r\n    public class AddContextParam\r\n    {\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified, EmitContext context)\r\n        {\r\n            INestedTypeReference nestedType = typeReference.AsNestedTypeReference;\r\n            if (nestedType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, nestedType.GetContainingType(Context), out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IGenericTypeInstanceReference genInst = typeReference.AsGenericTypeInstanceReference;\r\n            if (genInst != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, genInst.GenericType, out isAssemQualified);\r\n                return;\r\n            }\r\n\r\n            IArrayTypeReference arrType = typeReference as IArrayTypeReference;\r\n            if (arrType != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, arrType.GetElementType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IPointerTypeReference pointer = typeReference as IPointerTypeReference;\r\n            if (pointer != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n\r\n            IManagedPointerTypeReference reference = typeReference as IManagedPointerTypeReference;\r\n            if (reference != null)\r\n            {\r\n                this.AppendAssemblyQualifierIfNecessary(sb, pointer.GetTargetType(Context), out isAssemQualified);\r\n\r\n            }\r\n            isAssemQualified = false;\r\n        }\r\n\r\n        private void AppendAssemblyQualifierIfNecessary(StringBuilder sb, ITypeReference typeReference, out bool isAssemQualified)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public object Context { get; set; }\r\n    }\r\n}"
  }
]