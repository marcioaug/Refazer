[
  {
    "Text": "ASTManager.Parent(st).IsKind(SyntaxKind.VariableDeclaration)",
    "Start": 941,
    "Length": 60,
    "Parent": {
      "Text": "using Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.IntelliMeta.ASTManagerChange\r\n{\r\n    class ASTManagerChange\r\n    {\r\n        /// <summary>\r\n        /// Is dynamic token\r\n        /// </summary>\r\n        /// <param name=\"st\">Syntax token or node</param>\r\n        /// <param name=\"next\">Syntax token or node</param>\r\n        /// <returns>True if is a dynamic token</returns>\r\n        private static bool IsDym(SyntaxNodeOrToken st, SyntaxNodeOrToken next)\r\n        {\r\n            if (st == null) { throw new ArgumentNullException(\"st\"); }\r\n            if (next == null) { throw new ArgumentNullException(\"next\"); }\r\n\r\n            if (!st.IsKind(SyntaxKind.IdentifierToken)) { return false; }\r\n\r\n            SyntaxNodeOrToken parent = ASTManager.Parent(st);\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.VariableDeclaration)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.ObjectCreationExpression)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.AttributeList)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.InvocationExpression)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.SimpleMemberAccessExpression))\r\n            {\r\n                string value = next.ToString();\r\n                if (value.Equals(\"(\"))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
      "Start": 0,
      "Length": 1606,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\IntelliMeta.ASTManagerChange\\ASTManagerChange.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\IntelliMeta.ASTManagerChange\\ASTManagerChange.cs"
  },
  {
    "Text": "ASTManager.Parent(st).IsKind(SyntaxKind.ObjectCreationExpression)",
    "Start": 1039,
    "Length": 65,
    "Parent": {
      "Text": "using Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExampleProject.IntelliMeta.ASTManagerChange\r\n{\r\n    class ASTManagerChange\r\n    {\r\n        /// <summary>\r\n        /// Is dynamic token\r\n        /// </summary>\r\n        /// <param name=\"st\">Syntax token or node</param>\r\n        /// <param name=\"next\">Syntax token or node</param>\r\n        /// <returns>True if is a dynamic token</returns>\r\n        private static bool IsDym(SyntaxNodeOrToken st, SyntaxNodeOrToken next)\r\n        {\r\n            if (st == null) { throw new ArgumentNullException(\"st\"); }\r\n            if (next == null) { throw new ArgumentNullException(\"next\"); }\r\n\r\n            if (!st.IsKind(SyntaxKind.IdentifierToken)) { return false; }\r\n\r\n            SyntaxNodeOrToken parent = ASTManager.Parent(st);\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.VariableDeclaration)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.ObjectCreationExpression)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.AttributeList)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.InvocationExpression)) { return true; }\r\n\r\n            if (ASTManager.Parent(st).IsKind(SyntaxKind.SimpleMemberAccessExpression))\r\n            {\r\n                string value = next.ToString();\r\n                if (value.Equals(\"(\"))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
      "Start": 0,
      "Length": 1606,
      "Parent": null,
      "Node": null,
      "Color": "White",
      "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\IntelliMeta.ASTManagerChange\\ASTManagerChange.cs"
    },
    "Node": null,
    "Color": "LightGreen",
    "Path": "C:\\Users\\SPG\\Documents\\Visual Studio 2013\\Projects\\ExampleProject\\ExampleProject\\IntelliMeta.ASTManagerChange\\ASTManagerChange.cs"
  }
]
