reference 'ProseFunctions.dll';
reference 'Microsoft.CodeAnalysis.CSharp.dll';
reference 'Microsoft.CodeAnalysis.dll';
reference 'TreeElement.dll';

using Microsoft.ProgramSynthesis.Extraction.Text.Semantics;
using ProseFunctions.Substrings;
using ProseFunctions.Spg.Bean;
using System.Collections.Generic;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System;

using semantics ProseFunctions.Substrings.Semantics;
using learners ProseFunctions.Substrings.WitnessFunctions;

language Transformation;
@vardefault[VariableScore]
feature double Score = RankingScore;
@start IEnumerable<Node>  trans := Transformation(node, rule);
Patch rule := SE(editList) | EList(editList, rule);
IEnumerable<Node> editList := EditMap(operation, locations) = Map(\target: Node => operation, locations);
IEnumerable<Node> locations := EditFilter(nodematch, fnodes) = Filter(\x: Node => nodematch, fnodes);
bool nodematch := Match(x, pattern);
IEnumerable<Node> fnodes := Traversal(node, id);

Node operation := Insert(target, ast, c) | InsertBefore(target, ref, ast) |  Update(target, ast) | Delete(target, ref);

Pattern pattern := Context(kmatch, id) | ContextP(kmatch, id) | kmatch;
Pattern kmatch := token | Pattern(kind, children);
IEnumerable<Pattern> children := SC(kmatch) | CList(kmatch, children);
Pattern token := Concrete(tree) | Abstract(kind);

Node ast:= const | ref;
Node const := Node(kind, childrenNodes) | ConstNode(tree);
IEnumerable<Node> childrenNodes := SN(ast) | NList(ast, childrenNodes);
Node ref := Reference(target, pattern, c);

@feature[Score=KindScore] SyntaxKind kind;                     @input Node node;
@feature[Score=KDScore] string id;                             @feature[Score=KScore] K k;
@feature[Score=CScore] int c;
@feature[Score=NodeScore] SyntaxNodeOrToken tree;
