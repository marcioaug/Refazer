reference 'Microsoft.ProgramSynthesis.Extraction.Text.Semantics.dll';
reference 'ProseSample.Substrings.dll';
reference 'Microsoft.CodeAnalysis.CSharp.dll';
reference 'Microsoft.CodeAnalysis.dll';

using Microsoft.ProgramSynthesis.Extraction.Text.Semantics;
using ProseSample.Substrings;
using System.Collections.Generic;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System;

using semantics ProseSample.Substrings.Semantics;
using learners ProseSample.Substrings.WitnessFunctions;

language ProseSample_Match;

@vardefault[VariableScore]
feature double Score = RankingScore;

@start SyntaxNodeOrToken sub := edit;

SyntaxNodeOrToken edit := Insert(n, k, expression, ast);

MatchResult expression := C1(n, kd, expression) | C2(n, kd, expression, expression) | Literal(n, tree);
SyntaxNodeOrToken ast:= Node1(kd, ast) | Node2(kd, ast, ast) | Const(tree);

@feature[Score=KDScore] string id;
@feature[Score=KDScore] string kd;
SyntaxNodeOrToken tree := Identifier(id) | PredefinedType(id) | NumericLiteralExpression(id) | StringLiteralExpression(id);

@input SyntaxNodeOrToken n;
@feature[Score=KScore] int k;