reference 'Microsoft.ProgramSynthesis.Extraction.Text.Semantics.dll';
reference 'ProseSample.Substrings.dll';
reference 'Microsoft.CodeAnalysis.CSharp.dll';
reference 'Microsoft.CodeAnalysis.dll';
reference 'TreeElement.dll';

using Microsoft.ProgramSynthesis.Extraction.Text.Semantics;
using ProseSample.Substrings;
using System.Collections.Generic;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System;

using semantics ProseSample.Substrings.Semantics;
using learners ProseSample.Substrings.WitnessFunctions;

language ProseSample_Match;

@vardefault[VariableScore]
feature double Score = RankingScore;

@start SyntaxNodeOrToken trans := Transformation(n, loop);
IEnumerable<SyntaxNodeOrToken> loop := Loop(script, breaks) = Map(\node: SyntaxNodeOrToken => script, breaks);
IEnumerable<SyntaxNodeOrToken> breaks := Breaks(pred, regions) = Filter(\x: SyntaxNodeOrToken => pred, regions); 
bool pred := FTrue();

IEnumerable<SyntaxNodeOrToken> regions := Template(n, pattern);

SyntaxNodeOrToken script := Script(node, patch);
IEnumerable<SyntaxNodeOrToken> := SE(editList)

IEnumerable<SyntaxNodeOrToken> editList := EditMap(edit, tnodes) = Map(\target: SyntaxNodeOrToken => edit, tnodes);
IEnumerable<SyntaxNodeOrToken> tnodes := TargetNodes(mm, fnodes) = Filter(\e: SyntaxNodeOrToken => mm, fnodes);
bool mm := MM(e, match);
IEnumerable<SyntaxNodeOrToken> fnodes := Traversal(node);

SyntaxNodeOrToken edit := ParentNode(node, match, operation) | Delete(node, match);
SyntaxNodeOrToken operation := Insert(node, ast, k) | Update(node, ast) | Move(node, match, k);

Pattern match := C(node, kind, children) | Tree(kindRef) | Parent(node, kindRef, k);
Pattern kindRef := Variable(node, kind) | Literal(node, tree);
IEnumerable<Pattern> children := SC(match) | CList(match, children);

Pattern pattern:= P(kind, pchildren) | Abstract(kind) | Concrete(tree);
IEnumerable<Pattern> pchildren := SP(pattern) | PList(pattern, pchildren);

Node ast:= Node(kind, childrenNodes) | Const(tree) | Ref(node, match);
IEnumerable<Node> childrenNodes := SN(ast) | NList(ast, childrenNodes);

@feature[Score=KindScore] SyntaxKind kind;                     @input SyntaxNodeOrToken n;
@feature[Score=KDScore] string id;                             @feature[Score=KScore] int k;
@feature[Score=NodeScore] SyntaxNodeOrToken tree;
